; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\os_task.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\os_task.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\user -I.\driver -I.\HARDWARE\TIMER -I.\AD_Sample -I.\SYSTEM\delay -I.\Cmd -I.\SYSTEM\sys -I.\UCOSII\CONFIG -I.\UCOSII\CORE -I.\UCOSII\PORT -I.\Protocol -I.\RTE\Device\STM32F103ZE -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\StdPeriph_Driver\inc -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F10X_HD --omf_browse=.\objects\os_task.crf UCOSII\CORE\os_task.c]
                          THUMB

                          AREA ||i.OSTaskChangePrio||, CODE, READONLY, ALIGN=2

                  OSTaskChangePrio PROC
;;;50     #if OS_TASK_CHANGE_PRIO_EN > 0u
;;;51     INT8U  OSTaskChangePrio (INT8U  oldprio,
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;52                              INT8U  newprio)
;;;53     {
000004  4681              MOV      r9,r0
000006  4688              MOV      r8,r1
;;;54     #if (OS_EVENT_EN)
;;;55         OS_EVENT  *pevent;
;;;56     #if (OS_EVENT_MULTI_EN > 0u)
;;;57         OS_EVENT **pevents;
;;;58     #endif
;;;59     #endif
;;;60         OS_TCB    *ptcb;
;;;61         INT8U      y_new;
;;;62         INT8U      x_new;
;;;63         INT8U      y_old;
;;;64         OS_PRIO    bity_new;
;;;65         OS_PRIO    bitx_new;
;;;66         OS_PRIO    bity_old;
;;;67         OS_PRIO    bitx_old;
;;;68     #if OS_CRITICAL_METHOD == 3u
;;;69         OS_CPU_SR  cpu_sr = 0u;                                 /* Storage for CPU status register         */
000008  2000              MOVS     r0,#0
00000a  9000              STR      r0,[sp,#0]
;;;70     #endif
;;;71     
;;;72     
;;;73     /*$PAGE*/
;;;74     #if OS_ARG_CHK_EN > 0u
;;;75         if (oldprio >= OS_LOWEST_PRIO) {
;;;76             if (oldprio != OS_PRIO_SELF) {
;;;77                 return (OS_ERR_PRIO_INVALID);
;;;78             }
;;;79         }
;;;80         if (newprio >= OS_LOWEST_PRIO) {
;;;81             return (OS_ERR_PRIO_INVALID);
;;;82         }
;;;83     #endif
;;;84         OS_ENTER_CRITICAL();
00000c  f7fffffe          BL       OS_CPU_SR_Save
000010  9000              STR      r0,[sp,#0]
;;;85         if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
000012  4848              LDR      r0,|L1.308|
000014  f8500028          LDR      r0,[r0,r8,LSL #2]
000018  b130              CBZ      r0,|L1.40|
;;;86             OS_EXIT_CRITICAL();
00001a  9800              LDR      r0,[sp,#0]
00001c  f7fffffe          BL       OS_CPU_SR_Restore
;;;87             return (OS_ERR_PRIO_EXIST);
000020  2028              MOVS     r0,#0x28
                  |L1.34|
;;;88         }
;;;89         if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
;;;90             oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
;;;91         }
;;;92         ptcb = OSTCBPrioTbl[oldprio];
;;;93         if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
;;;94             OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
;;;95             return (OS_ERR_PRIO);
;;;96         }
;;;97         if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
;;;98             OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
;;;99             return (OS_ERR_TASK_NOT_EXIST);
;;;100        }
;;;101    #if OS_LOWEST_PRIO <= 63u
;;;102        y_new                 = (INT8U)(newprio >> 3u);         /* Yes, compute new TCB fields             */
;;;103        x_new                 = (INT8U)(newprio & 0x07u);
;;;104    #else
;;;105        y_new                 = (INT8U)((INT8U)(newprio >> 4u) & 0x0Fu);
;;;106        x_new                 = (INT8U)(newprio & 0x0Fu);
;;;107    #endif
;;;108        bity_new              = (OS_PRIO)(1uL << y_new);
;;;109        bitx_new              = (OS_PRIO)(1uL << x_new);
;;;110    
;;;111        OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
;;;112        OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
;;;113        y_old                 =  ptcb->OSTCBY;
;;;114        bity_old              =  ptcb->OSTCBBitY;
;;;115        bitx_old              =  ptcb->OSTCBBitX;
;;;116        if ((OSRdyTbl[y_old] &   bitx_old) != 0u) {             /* If task is ready make it not            */
;;;117             OSRdyTbl[y_old] &= (OS_PRIO)~bitx_old;
;;;118             if (OSRdyTbl[y_old] == 0u) {
;;;119                 OSRdyGrp &= (OS_PRIO)~bity_old;
;;;120             }
;;;121             OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
;;;122             OSRdyTbl[y_new] |= bitx_new;
;;;123        }
;;;124    
;;;125    #if (OS_EVENT_EN)
;;;126        pevent = ptcb->OSTCBEventPtr;
;;;127        if (pevent != (OS_EVENT *)0) {
;;;128            pevent->OSEventTbl[y_old] &= (OS_PRIO)~bitx_old;    /* Remove old task prio from wait list     */
;;;129            if (pevent->OSEventTbl[y_old] == 0u) {
;;;130                pevent->OSEventGrp    &= (OS_PRIO)~bity_old;
;;;131            }
;;;132            pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
;;;133            pevent->OSEventTbl[y_new] |= bitx_new;
;;;134        }
;;;135    #if (OS_EVENT_MULTI_EN > 0u)
;;;136        if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
;;;137            pevents =  ptcb->OSTCBEventMultiPtr;
;;;138            pevent  = *pevents;
;;;139            while (pevent != (OS_EVENT *)0) {
;;;140                pevent->OSEventTbl[y_old] &= (OS_PRIO)~bitx_old;   /* Remove old task prio from wait lists */
;;;141                if (pevent->OSEventTbl[y_old] == 0u) {
;;;142                    pevent->OSEventGrp    &= (OS_PRIO)~bity_old;
;;;143                }
;;;144                pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
;;;145                pevent->OSEventTbl[y_new] |= bitx_new;
;;;146                pevents++;
;;;147                pevent                     = *pevents;
;;;148            }
;;;149        }
;;;150    #endif
;;;151    #endif
;;;152    
;;;153        ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
;;;154        ptcb->OSTCBY    = y_new;
;;;155        ptcb->OSTCBX    = x_new;
;;;156        ptcb->OSTCBBitY = bity_new;
;;;157        ptcb->OSTCBBitX = bitx_new;
;;;158        OS_EXIT_CRITICAL();
;;;159        if (OSRunning == OS_TRUE) {
;;;160            OS_Sched();                                         /* Find new highest priority task          */
;;;161        }
;;;162        return (OS_ERR_NONE);
;;;163    }
000022  b004              ADD      sp,sp,#0x10
000024  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.40|
000028  f1b90fff          CMP      r9,#0xff              ;89
00002c  d103              BNE      |L1.54|
00002e  4842              LDR      r0,|L1.312|
000030  6800              LDR      r0,[r0,#0]            ;90  ; OSTCBCur
000032  f8909032          LDRB     r9,[r0,#0x32]         ;90
                  |L1.54|
000036  483f              LDR      r0,|L1.308|
000038  f8504029          LDR      r4,[r0,r9,LSL #2]     ;92
00003c  b924              CBNZ     r4,|L1.72|
00003e  9800              LDR      r0,[sp,#0]            ;94
000040  f7fffffe          BL       OS_CPU_SR_Restore
000044  2029              MOVS     r0,#0x29              ;95
000046  e7ec              B        |L1.34|
                  |L1.72|
000048  2c01              CMP      r4,#1                 ;97
00004a  d104              BNE      |L1.86|
00004c  9800              LDR      r0,[sp,#0]            ;98
00004e  f7fffffe          BL       OS_CPU_SR_Restore
000052  2043              MOVS     r0,#0x43              ;99
000054  e7e5              B        |L1.34|
                  |L1.86|
000056  ea4f07e8          ASR      r7,r8,#3              ;102
00005a  f0080007          AND      r0,r8,#7              ;103
00005e  9003              STR      r0,[sp,#0xc]          ;103
000060  2001              MOVS     r0,#1                 ;108
000062  40b8              LSLS     r0,r0,r7              ;108
000064  f0000aff          AND      r10,r0,#0xff          ;108
000068  2101              MOVS     r1,#1                 ;109
00006a  9803              LDR      r0,[sp,#0xc]          ;109
00006c  4081              LSLS     r1,r1,r0              ;109
00006e  f0010bff          AND      r11,r1,#0xff          ;109
000072  2000              MOVS     r0,#0                 ;111
000074  492f              LDR      r1,|L1.308|
000076  f8410029          STR      r0,[r1,r9,LSL #2]     ;111
00007a  4608              MOV      r0,r1                 ;112
00007c  f8404028          STR      r4,[r0,r8,LSL #2]     ;112
000080  f8146f34          LDRB     r6,[r4,#0x34]!        ;113
000084  78a0              LDRB     r0,[r4,#2]            ;114
000086  9002              STR      r0,[sp,#8]            ;114
000088  7860              LDRB     r0,[r4,#1]            ;115
00008a  3c34              SUBS     r4,r4,#0x34           ;115
00008c  9001              STR      r0,[sp,#4]            ;115
00008e  482b              LDR      r0,|L1.316|
000090  5d81              LDRB     r1,[r0,r6]            ;116
000092  9801              LDR      r0,[sp,#4]            ;116
000094  4001              ANDS     r1,r1,r0              ;116
000096  b1d1              CBZ      r1,|L1.206|
000098  4828              LDR      r0,|L1.316|
00009a  5d80              LDRB     r0,[r0,r6]            ;117
00009c  9901              LDR      r1,[sp,#4]            ;117
00009e  4388              BICS     r0,r0,r1              ;117
0000a0  4926              LDR      r1,|L1.316|
0000a2  5588              STRB     r0,[r1,r6]            ;117
0000a4  4608              MOV      r0,r1                 ;118
0000a6  5d80              LDRB     r0,[r0,r6]            ;118
0000a8  b928              CBNZ     r0,|L1.182|
0000aa  4825              LDR      r0,|L1.320|
0000ac  7800              LDRB     r0,[r0,#0]            ;119  ; OSRdyGrp
0000ae  9902              LDR      r1,[sp,#8]            ;119
0000b0  4388              BICS     r0,r0,r1              ;119
0000b2  4923              LDR      r1,|L1.320|
0000b4  7008              STRB     r0,[r1,#0]            ;119
                  |L1.182|
0000b6  4822              LDR      r0,|L1.320|
0000b8  7800              LDRB     r0,[r0,#0]            ;121  ; OSRdyGrp
0000ba  ea40000a          ORR      r0,r0,r10             ;121
0000be  4920              LDR      r1,|L1.320|
0000c0  7008              STRB     r0,[r1,#0]            ;121
0000c2  481e              LDR      r0,|L1.316|
0000c4  5dc0              LDRB     r0,[r0,r7]            ;122
0000c6  ea40000b          ORR      r0,r0,r11             ;122
0000ca  491c              LDR      r1,|L1.316|
0000cc  55c8              STRB     r0,[r1,r7]            ;122
                  |L1.206|
0000ce  69e5              LDR      r5,[r4,#0x1c]         ;126
0000d0  b1d5              CBZ      r5,|L1.264|
0000d2  f105000b          ADD      r0,r5,#0xb            ;128
0000d6  5d80              LDRB     r0,[r0,r6]            ;128
0000d8  9901              LDR      r1,[sp,#4]            ;128
0000da  4388              BICS     r0,r0,r1              ;128
0000dc  f105010b          ADD      r1,r5,#0xb            ;128
0000e0  5588              STRB     r0,[r1,r6]            ;128
0000e2  4608              MOV      r0,r1                 ;129
0000e4  5d80              LDRB     r0,[r0,r6]            ;129
0000e6  b918              CBNZ     r0,|L1.240|
0000e8  7aa8              LDRB     r0,[r5,#0xa]          ;130
0000ea  9902              LDR      r1,[sp,#8]            ;130
0000ec  4388              BICS     r0,r0,r1              ;130
0000ee  72a8              STRB     r0,[r5,#0xa]          ;130
                  |L1.240|
0000f0  7aa8              LDRB     r0,[r5,#0xa]          ;132
0000f2  ea40000a          ORR      r0,r0,r10             ;132
0000f6  72a8              STRB     r0,[r5,#0xa]          ;132
0000f8  f105000b          ADD      r0,r5,#0xb            ;133
0000fc  5dc0              LDRB     r0,[r0,r7]            ;133
0000fe  ea40000b          ORR      r0,r0,r11             ;133
000102  f105010b          ADD      r1,r5,#0xb            ;133
000106  55c8              STRB     r0,[r1,r7]            ;133
                  |L1.264|
000108  f8848032          STRB     r8,[r4,#0x32]         ;153
00010c  f8847034          STRB     r7,[r4,#0x34]         ;154
000110  9803              LDR      r0,[sp,#0xc]          ;155
000112  f8840033          STRB     r0,[r4,#0x33]         ;155
000116  f884a036          STRB     r10,[r4,#0x36]        ;156
00011a  f884b035          STRB     r11,[r4,#0x35]        ;157
00011e  9800              LDR      r0,[sp,#0]            ;158
000120  f7fffffe          BL       OS_CPU_SR_Restore
000124  4807              LDR      r0,|L1.324|
000126  7800              LDRB     r0,[r0,#0]            ;159  ; OSRunning
000128  2801              CMP      r0,#1                 ;159
00012a  d101              BNE      |L1.304|
00012c  f7fffffe          BL       OS_Sched
                  |L1.304|
000130  2000              MOVS     r0,#0                 ;162
000132  e776              B        |L1.34|
;;;164    #endif
                          ENDP

                  |L1.308|
                          DCD      OSTCBPrioTbl
                  |L1.312|
                          DCD      OSTCBCur
                  |L1.316|
                          DCD      OSRdyTbl
                  |L1.320|
                          DCD      OSRdyGrp
                  |L1.324|
                          DCD      OSRunning

                          AREA ||i.OSTaskCreate||, CODE, READONLY, ALIGN=2

                  OSTaskCreate PROC
;;;206    #if OS_TASK_CREATE_EN > 0u
;;;207    INT8U  OSTaskCreate (void   (*task)(void *p_arg),
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;208                         void    *p_arg,
;;;209                         OS_STK  *ptos,
;;;210                         INT8U    prio)
;;;211    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
00000a  461c              MOV      r4,r3
;;;212        OS_STK    *psp;
;;;213        INT8U      err;
;;;214    #if OS_CRITICAL_METHOD == 3u                 /* Allocate storage for CPU status register               */
;;;215        OS_CPU_SR  cpu_sr = 0u;
00000c  f04f0900          MOV      r9,#0
;;;216    #endif
;;;217    
;;;218    
;;;219    
;;;220    #ifdef OS_SAFETY_CRITICAL_IEC61508
;;;221        if (OSSafetyCriticalStartFlag == OS_TRUE) {
;;;222            OS_SAFETY_CRITICAL_EXCEPTION();
;;;223        }
;;;224    #endif
;;;225    
;;;226    #if OS_ARG_CHK_EN > 0u
;;;227        if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
;;;228            return (OS_ERR_PRIO_INVALID);
;;;229        }
;;;230    #endif
;;;231        OS_ENTER_CRITICAL();
000010  f7fffffe          BL       OS_CPU_SR_Save
000014  4681              MOV      r9,r0
;;;232        if (OSIntNesting > 0u) {                 /* Make sure we don't create the task from within an ISR  */
000016  481f              LDR      r0,|L2.148|
000018  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
00001a  b128              CBZ      r0,|L2.40|
;;;233            OS_EXIT_CRITICAL();
00001c  4648              MOV      r0,r9
00001e  f7fffffe          BL       OS_CPU_SR_Restore
;;;234            return (OS_ERR_TASK_CREATE_ISR);
000022  203c              MOVS     r0,#0x3c
                  |L2.36|
;;;235        }
;;;236        if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
;;;237            OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
;;;238                                                 /* ... the same thing until task is created.              */
;;;239            OS_EXIT_CRITICAL();
;;;240            psp = OSTaskStkInit(task, p_arg, ptos, 0u);             /* Initialize the task's stack         */
;;;241            err = OS_TCBInit(prio, psp, (OS_STK *)0, 0u, 0u, (void *)0, 0u);
;;;242            if (err == OS_ERR_NONE) {
;;;243                if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
;;;244                    OS_Sched();
;;;245                }
;;;246            } else {
;;;247                OS_ENTER_CRITICAL();
;;;248                OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
;;;249                OS_EXIT_CRITICAL();
;;;250            }
;;;251            return (err);
;;;252        }
;;;253        OS_EXIT_CRITICAL();
;;;254        return (OS_ERR_PRIO_EXIST);
;;;255    }
000024  e8bd8ffe          POP      {r1-r11,pc}
                  |L2.40|
000028  481b              LDR      r0,|L2.152|
00002a  f8500024          LDR      r0,[r0,r4,LSL #2]     ;236
00002e  bb60              CBNZ     r0,|L2.138|
000030  2001              MOVS     r0,#1                 ;237
000032  4919              LDR      r1,|L2.152|
000034  f8410024          STR      r0,[r1,r4,LSL #2]     ;237
000038  4648              MOV      r0,r9                 ;239
00003a  f7fffffe          BL       OS_CPU_SR_Restore
00003e  2300              MOVS     r3,#0                 ;240
000040  4642              MOV      r2,r8                 ;240
000042  4639              MOV      r1,r7                 ;240
000044  4630              MOV      r0,r6                 ;240
000046  f7fffffe          BL       OSTaskStkInit
00004a  4682              MOV      r10,r0                ;240
00004c  2000              MOVS     r0,#0                 ;241
00004e  9000              STR      r0,[sp,#0]            ;241
000050  9001              STR      r0,[sp,#4]            ;241
000052  4603              MOV      r3,r0                 ;241
000054  4602              MOV      r2,r0                 ;241
000056  4651              MOV      r1,r10                ;241
000058  9002              STR      r0,[sp,#8]            ;241
00005a  4620              MOV      r0,r4                 ;241
00005c  f7fffffe          BL       OS_TCBInit
000060  4605              MOV      r5,r0                 ;241
000062  b935              CBNZ     r5,|L2.114|
000064  480d              LDR      r0,|L2.156|
000066  7800              LDRB     r0,[r0,#0]            ;243  ; OSRunning
000068  2801              CMP      r0,#1                 ;243
00006a  d10c              BNE      |L2.134|
00006c  f7fffffe          BL       OS_Sched
000070  e009              B        |L2.134|
                  |L2.114|
000072  f7fffffe          BL       OS_CPU_SR_Save
000076  4681              MOV      r9,r0                 ;247
000078  2000              MOVS     r0,#0                 ;248
00007a  4907              LDR      r1,|L2.152|
00007c  f8410024          STR      r0,[r1,r4,LSL #2]     ;248
000080  4648              MOV      r0,r9                 ;249
000082  f7fffffe          BL       OS_CPU_SR_Restore
                  |L2.134|
000086  4628              MOV      r0,r5                 ;251
000088  e7cc              B        |L2.36|
                  |L2.138|
00008a  4648              MOV      r0,r9                 ;253
00008c  f7fffffe          BL       OS_CPU_SR_Restore
000090  2028              MOVS     r0,#0x28              ;254
000092  e7c7              B        |L2.36|
;;;256    #endif
                          ENDP

                  |L2.148|
                          DCD      OSIntNesting
                  |L2.152|
                          DCD      OSTCBPrioTbl
                  |L2.156|
                          DCD      OSRunning

                          AREA ||i.OSTaskCreateExt||, CODE, READONLY, ALIGN=2

                  OSTaskCreateExt PROC
;;;328    #if OS_TASK_CREATE_EXT_EN > 0u
;;;329    INT8U  OSTaskCreateExt (void   (*task)(void *p_arg),
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;330                            void    *p_arg,
;;;331                            OS_STK  *ptos,
;;;332                            INT8U    prio,
;;;333                            INT16U   id,
;;;334                            OS_STK  *pbos,
;;;335                            INT32U   stk_size,
;;;336                            void    *pext,
;;;337                            INT16U   opt)
;;;338    {
000004  b085              SUB      sp,sp,#0x14
000006  4681              MOV      r9,r0
000008  468a              MOV      r10,r1
00000a  4693              MOV      r11,r2
00000c  461c              MOV      r4,r3
00000e  e9dd780f          LDRD     r7,r8,[sp,#0x3c]
000012  9d12              LDR      r5,[sp,#0x48]
;;;339        OS_STK    *psp;
;;;340        INT8U      err;
;;;341    #if OS_CRITICAL_METHOD == 3u                 /* Allocate storage for CPU status register               */
;;;342        OS_CPU_SR  cpu_sr = 0u;
000014  2000              MOVS     r0,#0
000016  9003              STR      r0,[sp,#0xc]
;;;343    #endif
;;;344    
;;;345    
;;;346    
;;;347    #ifdef OS_SAFETY_CRITICAL_IEC61508
;;;348        if (OSSafetyCriticalStartFlag == OS_TRUE) {
;;;349            OS_SAFETY_CRITICAL_EXCEPTION();
;;;350        }
;;;351    #endif
;;;352    
;;;353    #if OS_ARG_CHK_EN > 0u
;;;354        if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
;;;355            return (OS_ERR_PRIO_INVALID);
;;;356        }
;;;357    #endif
;;;358        OS_ENTER_CRITICAL();
000018  f7fffffe          BL       OS_CPU_SR_Save
00001c  9003              STR      r0,[sp,#0xc]
;;;359        if (OSIntNesting > 0u) {                 /* Make sure we don't create the task from within an ISR  */
00001e  4823              LDR      r0,|L3.172|
000020  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
000022  b130              CBZ      r0,|L3.50|
;;;360            OS_EXIT_CRITICAL();
000024  9803              LDR      r0,[sp,#0xc]
000026  f7fffffe          BL       OS_CPU_SR_Restore
;;;361            return (OS_ERR_TASK_CREATE_ISR);
00002a  203c              MOVS     r0,#0x3c
                  |L3.44|
;;;362        }
;;;363        if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
;;;364            OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
;;;365                                                 /* ... the same thing until task is created.              */
;;;366            OS_EXIT_CRITICAL();
;;;367    
;;;368    #if (OS_TASK_STAT_STK_CHK_EN > 0u)
;;;369            OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
;;;370    #endif
;;;371    
;;;372            psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
;;;373            err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
;;;374            if (err == OS_ERR_NONE) {
;;;375                if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
;;;376                    OS_Sched();
;;;377                }
;;;378            } else {
;;;379                OS_ENTER_CRITICAL();
;;;380                OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
;;;381                OS_EXIT_CRITICAL();
;;;382            }
;;;383            return (err);
;;;384        }
;;;385        OS_EXIT_CRITICAL();
;;;386        return (OS_ERR_PRIO_EXIST);
;;;387    }
00002c  b005              ADD      sp,sp,#0x14
00002e  e8bd8ff0          POP      {r4-r11,pc}
                  |L3.50|
000032  481f              LDR      r0,|L3.176|
000034  f8500024          LDR      r0,[r0,r4,LSL #2]     ;363
000038  bb88              CBNZ     r0,|L3.158|
00003a  2001              MOVS     r0,#1                 ;364
00003c  491c              LDR      r1,|L3.176|
00003e  f8410024          STR      r0,[r1,r4,LSL #2]     ;364
000042  9803              LDR      r0,[sp,#0xc]          ;366
000044  f7fffffe          BL       OS_CPU_SR_Restore
000048  462a              MOV      r2,r5                 ;369
00004a  4641              MOV      r1,r8                 ;369
00004c  4638              MOV      r0,r7                 ;369
00004e  f7fffffe          BL       OS_TaskStkClr
000052  462b              MOV      r3,r5                 ;372
000054  465a              MOV      r2,r11                ;372
000056  4651              MOV      r1,r10                ;372
000058  4648              MOV      r0,r9                 ;372
00005a  f7fffffe          BL       OSTaskStkInit
00005e  9004              STR      r0,[sp,#0x10]         ;372
000060  9811              LDR      r0,[sp,#0x44]         ;373
000062  e9cd8000          STRD     r8,r0,[sp,#0]         ;373
000066  9502              STR      r5,[sp,#8]            ;373
000068  463a              MOV      r2,r7                 ;373
00006a  4620              MOV      r0,r4                 ;373
00006c  9b0e              LDR      r3,[sp,#0x38]         ;373
00006e  9904              LDR      r1,[sp,#0x10]         ;373
000070  f7fffffe          BL       OS_TCBInit
000074  4606              MOV      r6,r0                 ;373
000076  b936              CBNZ     r6,|L3.134|
000078  480e              LDR      r0,|L3.180|
00007a  7800              LDRB     r0,[r0,#0]            ;375  ; OSRunning
00007c  2801              CMP      r0,#1                 ;375
00007e  d10c              BNE      |L3.154|
000080  f7fffffe          BL       OS_Sched
000084  e009              B        |L3.154|
                  |L3.134|
000086  f7fffffe          BL       OS_CPU_SR_Save
00008a  9003              STR      r0,[sp,#0xc]          ;379
00008c  2000              MOVS     r0,#0                 ;380
00008e  4908              LDR      r1,|L3.176|
000090  f8410024          STR      r0,[r1,r4,LSL #2]     ;380
000094  9803              LDR      r0,[sp,#0xc]          ;381
000096  f7fffffe          BL       OS_CPU_SR_Restore
                  |L3.154|
00009a  4630              MOV      r0,r6                 ;383
00009c  e7c6              B        |L3.44|
                  |L3.158|
00009e  e7ff              B        |L3.160|
                  |L3.160|
0000a0  9803              LDR      r0,[sp,#0xc]          ;385
0000a2  f7fffffe          BL       OS_CPU_SR_Restore
0000a6  2028              MOVS     r0,#0x28              ;386
0000a8  e7c0              B        |L3.44|
;;;388    #endif
                          ENDP

0000aa  0000              DCW      0x0000
                  |L3.172|
                          DCD      OSIntNesting
                  |L3.176|
                          DCD      OSTCBPrioTbl
                  |L3.180|
                          DCD      OSRunning

                          AREA ||i.OSTaskDel||, CODE, READONLY, ALIGN=2

                  OSTaskDel PROC
;;;426    #if OS_TASK_DEL_EN > 0u
;;;427    INT8U  OSTaskDel (INT8U prio)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;428    {
000004  4605              MOV      r5,r0
;;;429    #if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
;;;430        OS_FLAG_NODE *pnode;
;;;431    #endif
;;;432        OS_TCB       *ptcb;
;;;433    #if OS_CRITICAL_METHOD == 3u                            /* Allocate storage for CPU status register    */
;;;434        OS_CPU_SR     cpu_sr = 0u;
000006  2700              MOVS     r7,#0
;;;435    #endif
;;;436    
;;;437    
;;;438    
;;;439        if (OSIntNesting > 0u) {                            /* See if trying to delete from ISR            */
000008  4847              LDR      r0,|L4.296|
00000a  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
00000c  b110              CBZ      r0,|L4.20|
;;;440            return (OS_ERR_TASK_DEL_ISR);
00000e  2040              MOVS     r0,#0x40
                  |L4.16|
;;;441        }
;;;442        if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
;;;443            return (OS_ERR_TASK_DEL_IDLE);
;;;444        }
;;;445    #if OS_ARG_CHK_EN > 0u
;;;446        if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
;;;447            if (prio != OS_PRIO_SELF) {
;;;448                return (OS_ERR_PRIO_INVALID);
;;;449            }
;;;450        }
;;;451    #endif
;;;452    
;;;453    /*$PAGE*/
;;;454        OS_ENTER_CRITICAL();
;;;455        if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
;;;456            prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
;;;457        }
;;;458        ptcb = OSTCBPrioTbl[prio];
;;;459        if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
;;;460            OS_EXIT_CRITICAL();
;;;461            return (OS_ERR_TASK_NOT_EXIST);
;;;462        }
;;;463        if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
;;;464            OS_EXIT_CRITICAL();
;;;465            return (OS_ERR_TASK_DEL);
;;;466        }
;;;467    
;;;468        OSRdyTbl[ptcb->OSTCBY] &= (OS_PRIO)~ptcb->OSTCBBitX;
;;;469        if (OSRdyTbl[ptcb->OSTCBY] == 0u) {                 /* Make task not ready                         */
;;;470            OSRdyGrp           &= (OS_PRIO)~ptcb->OSTCBBitY;
;;;471        }
;;;472    
;;;473    #if (OS_EVENT_EN)
;;;474        if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
;;;475            OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
;;;476        }
;;;477    #if (OS_EVENT_MULTI_EN > 0u)
;;;478        if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
;;;479            OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
;;;480        }
;;;481    #endif
;;;482    #endif
;;;483    
;;;484    #if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
;;;485        pnode = ptcb->OSTCBFlagNode;
;;;486        if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
;;;487            OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
;;;488        }
;;;489    #endif
;;;490    
;;;491        ptcb->OSTCBDly      = 0u;                           /* Prevent OSTimeTick() from updating          */
;;;492        ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
;;;493        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
;;;494        if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
;;;495            OSLockNesting++;
;;;496        }
;;;497        OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
;;;498        OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
;;;499        OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
;;;500        if (OSLockNesting > 0u) {                           /* Remove context switch lock                  */
;;;501            OSLockNesting--;
;;;502        }
;;;503        OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
;;;504        OSTaskCtr--;                                        /* One less task being managed                 */
;;;505        OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
;;;506        if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
;;;507            ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
;;;508            OSTCBList                  = ptcb->OSTCBNext;
;;;509        } else {
;;;510            ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
;;;511            ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
;;;512        }
;;;513        ptcb->OSTCBNext     = OSTCBFreeList;                /* Return TCB to free TCB list                 */
;;;514        OSTCBFreeList       = ptcb;
;;;515    #if OS_TASK_NAME_EN > 0u
;;;516        ptcb->OSTCBTaskName = (INT8U *)(void *)"?";
;;;517    #endif
;;;518        OS_EXIT_CRITICAL();
;;;519        if (OSRunning == OS_TRUE) {
;;;520            OS_Sched();                                     /* Find new highest priority task              */
;;;521        }
;;;522        return (OS_ERR_NONE);
;;;523    }
000010  e8bd81f0          POP      {r4-r8,pc}
                  |L4.20|
000014  2d3f              CMP      r5,#0x3f              ;442
000016  d101              BNE      |L4.28|
000018  203e              MOVS     r0,#0x3e              ;443
00001a  e7f9              B        |L4.16|
                  |L4.28|
00001c  f7fffffe          BL       OS_CPU_SR_Save
000020  4607              MOV      r7,r0                 ;454
000022  2dff              CMP      r5,#0xff              ;455
000024  d103              BNE      |L4.46|
000026  4841              LDR      r0,|L4.300|
000028  6800              LDR      r0,[r0,#0]            ;456  ; OSTCBCur
00002a  f8905032          LDRB     r5,[r0,#0x32]         ;456
                  |L4.46|
00002e  4840              LDR      r0,|L4.304|
000030  f8504025          LDR      r4,[r0,r5,LSL #2]     ;458
000034  b924              CBNZ     r4,|L4.64|
000036  4638              MOV      r0,r7                 ;460
000038  f7fffffe          BL       OS_CPU_SR_Restore
00003c  2043              MOVS     r0,#0x43              ;461
00003e  e7e7              B        |L4.16|
                  |L4.64|
000040  2c01              CMP      r4,#1                 ;463
000042  d104              BNE      |L4.78|
000044  4638              MOV      r0,r7                 ;464
000046  f7fffffe          BL       OS_CPU_SR_Restore
00004a  203d              MOVS     r0,#0x3d              ;465
00004c  e7e0              B        |L4.16|
                  |L4.78|
00004e  f8140f34          LDRB     r0,[r4,#0x34]!        ;468
000052  4938              LDR      r1,|L4.308|
000054  5c08              LDRB     r0,[r1,r0]            ;468
000056  7861              LDRB     r1,[r4,#1]            ;468
000058  4388              BICS     r0,r0,r1              ;468
00005a  7821              LDRB     r1,[r4,#0]            ;468
00005c  4a35              LDR      r2,|L4.308|
00005e  5450              STRB     r0,[r2,r1]            ;468
000060  f8140934          LDRB     r0,[r4],#-0x34        ;469
000064  4611              MOV      r1,r2                 ;469
000066  5c08              LDRB     r0,[r1,r0]            ;469
000068  b930              CBNZ     r0,|L4.120|
00006a  f8941036          LDRB     r1,[r4,#0x36]         ;470
00006e  4832              LDR      r0,|L4.312|
000070  7800              LDRB     r0,[r0,#0]            ;470  ; OSRdyGrp
000072  4388              BICS     r0,r0,r1              ;470
000074  4930              LDR      r1,|L4.312|
000076  7008              STRB     r0,[r1,#0]            ;470
                  |L4.120|
000078  69e0              LDR      r0,[r4,#0x1c]         ;474
00007a  b118              CBZ      r0,|L4.132|
00007c  4620              MOV      r0,r4                 ;475
00007e  69e1              LDR      r1,[r4,#0x1c]         ;475
000080  f7fffffe          BL       OS_EventTaskRemove
                  |L4.132|
000084  6a66              LDR      r6,[r4,#0x24]         ;485
000086  b116              CBZ      r6,|L4.142|
000088  4630              MOV      r0,r6                 ;487
00008a  f7fffffe          BL       OS_FlagUnlink
                  |L4.142|
00008e  2000              MOVS     r0,#0                 ;491
000090  62e0              STR      r0,[r4,#0x2c]         ;491
000092  f8840030          STRB     r0,[r4,#0x30]         ;492
000096  f8840031          STRB     r0,[r4,#0x31]         ;493
00009a  4828              LDR      r0,|L4.316|
00009c  7800              LDRB     r0,[r0,#0]            ;494  ; OSLockNesting
00009e  28ff              CMP      r0,#0xff              ;494
0000a0  d204              BCS      |L4.172|
0000a2  4826              LDR      r0,|L4.316|
0000a4  7800              LDRB     r0,[r0,#0]            ;495  ; OSLockNesting
0000a6  1c40              ADDS     r0,r0,#1              ;495
0000a8  4924              LDR      r1,|L4.316|
0000aa  7008              STRB     r0,[r1,#0]            ;495
                  |L4.172|
0000ac  4638              MOV      r0,r7                 ;497
0000ae  f7fffffe          BL       OS_CPU_SR_Restore
0000b2  f7fffffe          BL       OS_Dummy
0000b6  f7fffffe          BL       OS_CPU_SR_Save
0000ba  4607              MOV      r7,r0                 ;499
0000bc  481f              LDR      r0,|L4.316|
0000be  7800              LDRB     r0,[r0,#0]            ;500  ; OSLockNesting
0000c0  b120              CBZ      r0,|L4.204|
0000c2  481e              LDR      r0,|L4.316|
0000c4  7800              LDRB     r0,[r0,#0]            ;501  ; OSLockNesting
0000c6  1e40              SUBS     r0,r0,#1              ;501
0000c8  491c              LDR      r1,|L4.316|
0000ca  7008              STRB     r0,[r1,#0]            ;501
                  |L4.204|
0000cc  4620              MOV      r0,r4                 ;503
0000ce  f7fffffe          BL       OSTaskDelHook
0000d2  481b              LDR      r0,|L4.320|
0000d4  7800              LDRB     r0,[r0,#0]            ;504  ; OSTaskCtr
0000d6  1e40              SUBS     r0,r0,#1              ;504
0000d8  4919              LDR      r1,|L4.320|
0000da  7008              STRB     r0,[r1,#0]            ;504
0000dc  2000              MOVS     r0,#0                 ;505
0000de  4914              LDR      r1,|L4.304|
0000e0  f8410025          STR      r0,[r1,r5,LSL #2]     ;505
0000e4  69a0              LDR      r0,[r4,#0x18]         ;506
0000e6  b930              CBNZ     r0,|L4.246|
0000e8  2000              MOVS     r0,#0                 ;507
0000ea  6961              LDR      r1,[r4,#0x14]         ;507
0000ec  6188              STR      r0,[r1,#0x18]         ;507
0000ee  4915              LDR      r1,|L4.324|
0000f0  6960              LDR      r0,[r4,#0x14]         ;508
0000f2  6008              STR      r0,[r1,#0]            ;508  ; OSTCBList
0000f4  e005              B        |L4.258|
                  |L4.246|
0000f6  e9d40105          LDRD     r0,r1,[r4,#0x14]      ;510
0000fa  6148              STR      r0,[r1,#0x14]         ;510
0000fc  e9d41005          LDRD     r1,r0,[r4,#0x14]      ;511
000100  6188              STR      r0,[r1,#0x18]         ;511
                  |L4.258|
000102  4811              LDR      r0,|L4.328|
000104  6800              LDR      r0,[r0,#0]            ;513  ; OSTCBFreeList
000106  6160              STR      r0,[r4,#0x14]         ;513
000108  480f              LDR      r0,|L4.328|
00010a  6004              STR      r4,[r0,#0]            ;514  ; OSTCBFreeList
00010c  a00f              ADR      r0,|L4.332|
00010e  64e0              STR      r0,[r4,#0x4c]         ;516
000110  4638              MOV      r0,r7                 ;518
000112  f7fffffe          BL       OS_CPU_SR_Restore
000116  480e              LDR      r0,|L4.336|
000118  7800              LDRB     r0,[r0,#0]            ;519  ; OSRunning
00011a  2801              CMP      r0,#1                 ;519
00011c  d101              BNE      |L4.290|
00011e  f7fffffe          BL       OS_Sched
                  |L4.290|
000122  2000              MOVS     r0,#0                 ;522
000124  e774              B        |L4.16|
;;;524    #endif
                          ENDP

000126  0000              DCW      0x0000
                  |L4.296|
                          DCD      OSIntNesting
                  |L4.300|
                          DCD      OSTCBCur
                  |L4.304|
                          DCD      OSTCBPrioTbl
                  |L4.308|
                          DCD      OSRdyTbl
                  |L4.312|
                          DCD      OSRdyGrp
                  |L4.316|
                          DCD      OSLockNesting
                  |L4.320|
                          DCD      OSTaskCtr
                  |L4.324|
                          DCD      OSTCBList
                  |L4.328|
                          DCD      OSTCBFreeList
                  |L4.332|
00014c  3f00              DCB      "?",0
00014e  00                DCB      0
00014f  00                DCB      0
                  |L4.336|
                          DCD      OSRunning

                          AREA ||i.OSTaskDelReq||, CODE, READONLY, ALIGN=2

                  OSTaskDelReq PROC
;;;572    #if OS_TASK_DEL_EN > 0u
;;;573    INT8U  OSTaskDelReq (INT8U prio)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;574    {
000004  4604              MOV      r4,r0
;;;575        INT8U      stat;
;;;576        OS_TCB    *ptcb;
;;;577    #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
;;;578        OS_CPU_SR  cpu_sr = 0u;
000006  2700              MOVS     r7,#0
;;;579    #endif
;;;580    
;;;581    
;;;582    
;;;583        if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
000008  2c3f              CMP      r4,#0x3f
00000a  d102              BNE      |L5.18|
;;;584            return (OS_ERR_TASK_DEL_IDLE);
00000c  203e              MOVS     r0,#0x3e
                  |L5.14|
;;;585        }
;;;586    #if OS_ARG_CHK_EN > 0u
;;;587        if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
;;;588            if (prio != OS_PRIO_SELF) {
;;;589                return (OS_ERR_PRIO_INVALID);
;;;590            }
;;;591        }
;;;592    #endif
;;;593        if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
;;;594            OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
;;;595            stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
;;;596            OS_EXIT_CRITICAL();
;;;597            return (stat);
;;;598        }
;;;599        OS_ENTER_CRITICAL();
;;;600        ptcb = OSTCBPrioTbl[prio];
;;;601        if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
;;;602            OS_EXIT_CRITICAL();
;;;603            return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
;;;604        }
;;;605        if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
;;;606            OS_EXIT_CRITICAL();
;;;607            return (OS_ERR_TASK_DEL);
;;;608        }
;;;609        ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
;;;610        OS_EXIT_CRITICAL();
;;;611        return (OS_ERR_NONE);
;;;612    }
00000e  e8bd81f0          POP      {r4-r8,pc}
                  |L5.18|
000012  2cff              CMP      r4,#0xff              ;593
000014  d10b              BNE      |L5.46|
000016  f7fffffe          BL       OS_CPU_SR_Save
00001a  4607              MOV      r7,r0                 ;594
00001c  4811              LDR      r0,|L5.100|
00001e  6800              LDR      r0,[r0,#0]            ;595  ; OSTCBCur
000020  f8906037          LDRB     r6,[r0,#0x37]         ;595
000024  4638              MOV      r0,r7                 ;596
000026  f7fffffe          BL       OS_CPU_SR_Restore
00002a  4630              MOV      r0,r6                 ;597
00002c  e7ef              B        |L5.14|
                  |L5.46|
00002e  f7fffffe          BL       OS_CPU_SR_Save
000032  4607              MOV      r7,r0                 ;599
000034  480c              LDR      r0,|L5.104|
000036  f8505024          LDR      r5,[r0,r4,LSL #2]     ;600
00003a  b925              CBNZ     r5,|L5.70|
00003c  4638              MOV      r0,r7                 ;602
00003e  f7fffffe          BL       OS_CPU_SR_Restore
000042  2043              MOVS     r0,#0x43              ;603
000044  e7e3              B        |L5.14|
                  |L5.70|
000046  2d01              CMP      r5,#1                 ;605
000048  d104              BNE      |L5.84|
00004a  4638              MOV      r0,r7                 ;606
00004c  f7fffffe          BL       OS_CPU_SR_Restore
000050  203d              MOVS     r0,#0x3d              ;607
000052  e7dc              B        |L5.14|
                  |L5.84|
000054  203f              MOVS     r0,#0x3f              ;609
000056  f8850037          STRB     r0,[r5,#0x37]         ;609
00005a  4638              MOV      r0,r7                 ;610
00005c  f7fffffe          BL       OS_CPU_SR_Restore
000060  2000              MOVS     r0,#0                 ;611
000062  e7d4              B        |L5.14|
;;;613    #endif
                          ENDP

                  |L5.100|
                          DCD      OSTCBCur
                  |L5.104|
                          DCD      OSTCBPrioTbl

                          AREA ||i.OSTaskNameGet||, CODE, READONLY, ALIGN=2

                  OSTaskNameGet PROC
;;;639    #if OS_TASK_NAME_EN > 0u
;;;640    INT8U  OSTaskNameGet (INT8U    prio,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;641                          INT8U  **pname,
;;;642                          INT8U   *perr)
;;;643    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
;;;644        OS_TCB    *ptcb;
;;;645        INT8U      len;
;;;646    #if OS_CRITICAL_METHOD == 3u                             /* Allocate storage for CPU status register   */
;;;647        OS_CPU_SR  cpu_sr = 0u;
00000a  f04f0800          MOV      r8,#0
;;;648    #endif
;;;649    
;;;650    
;;;651    
;;;652    #ifdef OS_SAFETY_CRITICAL
;;;653        if (perr == (INT8U *)0) {
;;;654            OS_SAFETY_CRITICAL_EXCEPTION();
;;;655        }
;;;656    #endif
;;;657    
;;;658    #if OS_ARG_CHK_EN > 0u
;;;659        if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
;;;660            if (prio != OS_PRIO_SELF) {
;;;661                *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
;;;662                return (0u);
;;;663            }
;;;664        }
;;;665        if (pname == (INT8U **)0) {                          /* Is 'pname' a NULL pointer?                 */
;;;666            *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
;;;667            return (0u);
;;;668        }
;;;669    #endif
;;;670        if (OSIntNesting > 0u) {                              /* See if trying to call from an ISR          */
00000e  4819              LDR      r0,|L6.116|
000010  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
000012  b120              CBZ      r0,|L6.30|
;;;671            *perr = OS_ERR_NAME_GET_ISR;
000014  2011              MOVS     r0,#0x11
000016  7020              STRB     r0,[r4,#0]
;;;672            return (0u);
000018  2000              MOVS     r0,#0
                  |L6.26|
;;;673        }
;;;674        OS_ENTER_CRITICAL();
;;;675        if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
;;;676            prio = OSTCBCur->OSTCBPrio;
;;;677        }
;;;678        ptcb = OSTCBPrioTbl[prio];
;;;679        if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
;;;680            OS_EXIT_CRITICAL();                              /* No                                         */
;;;681            *perr = OS_ERR_TASK_NOT_EXIST;
;;;682            return (0u);
;;;683        }
;;;684        if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
;;;685            OS_EXIT_CRITICAL();                              /* Yes                                        */
;;;686            *perr = OS_ERR_TASK_NOT_EXIST;
;;;687            return (0u);
;;;688        }
;;;689        *pname = ptcb->OSTCBTaskName;
;;;690        len    = OS_StrLen(*pname);
;;;691        OS_EXIT_CRITICAL();
;;;692        *perr  = OS_ERR_NONE;
;;;693        return (len);
;;;694    }
00001a  e8bd87f0          POP      {r4-r10,pc}
                  |L6.30|
00001e  f7fffffe          BL       OS_CPU_SR_Save
000022  4680              MOV      r8,r0                 ;674
000024  2eff              CMP      r6,#0xff              ;675
000026  d103              BNE      |L6.48|
000028  4813              LDR      r0,|L6.120|
00002a  6800              LDR      r0,[r0,#0]            ;676  ; OSTCBCur
00002c  f8906032          LDRB     r6,[r0,#0x32]         ;676
                  |L6.48|
000030  4812              LDR      r0,|L6.124|
000032  f8505026          LDR      r5,[r0,r6,LSL #2]     ;678
000036  b935              CBNZ     r5,|L6.70|
000038  4640              MOV      r0,r8                 ;680
00003a  f7fffffe          BL       OS_CPU_SR_Restore
00003e  2043              MOVS     r0,#0x43              ;681
000040  7020              STRB     r0,[r4,#0]            ;681
000042  2000              MOVS     r0,#0                 ;682
000044  e7e9              B        |L6.26|
                  |L6.70|
000046  2d01              CMP      r5,#1                 ;684
000048  d106              BNE      |L6.88|
00004a  4640              MOV      r0,r8                 ;685
00004c  f7fffffe          BL       OS_CPU_SR_Restore
000050  2043              MOVS     r0,#0x43              ;686
000052  7020              STRB     r0,[r4,#0]            ;686
000054  2000              MOVS     r0,#0                 ;687
000056  e7e0              B        |L6.26|
                  |L6.88|
000058  6ce8              LDR      r0,[r5,#0x4c]         ;689
00005a  6038              STR      r0,[r7,#0]            ;689
00005c  6838              LDR      r0,[r7,#0]            ;690
00005e  f7fffffe          BL       OS_StrLen
000062  4681              MOV      r9,r0                 ;690
000064  4640              MOV      r0,r8                 ;691
000066  f7fffffe          BL       OS_CPU_SR_Restore
00006a  2000              MOVS     r0,#0                 ;692
00006c  7020              STRB     r0,[r4,#0]            ;692
00006e  4648              MOV      r0,r9                 ;693
000070  e7d3              B        |L6.26|
;;;695    #endif
                          ENDP

000072  0000              DCW      0x0000
                  |L6.116|
                          DCD      OSIntNesting
                  |L6.120|
                          DCD      OSTCBCur
                  |L6.124|
                          DCD      OSTCBPrioTbl

                          AREA ||i.OSTaskNameSet||, CODE, READONLY, ALIGN=2

                  OSTaskNameSet PROC
;;;720    #if OS_TASK_NAME_EN > 0u
;;;721    void  OSTaskNameSet (INT8U   prio,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;722                         INT8U  *pname,
;;;723                         INT8U  *perr)
;;;724    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
;;;725        OS_TCB    *ptcb;
;;;726    #if OS_CRITICAL_METHOD == 3u                         /* Allocate storage for CPU status register       */
;;;727        OS_CPU_SR  cpu_sr = 0u;
00000a  f04f0800          MOV      r8,#0
;;;728    #endif
;;;729    
;;;730    
;;;731    
;;;732    #ifdef OS_SAFETY_CRITICAL
;;;733        if (perr == (INT8U *)0) {
;;;734            OS_SAFETY_CRITICAL_EXCEPTION();
;;;735        }
;;;736    #endif
;;;737    
;;;738    #if OS_ARG_CHK_EN > 0u
;;;739        if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
;;;740            if (prio != OS_PRIO_SELF) {
;;;741                *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
;;;742                return;
;;;743            }
;;;744        }
;;;745        if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
;;;746            *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
;;;747            return;
;;;748        }
;;;749    #endif
;;;750        if (OSIntNesting > 0u) {                         /* See if trying to call from an ISR              */
00000e  4815              LDR      r0,|L7.100|
000010  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
000012  b118              CBZ      r0,|L7.28|
;;;751            *perr = OS_ERR_NAME_SET_ISR;
000014  2012              MOVS     r0,#0x12
000016  7020              STRB     r0,[r4,#0]
                  |L7.24|
;;;752            return;
;;;753        }
;;;754        OS_ENTER_CRITICAL();
;;;755        if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
;;;756            prio = OSTCBCur->OSTCBPrio;
;;;757        }
;;;758        ptcb = OSTCBPrioTbl[prio];
;;;759        if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
;;;760            OS_EXIT_CRITICAL();                          /* No                                             */
;;;761            *perr = OS_ERR_TASK_NOT_EXIST;
;;;762            return;
;;;763        }
;;;764        if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
;;;765            OS_EXIT_CRITICAL();                          /* Yes                                            */
;;;766            *perr = OS_ERR_TASK_NOT_EXIST;
;;;767            return;
;;;768        }
;;;769        ptcb->OSTCBTaskName = pname;
;;;770        OS_EXIT_CRITICAL();
;;;771        *perr               = OS_ERR_NONE;
;;;772    }
000018  e8bd81f0          POP      {r4-r8,pc}
                  |L7.28|
00001c  f7fffffe          BL       OS_CPU_SR_Save
000020  4680              MOV      r8,r0                 ;754
000022  2eff              CMP      r6,#0xff              ;755
000024  d103              BNE      |L7.46|
000026  4810              LDR      r0,|L7.104|
000028  6800              LDR      r0,[r0,#0]            ;756  ; OSTCBCur
00002a  f8906032          LDRB     r6,[r0,#0x32]         ;756
                  |L7.46|
00002e  480f              LDR      r0,|L7.108|
000030  f8505026          LDR      r5,[r0,r6,LSL #2]     ;758
000034  b92d              CBNZ     r5,|L7.66|
000036  4640              MOV      r0,r8                 ;760
000038  f7fffffe          BL       OS_CPU_SR_Restore
00003c  2043              MOVS     r0,#0x43              ;761
00003e  7020              STRB     r0,[r4,#0]            ;761
000040  e7ea              B        |L7.24|
                  |L7.66|
000042  2d01              CMP      r5,#1                 ;764
000044  d105              BNE      |L7.82|
000046  4640              MOV      r0,r8                 ;765
000048  f7fffffe          BL       OS_CPU_SR_Restore
00004c  2043              MOVS     r0,#0x43              ;766
00004e  7020              STRB     r0,[r4,#0]            ;766
000050  e7e2              B        |L7.24|
                  |L7.82|
000052  64ef              STR      r7,[r5,#0x4c]         ;769
000054  4640              MOV      r0,r8                 ;770
000056  f7fffffe          BL       OS_CPU_SR_Restore
00005a  2000              MOVS     r0,#0                 ;771
00005c  7020              STRB     r0,[r4,#0]            ;771
00005e  bf00              NOP      
000060  e7da              B        |L7.24|
;;;773    #endif
                          ENDP

000062  0000              DCW      0x0000
                  |L7.100|
                          DCD      OSIntNesting
                  |L7.104|
                          DCD      OSTCBCur
                  |L7.108|
                          DCD      OSTCBPrioTbl

                          AREA ||i.OSTaskQuery||, CODE, READONLY, ALIGN=2

                  OSTaskQuery PROC
;;;1019   #if OS_TASK_QUERY_EN > 0u
;;;1020   INT8U  OSTaskQuery (INT8U    prio,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1021                       OS_TCB  *p_task_data)
;;;1022   {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;1023       OS_TCB    *ptcb;
;;;1024   #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
;;;1025       OS_CPU_SR  cpu_sr = 0u;
000008  2700              MOVS     r7,#0
;;;1026   #endif
;;;1027   
;;;1028   
;;;1029   
;;;1030   #if OS_ARG_CHK_EN > 0u
;;;1031       if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
;;;1032           if (prio != OS_PRIO_SELF) {
;;;1033               return (OS_ERR_PRIO_INVALID);
;;;1034           }
;;;1035       }
;;;1036       if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
;;;1037           return (OS_ERR_PDATA_NULL);
;;;1038       }
;;;1039   #endif
;;;1040       OS_ENTER_CRITICAL();
00000a  f7fffffe          BL       OS_CPU_SR_Save
00000e  4607              MOV      r7,r0
;;;1041       if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
000010  2dff              CMP      r5,#0xff
000012  d103              BNE      |L8.28|
;;;1042           prio = OSTCBCur->OSTCBPrio;
000014  480f              LDR      r0,|L8.84|
000016  6800              LDR      r0,[r0,#0]  ; OSTCBCur
000018  f8905032          LDRB     r5,[r0,#0x32]
                  |L8.28|
;;;1043       }
;;;1044       ptcb = OSTCBPrioTbl[prio];
00001c  480e              LDR      r0,|L8.88|
00001e  f8504025          LDR      r4,[r0,r5,LSL #2]
;;;1045       if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
000022  b92c              CBNZ     r4,|L8.48|
;;;1046           OS_EXIT_CRITICAL();
000024  4638              MOV      r0,r7
000026  f7fffffe          BL       OS_CPU_SR_Restore
;;;1047           return (OS_ERR_PRIO);
00002a  2029              MOVS     r0,#0x29
                  |L8.44|
;;;1048       }
;;;1049       if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
;;;1050           OS_EXIT_CRITICAL();
;;;1051           return (OS_ERR_TASK_NOT_EXIST);
;;;1052       }
;;;1053                                                    /* Copy TCB into user storage area                    */
;;;1054       OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
;;;1055       OS_EXIT_CRITICAL();
;;;1056       return (OS_ERR_NONE);
;;;1057   }
00002c  e8bd81f0          POP      {r4-r8,pc}
                  |L8.48|
000030  2c01              CMP      r4,#1                 ;1049
000032  d104              BNE      |L8.62|
000034  4638              MOV      r0,r7                 ;1050
000036  f7fffffe          BL       OS_CPU_SR_Restore
00003a  2043              MOVS     r0,#0x43              ;1051
00003c  e7f6              B        |L8.44|
                  |L8.62|
00003e  2254              MOVS     r2,#0x54              ;1054
000040  4621              MOV      r1,r4                 ;1054
000042  4630              MOV      r0,r6                 ;1054
000044  f7fffffe          BL       OS_MemCopy
000048  4638              MOV      r0,r7                 ;1055
00004a  f7fffffe          BL       OS_CPU_SR_Restore
00004e  2000              MOVS     r0,#0                 ;1056
000050  e7ec              B        |L8.44|
;;;1058   #endif
                          ENDP

000052  0000              DCW      0x0000
                  |L8.84|
                          DCD      OSTCBCur
                  |L8.88|
                          DCD      OSTCBPrioTbl

                          AREA ||i.OSTaskRegGet||, CODE, READONLY, ALIGN=2

                  OSTaskRegGet PROC
;;;1086   #if OS_TASK_REG_TBL_SIZE > 0u
;;;1087   INT32U  OSTaskRegGet (INT8U   prio,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1088                         INT8U   id,
;;;1089                         INT8U  *perr)
;;;1090   {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;1091   #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
;;;1092       OS_CPU_SR  cpu_sr = 0u;
00000a  f04f0900          MOV      r9,#0
;;;1093   #endif
;;;1094       INT32U     value;
;;;1095       OS_TCB    *ptcb;
;;;1096   
;;;1097   
;;;1098   #if OS_ARG_CHK_EN > 0u
;;;1099       if (prio >= OS_LOWEST_PRIO) {
;;;1100           if (prio != OS_PRIO_SELF) {
;;;1101               *perr = OS_ERR_PRIO_INVALID;
;;;1102               return (0u);
;;;1103           }
;;;1104       }
;;;1105       if (id >= OS_TASK_REG_TBL_SIZE) {
;;;1106           *perr = OS_ERR_ID_INVALID;
;;;1107           return (0u);
;;;1108       }
;;;1109   #endif
;;;1110       OS_ENTER_CRITICAL();
00000e  f7fffffe          BL       OS_CPU_SR_Save
000012  4681              MOV      r9,r0
;;;1111       if (prio == OS_PRIO_SELF) {                  /* See if need to get register from current task      */
000014  2cff              CMP      r4,#0xff
000016  d102              BNE      |L9.30|
;;;1112           ptcb = OSTCBCur;
000018  4808              LDR      r0,|L9.60|
00001a  6805              LDR      r5,[r0,#0]  ; OSTCBCur
00001c  e002              B        |L9.36|
                  |L9.30|
;;;1113       } else {
;;;1114           ptcb = OSTCBPrioTbl[prio];
00001e  4808              LDR      r0,|L9.64|
000020  f8505024          LDR      r5,[r0,r4,LSL #2]
                  |L9.36|
;;;1115       }
;;;1116       value = ptcb->OSTCBRegTbl[id];
000024  f1050050          ADD      r0,r5,#0x50
000028  f8508026          LDR      r8,[r0,r6,LSL #2]
;;;1117       OS_EXIT_CRITICAL();
00002c  4648              MOV      r0,r9
00002e  f7fffffe          BL       OS_CPU_SR_Restore
;;;1118       *perr = OS_ERR_NONE;
000032  2000              MOVS     r0,#0
000034  7038              STRB     r0,[r7,#0]
;;;1119       return (value);
000036  4640              MOV      r0,r8
;;;1120   }
000038  e8bd87f0          POP      {r4-r10,pc}
;;;1121   #endif
                          ENDP

                  |L9.60|
                          DCD      OSTCBCur
                  |L9.64|
                          DCD      OSTCBPrioTbl

                          AREA ||i.OSTaskRegSet||, CODE, READONLY, ALIGN=2

                  OSTaskRegSet PROC
;;;1152   #if OS_TASK_REG_TBL_SIZE > 0u
;;;1153   void  OSTaskRegSet (INT8U    prio,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1154                       INT8U    id,
;;;1155                       INT32U   value,
;;;1156                       INT8U   *perr)
;;;1157   {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
;;;1158   #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
;;;1159       OS_CPU_SR  cpu_sr = 0u;
00000c  f04f0900          MOV      r9,#0
;;;1160   #endif
;;;1161       OS_TCB    *ptcb;
;;;1162   
;;;1163   
;;;1164   #if OS_ARG_CHK_EN > 0u
;;;1165       if (prio >= OS_LOWEST_PRIO) {
;;;1166           if (prio != OS_PRIO_SELF) {
;;;1167               *perr = OS_ERR_PRIO_INVALID;
;;;1168               return;
;;;1169           }
;;;1170       }
;;;1171       if (id >= OS_TASK_REG_TBL_SIZE) {
;;;1172           *perr = OS_ERR_ID_INVALID;
;;;1173           return;
;;;1174       }
;;;1175   #endif
;;;1176       OS_ENTER_CRITICAL();
000010  f7fffffe          BL       OS_CPU_SR_Save
000014  4681              MOV      r9,r0
;;;1177       if (prio == OS_PRIO_SELF) {                  /* See if need to get register from current task      */
000016  2cff              CMP      r4,#0xff
000018  d102              BNE      |L10.32|
;;;1178           ptcb = OSTCBCur;
00001a  4809              LDR      r0,|L10.64|
00001c  6805              LDR      r5,[r0,#0]  ; OSTCBCur
00001e  e002              B        |L10.38|
                  |L10.32|
;;;1179       } else {
;;;1180           ptcb = OSTCBPrioTbl[prio];
000020  4808              LDR      r0,|L10.68|
000022  f8505024          LDR      r5,[r0,r4,LSL #2]
                  |L10.38|
;;;1181       }
;;;1182       ptcb->OSTCBRegTbl[id] = value;
000026  f1050050          ADD      r0,r5,#0x50
00002a  f8407026          STR      r7,[r0,r6,LSL #2]
;;;1183       OS_EXIT_CRITICAL();
00002e  4648              MOV      r0,r9
000030  f7fffffe          BL       OS_CPU_SR_Restore
;;;1184       *perr                 = OS_ERR_NONE;
000034  2000              MOVS     r0,#0
000036  f8880000          STRB     r0,[r8,#0]
;;;1185   }
00003a  e8bd87f0          POP      {r4-r10,pc}
;;;1186   #endif
                          ENDP

00003e  0000              DCW      0x0000
                  |L10.64|
                          DCD      OSTCBCur
                  |L10.68|
                          DCD      OSTCBPrioTbl

                          AREA ||i.OSTaskResume||, CODE, READONLY, ALIGN=2

                  OSTaskResume PROC
;;;794    #if OS_TASK_SUSPEND_EN > 0u
;;;795    INT8U  OSTaskResume (INT8U prio)
000000  b570              PUSH     {r4-r6,lr}
;;;796    {
000002  4605              MOV      r5,r0
;;;797        OS_TCB    *ptcb;
;;;798    #if OS_CRITICAL_METHOD == 3u                                  /* Storage for CPU status register       */
;;;799        OS_CPU_SR  cpu_sr = 0u;
000004  2600              MOVS     r6,#0
;;;800    #endif
;;;801    
;;;802    
;;;803    
;;;804    #if OS_ARG_CHK_EN > 0u
;;;805        if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
;;;806            return (OS_ERR_PRIO_INVALID);
;;;807        }
;;;808    #endif
;;;809        OS_ENTER_CRITICAL();
000006  f7fffffe          BL       OS_CPU_SR_Save
00000a  4606              MOV      r6,r0
;;;810        ptcb = OSTCBPrioTbl[prio];
00000c  4823              LDR      r0,|L11.156|
00000e  f8504025          LDR      r4,[r0,r5,LSL #2]
;;;811        if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
000012  b924              CBNZ     r4,|L11.30|
;;;812            OS_EXIT_CRITICAL();
000014  4630              MOV      r0,r6
000016  f7fffffe          BL       OS_CPU_SR_Restore
;;;813            return (OS_ERR_TASK_RESUME_PRIO);
00001a  2046              MOVS     r0,#0x46
                  |L11.28|
;;;814        }
;;;815        if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
;;;816            OS_EXIT_CRITICAL();
;;;817            return (OS_ERR_TASK_NOT_EXIST);
;;;818        }
;;;819        if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
;;;820            ptcb->OSTCBStat &= (INT8U)~(INT8U)OS_STAT_SUSPEND;    /* Remove suspension                     */
;;;821            if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
;;;822                if (ptcb->OSTCBDly == 0u) {
;;;823                    OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
;;;824                    OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
;;;825                    OS_EXIT_CRITICAL();
;;;826                    if (OSRunning == OS_TRUE) {
;;;827                        OS_Sched();                               /* Find new highest priority task        */
;;;828                    }
;;;829                } else {
;;;830                    OS_EXIT_CRITICAL();
;;;831                }
;;;832            } else {                                              /* Must be pending on event              */
;;;833                OS_EXIT_CRITICAL();
;;;834            }
;;;835            return (OS_ERR_NONE);
;;;836        }
;;;837        OS_EXIT_CRITICAL();
;;;838        return (OS_ERR_TASK_NOT_SUSPENDED);
;;;839    }
00001c  bd70              POP      {r4-r6,pc}
                  |L11.30|
00001e  2c01              CMP      r4,#1                 ;815
000020  d104              BNE      |L11.44|
000022  4630              MOV      r0,r6                 ;816
000024  f7fffffe          BL       OS_CPU_SR_Restore
000028  2043              MOVS     r0,#0x43              ;817
00002a  e7f7              B        |L11.28|
                  |L11.44|
00002c  f8940030          LDRB     r0,[r4,#0x30]         ;819
000030  f0000008          AND      r0,r0,#8              ;819
000034  b360              CBZ      r0,|L11.144|
000036  f8140f30          LDRB     r0,[r4,#0x30]!        ;820
00003a  f00000f7          AND      r0,r0,#0xf7           ;820
00003e  7020              STRB     r0,[r4,#0]            ;820
000040  f8140930          LDRB     r0,[r4],#-0x30        ;821
000044  b9f8              CBNZ     r0,|L11.134|
000046  6ae0              LDR      r0,[r4,#0x2c]         ;822
000048  b9c8              CBNZ     r0,|L11.126|
00004a  3434              ADDS     r4,r4,#0x34           ;823
00004c  78a0              LDRB     r0,[r4,#2]            ;823
00004e  4914              LDR      r1,|L11.160|
000050  7809              LDRB     r1,[r1,#0]            ;823  ; OSRdyGrp
000052  4308              ORRS     r0,r0,r1              ;823
000054  4912              LDR      r1,|L11.160|
000056  7008              STRB     r0,[r1,#0]            ;823
000058  7820              LDRB     r0,[r4,#0]            ;824
00005a  4912              LDR      r1,|L11.164|
00005c  5c08              LDRB     r0,[r1,r0]            ;824
00005e  7861              LDRB     r1,[r4,#1]            ;824
000060  4308              ORRS     r0,r0,r1              ;824
000062  f8141934          LDRB     r1,[r4],#-0x34        ;824
000066  4a0f              LDR      r2,|L11.164|
000068  5450              STRB     r0,[r2,r1]            ;824
00006a  4630              MOV      r0,r6                 ;825
00006c  f7fffffe          BL       OS_CPU_SR_Restore
000070  480d              LDR      r0,|L11.168|
000072  7800              LDRB     r0,[r0,#0]            ;826  ; OSRunning
000074  2801              CMP      r0,#1                 ;826
000076  d109              BNE      |L11.140|
000078  f7fffffe          BL       OS_Sched
00007c  e006              B        |L11.140|
                  |L11.126|
00007e  4630              MOV      r0,r6                 ;830
000080  f7fffffe          BL       OS_CPU_SR_Restore
000084  e002              B        |L11.140|
                  |L11.134|
000086  4630              MOV      r0,r6                 ;833
000088  f7fffffe          BL       OS_CPU_SR_Restore
                  |L11.140|
00008c  2000              MOVS     r0,#0                 ;835
00008e  e7c5              B        |L11.28|
                  |L11.144|
000090  4630              MOV      r0,r6                 ;837
000092  f7fffffe          BL       OS_CPU_SR_Restore
000096  2044              MOVS     r0,#0x44              ;838
000098  e7c0              B        |L11.28|
;;;840    #endif
                          ENDP

00009a  0000              DCW      0x0000
                  |L11.156|
                          DCD      OSTCBPrioTbl
                  |L11.160|
                          DCD      OSRdyGrp
                  |L11.164|
                          DCD      OSRdyTbl
                  |L11.168|
                          DCD      OSRunning

                          AREA ||i.OSTaskStkChk||, CODE, READONLY, ALIGN=2

                  OSTaskStkChk PROC
;;;861    #if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
;;;862    INT8U  OSTaskStkChk (INT8U         prio,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;863                         OS_STK_DATA  *p_stk_data)
;;;864    {
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
;;;865        OS_TCB    *ptcb;
;;;866        OS_STK    *pchk;
;;;867        INT32U     nfree;
;;;868        INT32U     size;
;;;869    #if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
;;;870        OS_CPU_SR  cpu_sr = 0u;
000008  f04f0a00          MOV      r10,#0
;;;871    #endif
;;;872    
;;;873    
;;;874    
;;;875    #if OS_ARG_CHK_EN > 0u
;;;876        if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
;;;877            if (prio != OS_PRIO_SELF) {
;;;878                return (OS_ERR_PRIO_INVALID);
;;;879            }
;;;880        }
;;;881        if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
;;;882            return (OS_ERR_PDATA_NULL);
;;;883        }
;;;884    #endif
;;;885        p_stk_data->OSFree = 0u;                           /* Assume failure, set to 0 size                */
00000c  2000              MOVS     r0,#0
00000e  6028              STR      r0,[r5,#0]
;;;886        p_stk_data->OSUsed = 0u;
000010  6068              STR      r0,[r5,#4]
;;;887        OS_ENTER_CRITICAL();
000012  f7fffffe          BL       OS_CPU_SR_Save
000016  4682              MOV      r10,r0
;;;888        if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
000018  2fff              CMP      r7,#0xff
00001a  d103              BNE      |L12.36|
;;;889            prio = OSTCBCur->OSTCBPrio;
00001c  4819              LDR      r0,|L12.132|
00001e  6800              LDR      r0,[r0,#0]  ; OSTCBCur
000020  f8907032          LDRB     r7,[r0,#0x32]
                  |L12.36|
;;;890        }
;;;891        ptcb = OSTCBPrioTbl[prio];
000024  4818              LDR      r0,|L12.136|
000026  f8504027          LDR      r4,[r0,r7,LSL #2]
;;;892        if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
00002a  b92c              CBNZ     r4,|L12.56|
;;;893            OS_EXIT_CRITICAL();
00002c  4650              MOV      r0,r10
00002e  f7fffffe          BL       OS_CPU_SR_Restore
;;;894            return (OS_ERR_TASK_NOT_EXIST);
000032  2043              MOVS     r0,#0x43
                  |L12.52|
;;;895        }
;;;896        if (ptcb == OS_TCB_RESERVED) {
;;;897            OS_EXIT_CRITICAL();
;;;898            return (OS_ERR_TASK_NOT_EXIST);
;;;899        }
;;;900        if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0u) { /* Make sure stack checking option is set      */
;;;901            OS_EXIT_CRITICAL();
;;;902            return (OS_ERR_TASK_OPT);
;;;903        }
;;;904        nfree = 0u;
;;;905        size  = ptcb->OSTCBStkSize;
;;;906        pchk  = ptcb->OSTCBStkBottom;
;;;907        OS_EXIT_CRITICAL();
;;;908    #if OS_STK_GROWTH == 1u
;;;909        while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
;;;910            nfree++;
;;;911        }
;;;912    #else
;;;913        while (*pchk-- == (OS_STK)0) {
;;;914            nfree++;
;;;915        }
;;;916    #endif
;;;917        p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
;;;918        p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
;;;919        return (OS_ERR_NONE);
;;;920    }
000034  e8bd87f0          POP      {r4-r10,pc}
                  |L12.56|
000038  2c01              CMP      r4,#1                 ;896
00003a  d104              BNE      |L12.70|
00003c  4650              MOV      r0,r10                ;897
00003e  f7fffffe          BL       OS_CPU_SR_Restore
000042  2043              MOVS     r0,#0x43              ;898
000044  e7f6              B        |L12.52|
                  |L12.70|
000046  7c20              LDRB     r0,[r4,#0x10]         ;900
000048  f0000001          AND      r0,r0,#1              ;900
00004c  b920              CBNZ     r0,|L12.88|
00004e  4650              MOV      r0,r10                ;901
000050  f7fffffe          BL       OS_CPU_SR_Restore
000054  2045              MOVS     r0,#0x45              ;902
000056  e7ed              B        |L12.52|
                  |L12.88|
000058  2600              MOVS     r6,#0                 ;904
00005a  f8d4900c          LDR      r9,[r4,#0xc]          ;905
00005e  f8d48008          LDR      r8,[r4,#8]            ;906
000062  4650              MOV      r0,r10                ;907
000064  f7fffffe          BL       OS_CPU_SR_Restore
000068  e000              B        |L12.108|
                  |L12.106|
00006a  1c76              ADDS     r6,r6,#1              ;910
                  |L12.108|
00006c  f8581b04          LDR      r1,[r8],#4            ;909
000070  2900              CMP      r1,#0                 ;909
000072  d0fa              BEQ      |L12.106|
000074  00b0              LSLS     r0,r6,#2              ;917
000076  6028              STR      r0,[r5,#0]            ;917
000078  eba90006          SUB      r0,r9,r6              ;918
00007c  0080              LSLS     r0,r0,#2              ;918
00007e  6068              STR      r0,[r5,#4]            ;918
000080  2000              MOVS     r0,#0                 ;919
000082  e7d7              B        |L12.52|
;;;921    #endif
                          ENDP

                  |L12.132|
                          DCD      OSTCBCur
                  |L12.136|
                          DCD      OSTCBPrioTbl

                          AREA ||i.OSTaskSuspend||, CODE, READONLY, ALIGN=2

                  OSTaskSuspend PROC
;;;946    #if OS_TASK_SUSPEND_EN > 0u
;;;947    INT8U  OSTaskSuspend (INT8U prio)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;948    {
000004  4605              MOV      r5,r0
;;;949        BOOLEAN    self;
;;;950        OS_TCB    *ptcb;
;;;951        INT8U      y;
;;;952    #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
;;;953        OS_CPU_SR  cpu_sr = 0u;
000006  f04f0800          MOV      r8,#0
;;;954    #endif
;;;955    
;;;956    
;;;957    
;;;958    #if OS_ARG_CHK_EN > 0u
;;;959        if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
;;;960            return (OS_ERR_TASK_SUSPEND_IDLE);
;;;961        }
;;;962        if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
;;;963            if (prio != OS_PRIO_SELF) {
;;;964                return (OS_ERR_PRIO_INVALID);
;;;965            }
;;;966        }
;;;967    #endif
;;;968        OS_ENTER_CRITICAL();
00000a  f7fffffe          BL       OS_CPU_SR_Save
00000e  4680              MOV      r8,r0
;;;969        if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
000010  2dff              CMP      r5,#0xff
000012  d105              BNE      |L13.32|
;;;970            prio = OSTCBCur->OSTCBPrio;
000014  4820              LDR      r0,|L13.152|
000016  6800              LDR      r0,[r0,#0]  ; OSTCBCur
000018  f8905032          LDRB     r5,[r0,#0x32]
;;;971            self = OS_TRUE;
00001c  2601              MOVS     r6,#1
00001e  e008              B        |L13.50|
                  |L13.32|
;;;972        } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
000020  481d              LDR      r0,|L13.152|
000022  6800              LDR      r0,[r0,#0]  ; OSTCBCur
000024  f8900032          LDRB     r0,[r0,#0x32]
000028  42a8              CMP      r0,r5
00002a  d101              BNE      |L13.48|
;;;973            self = OS_TRUE;
00002c  2601              MOVS     r6,#1
00002e  e000              B        |L13.50|
                  |L13.48|
;;;974        } else {
;;;975            self = OS_FALSE;                                        /* No suspending another task          */
000030  2600              MOVS     r6,#0
                  |L13.50|
;;;976        }
;;;977        ptcb = OSTCBPrioTbl[prio];
000032  481a              LDR      r0,|L13.156|
000034  f8504025          LDR      r4,[r0,r5,LSL #2]
;;;978        if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
000038  b92c              CBNZ     r4,|L13.70|
;;;979            OS_EXIT_CRITICAL();
00003a  4640              MOV      r0,r8
00003c  f7fffffe          BL       OS_CPU_SR_Restore
;;;980            return (OS_ERR_TASK_SUSPEND_PRIO);
000040  2048              MOVS     r0,#0x48
                  |L13.66|
;;;981        }
;;;982        if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
;;;983            OS_EXIT_CRITICAL();
;;;984            return (OS_ERR_TASK_NOT_EXIST);
;;;985        }
;;;986        y            = ptcb->OSTCBY;
;;;987        OSRdyTbl[y] &= (OS_PRIO)~ptcb->OSTCBBitX;                   /* Make task not ready                 */
;;;988        if (OSRdyTbl[y] == 0u) {
;;;989            OSRdyGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
;;;990        }
;;;991        ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
;;;992        OS_EXIT_CRITICAL();
;;;993        if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
;;;994            OS_Sched();                                             /* Find new highest priority task      */
;;;995        }
;;;996        return (OS_ERR_NONE);
;;;997    }
000042  e8bd81f0          POP      {r4-r8,pc}
                  |L13.70|
000046  2c01              CMP      r4,#1                 ;982
000048  d104              BNE      |L13.84|
00004a  4640              MOV      r0,r8                 ;983
00004c  f7fffffe          BL       OS_CPU_SR_Restore
000050  2043              MOVS     r0,#0x43              ;984
000052  e7f6              B        |L13.66|
                  |L13.84|
000054  f8947034          LDRB     r7,[r4,#0x34]         ;986
000058  4811              LDR      r0,|L13.160|
00005a  5dc0              LDRB     r0,[r0,r7]            ;987
00005c  f8941035          LDRB     r1,[r4,#0x35]         ;987
000060  4388              BICS     r0,r0,r1              ;987
000062  490f              LDR      r1,|L13.160|
000064  55c8              STRB     r0,[r1,r7]            ;987
000066  4608              MOV      r0,r1                 ;988
000068  5dc0              LDRB     r0,[r0,r7]            ;988
00006a  b930              CBNZ     r0,|L13.122|
00006c  f8941036          LDRB     r1,[r4,#0x36]         ;989
000070  480c              LDR      r0,|L13.164|
000072  7800              LDRB     r0,[r0,#0]            ;989  ; OSRdyGrp
000074  4388              BICS     r0,r0,r1              ;989
000076  490b              LDR      r1,|L13.164|
000078  7008              STRB     r0,[r1,#0]            ;989
                  |L13.122|
00007a  f8940030          LDRB     r0,[r4,#0x30]         ;991
00007e  f0400008          ORR      r0,r0,#8              ;991
000082  f8840030          STRB     r0,[r4,#0x30]         ;991
000086  4640              MOV      r0,r8                 ;992
000088  f7fffffe          BL       OS_CPU_SR_Restore
00008c  2e01              CMP      r6,#1                 ;993
00008e  d101              BNE      |L13.148|
000090  f7fffffe          BL       OS_Sched
                  |L13.148|
000094  2000              MOVS     r0,#0                 ;996
000096  e7d4              B        |L13.66|
;;;998    #endif
                          ENDP

                  |L13.152|
                          DCD      OSTCBCur
                  |L13.156|
                          DCD      OSTCBPrioTbl
                  |L13.160|
                          DCD      OSRdyTbl
                  |L13.164|
                          DCD      OSRdyGrp

                          AREA ||i.OS_TaskReturn||, CODE, READONLY, ALIGN=2

                  OS_TaskReturn PROC
;;;1203   
;;;1204   void  OS_TaskReturn (void)
000000  b510              PUSH     {r4,lr}
;;;1205   {
;;;1206       OSTaskReturnHook(OSTCBCur);                   /* Call hook to let user decide on what to do        */
000002  4804              LDR      r0,|L14.20|
000004  6800              LDR      r0,[r0,#0]  ; OSTCBCur
000006  f7fffffe          BL       OSTaskReturnHook
;;;1207   
;;;1208   #if OS_TASK_DEL_EN > 0u
;;;1209       (void)OSTaskDel(OS_PRIO_SELF);                /* Delete task if it accidentally returns!           */
00000a  20ff              MOVS     r0,#0xff
00000c  f7fffffe          BL       OSTaskDel
;;;1210   #else
;;;1211       for (;;) {
;;;1212           OSTimeDly(OS_TICKS_PER_SEC);
;;;1213       }
;;;1214   #endif
;;;1215   }
000010  bd10              POP      {r4,pc}
;;;1216   
                          ENDP

000012  0000              DCW      0x0000
                  |L14.20|
                          DCD      OSTCBCur

                          AREA ||i.OS_TaskStkClr||, CODE, READONLY, ALIGN=1

                  OS_TaskStkClr PROC
;;;1240   #if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
;;;1241   void  OS_TaskStkClr (OS_STK  *pbos,
000000  f0020301          AND      r3,r2,#1
;;;1242                        INT32U   size,
;;;1243                        INT16U   opt)
;;;1244   {
;;;1245       if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000u) {      /* See if stack checking has been enabled       */
000004  b143              CBZ      r3,|L15.24|
;;;1246           if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000u) {  /* See if stack needs to be cleared             */
000006  f0020302          AND      r3,r2,#2
00000a  b12b              CBZ      r3,|L15.24|
;;;1247   #if OS_STK_GROWTH == 1u
;;;1248               while (size > 0u) {                        /* Stack grows from HIGH to LOW memory          */
00000c  e002              B        |L15.20|
                  |L15.14|
;;;1249                   size--;
00000e  1e49              SUBS     r1,r1,#1
;;;1250                   *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
000010  2300              MOVS     r3,#0
000012  c008              STM      r0!,{r3}
                  |L15.20|
000014  2900              CMP      r1,#0                 ;1248
000016  d1fa              BNE      |L15.14|
                  |L15.24|
;;;1251               }
;;;1252   #else
;;;1253               while (size > 0u) {                        /* Stack grows from LOW to HIGH memory          */
;;;1254                   size--;
;;;1255                   *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
;;;1256               }
;;;1257   #endif
;;;1258           }
;;;1259       }
;;;1260   }
000018  4770              BX       lr
;;;1261   
                          ENDP

