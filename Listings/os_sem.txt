; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\os_sem.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\os_sem.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\user -I.\driver -I.\HARDWARE\TIMER -I.\AD_Sample -I.\SYSTEM\delay -I.\Cmd -I.\SYSTEM\sys -I.\UCOSII\CONFIG -I.\UCOSII\CORE -I.\UCOSII\PORT -I.\Protocol -I.\RTE\Device\STM32F103ZE -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\StdPeriph_Driver\inc -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F10X_HD --omf_browse=.\objects\os_sem.crf UCOSII\CORE\os_sem.c]
                          THUMB

                          AREA ||i.OSSemAccept||, CODE, READONLY, ALIGN=1

                  OSSemAccept PROC
;;;48     #if OS_SEM_ACCEPT_EN > 0u
;;;49     INT16U  OSSemAccept (OS_EVENT *pevent)
000000  b570              PUSH     {r4-r6,lr}
;;;50     {
000002  4604              MOV      r4,r0
;;;51         INT16U     cnt;
;;;52     #if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
;;;53         OS_CPU_SR  cpu_sr = 0u;
000004  2600              MOVS     r6,#0
;;;54     #endif
;;;55     
;;;56     
;;;57     
;;;58     #if OS_ARG_CHK_EN > 0u
;;;59         if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
;;;60             return (0u);
;;;61         }
;;;62     #endif
;;;63         if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
000006  7820              LDRB     r0,[r4,#0]
000008  2803              CMP      r0,#3
00000a  d001              BEQ      |L1.16|
;;;64             return (0u);
00000c  2000              MOVS     r0,#0
                  |L1.14|
;;;65         }
;;;66         OS_ENTER_CRITICAL();
;;;67         cnt = pevent->OSEventCnt;
;;;68         if (cnt > 0u) {                                   /* See if resource is available                  */
;;;69             pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
;;;70         }
;;;71         OS_EXIT_CRITICAL();
;;;72         return (cnt);                                     /* Return semaphore count                        */
;;;73     }
00000e  bd70              POP      {r4-r6,pc}
                  |L1.16|
000010  f7fffffe          BL       OS_CPU_SR_Save
000014  4606              MOV      r6,r0                 ;66
000016  8925              LDRH     r5,[r4,#8]            ;67
000018  b115              CBZ      r5,|L1.32|
00001a  8920              LDRH     r0,[r4,#8]            ;69
00001c  1e40              SUBS     r0,r0,#1              ;69
00001e  8120              STRH     r0,[r4,#8]            ;69
                  |L1.32|
000020  4630              MOV      r0,r6                 ;71
000022  f7fffffe          BL       OS_CPU_SR_Restore
000026  4628              MOV      r0,r5                 ;72
000028  e7f1              B        |L1.14|
;;;74     #endif
                          ENDP


                          AREA ||i.OSSemCreate||, CODE, READONLY, ALIGN=2

                  OSSemCreate PROC
;;;93     
;;;94     OS_EVENT  *OSSemCreate (INT16U cnt)
000000  b570              PUSH     {r4-r6,lr}
;;;95     {
000002  4605              MOV      r5,r0
;;;96         OS_EVENT  *pevent;
;;;97     #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
;;;98         OS_CPU_SR  cpu_sr = 0u;
000004  2600              MOVS     r6,#0
;;;99     #endif
;;;100    
;;;101    
;;;102    
;;;103    #ifdef OS_SAFETY_CRITICAL_IEC61508
;;;104        if (OSSafetyCriticalStartFlag == OS_TRUE) {
;;;105            OS_SAFETY_CRITICAL_EXCEPTION();
;;;106        }
;;;107    #endif
;;;108    
;;;109        if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
000006  480f              LDR      r0,|L2.68|
000008  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
00000a  b108              CBZ      r0,|L2.16|
;;;110            return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
00000c  2000              MOVS     r0,#0
                  |L2.14|
;;;111        }
;;;112        OS_ENTER_CRITICAL();
;;;113        pevent = OSEventFreeList;                              /* Get next free event control block        */
;;;114        if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
;;;115            OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
;;;116        }
;;;117        OS_EXIT_CRITICAL();
;;;118        if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
;;;119            pevent->OSEventType    = OS_EVENT_TYPE_SEM;
;;;120            pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
;;;121            pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
;;;122    #if OS_EVENT_NAME_EN > 0u
;;;123            pevent->OSEventName    = (INT8U *)(void *)"?";
;;;124    #endif
;;;125            OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
;;;126        }
;;;127        return (pevent);
;;;128    }
00000e  bd70              POP      {r4-r6,pc}
                  |L2.16|
000010  f7fffffe          BL       OS_CPU_SR_Save
000014  4606              MOV      r6,r0                 ;112
000016  480c              LDR      r0,|L2.72|
000018  6804              LDR      r4,[r0,#0]            ;113  ; OSEventFreeList
00001a  6800              LDR      r0,[r0,#0]            ;114  ; OSEventFreeList
00001c  b120              CBZ      r0,|L2.40|
00001e  480a              LDR      r0,|L2.72|
000020  6800              LDR      r0,[r0,#0]            ;115  ; OSEventFreeList
000022  6840              LDR      r0,[r0,#4]            ;115
000024  4908              LDR      r1,|L2.72|
000026  6008              STR      r0,[r1,#0]            ;115  ; OSEventFreeList
                  |L2.40|
000028  4630              MOV      r0,r6                 ;117
00002a  f7fffffe          BL       OS_CPU_SR_Restore
00002e  b13c              CBZ      r4,|L2.64|
000030  2003              MOVS     r0,#3                 ;119
000032  7020              STRB     r0,[r4,#0]            ;119
000034  8125              STRH     r5,[r4,#8]            ;120
000036  2000              MOVS     r0,#0                 ;121
000038  6060              STR      r0,[r4,#4]            ;121
00003a  4620              MOV      r0,r4                 ;125
00003c  f7fffffe          BL       OS_EventWaitListInit
                  |L2.64|
000040  4620              MOV      r0,r4                 ;127
000042  e7e4              B        |L2.14|
;;;129    
                          ENDP

                  |L2.68|
                          DCD      OSIntNesting
                  |L2.72|
                          DCD      OSEventFreeList

                          AREA ||i.OSSemDel||, CODE, READONLY, ALIGN=2

                  OSSemDel PROC
;;;168    #if OS_SEM_DEL_EN > 0u
;;;169    OS_EVENT  *OSSemDel (OS_EVENT  *pevent,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;170                         INT8U      opt,
;;;171                         INT8U     *perr)
;;;172    {
000004  4604              MOV      r4,r0
000006  4688              MOV      r8,r1
000008  4615              MOV      r5,r2
;;;173        BOOLEAN    tasks_waiting;
;;;174        OS_EVENT  *pevent_return;
;;;175    #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
;;;176        OS_CPU_SR  cpu_sr = 0u;
00000a  f04f0900          MOV      r9,#0
;;;177    #endif
;;;178    
;;;179    
;;;180    
;;;181    #ifdef OS_SAFETY_CRITICAL
;;;182        if (perr == (INT8U *)0) {
;;;183            OS_SAFETY_CRITICAL_EXCEPTION();
;;;184        }
;;;185    #endif
;;;186    
;;;187    #if OS_ARG_CHK_EN > 0u
;;;188        if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
;;;189            *perr = OS_ERR_PEVENT_NULL;
;;;190            return (pevent);
;;;191        }
;;;192    #endif
;;;193        if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
00000e  7820              LDRB     r0,[r4,#0]
000010  2803              CMP      r0,#3
000012  d004              BEQ      |L3.30|
;;;194            *perr = OS_ERR_EVENT_TYPE;
000014  2001              MOVS     r0,#1
000016  7028              STRB     r0,[r5,#0]
;;;195            return (pevent);
000018  4620              MOV      r0,r4
                  |L3.26|
;;;196        }
;;;197        if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
;;;198            *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
;;;199            return (pevent);
;;;200        }
;;;201        OS_ENTER_CRITICAL();
;;;202        if (pevent->OSEventGrp != 0u) {                        /* See if any tasks waiting on semaphore    */
;;;203            tasks_waiting = OS_TRUE;                           /* Yes                                      */
;;;204        } else {
;;;205            tasks_waiting = OS_FALSE;                          /* No                                       */
;;;206        }
;;;207        switch (opt) {
;;;208            case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
;;;209                 if (tasks_waiting == OS_FALSE) {
;;;210    #if OS_EVENT_NAME_EN > 0u
;;;211                     pevent->OSEventName    = (INT8U *)(void *)"?";
;;;212    #endif
;;;213                     pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
;;;214                     pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
;;;215                     pevent->OSEventCnt     = 0u;
;;;216                     OSEventFreeList        = pevent;          /* Get next free event control block        */
;;;217                     OS_EXIT_CRITICAL();
;;;218                     *perr                  = OS_ERR_NONE;
;;;219                     pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
;;;220                 } else {
;;;221                     OS_EXIT_CRITICAL();
;;;222                     *perr                  = OS_ERR_TASK_WAITING;
;;;223                     pevent_return          = pevent;
;;;224                 }
;;;225                 break;
;;;226    
;;;227            case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
;;;228                 while (pevent->OSEventGrp != 0u) {            /* Ready ALL tasks waiting for semaphore    */
;;;229                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
;;;230                 }
;;;231    #if OS_EVENT_NAME_EN > 0u
;;;232                 pevent->OSEventName    = (INT8U *)(void *)"?";
;;;233    #endif
;;;234                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
;;;235                 pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
;;;236                 pevent->OSEventCnt     = 0u;
;;;237                 OSEventFreeList        = pevent;              /* Get next free event control block        */
;;;238                 OS_EXIT_CRITICAL();
;;;239                 if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
;;;240                     OS_Sched();                               /* Find highest priority task ready to run  */
;;;241                 }
;;;242                 *perr                  = OS_ERR_NONE;
;;;243                 pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
;;;244                 break;
;;;245    
;;;246            default:
;;;247                 OS_EXIT_CRITICAL();
;;;248                 *perr                  = OS_ERR_INVALID_OPT;
;;;249                 pevent_return          = pevent;
;;;250                 break;
;;;251        }
;;;252        return (pevent_return);
;;;253    }
00001a  e8bd87f0          POP      {r4-r10,pc}
                  |L3.30|
00001e  482a              LDR      r0,|L3.200|
000020  7800              LDRB     r0,[r0,#0]            ;197  ; OSIntNesting
000022  b118              CBZ      r0,|L3.44|
000024  200f              MOVS     r0,#0xf               ;198
000026  7028              STRB     r0,[r5,#0]            ;198
000028  4620              MOV      r0,r4                 ;199
00002a  e7f6              B        |L3.26|
                  |L3.44|
00002c  f7fffffe          BL       OS_CPU_SR_Save
000030  4681              MOV      r9,r0                 ;201
000032  7aa0              LDRB     r0,[r4,#0xa]          ;202
000034  b108              CBZ      r0,|L3.58|
000036  2701              MOVS     r7,#1                 ;203
000038  e000              B        |L3.60|
                  |L3.58|
00003a  2700              MOVS     r7,#0                 ;205
                  |L3.60|
00003c  f1b80f00          CMP      r8,#0                 ;207
000040  d003              BEQ      |L3.74|
000042  f1b80f01          CMP      r8,#1                 ;207
000046  d135              BNE      |L3.180|
000048  e017              B        |L3.122|
                  |L3.74|
00004a  b97f              CBNZ     r7,|L3.108|
00004c  2000              MOVS     r0,#0                 ;213
00004e  7020              STRB     r0,[r4,#0]            ;213
000050  481e              LDR      r0,|L3.204|
000052  6800              LDR      r0,[r0,#0]            ;214  ; OSEventFreeList
000054  6060              STR      r0,[r4,#4]            ;214
000056  2000              MOVS     r0,#0                 ;215
000058  8120              STRH     r0,[r4,#8]            ;215
00005a  481c              LDR      r0,|L3.204|
00005c  6004              STR      r4,[r0,#0]            ;216  ; OSEventFreeList
00005e  4648              MOV      r0,r9                 ;217
000060  f7fffffe          BL       OS_CPU_SR_Restore
000064  2000              MOVS     r0,#0                 ;218
000066  7028              STRB     r0,[r5,#0]            ;218
000068  2600              MOVS     r6,#0                 ;219
00006a  e005              B        |L3.120|
                  |L3.108|
00006c  4648              MOV      r0,r9                 ;221
00006e  f7fffffe          BL       OS_CPU_SR_Restore
000072  2049              MOVS     r0,#0x49              ;222
000074  7028              STRB     r0,[r5,#0]            ;222
000076  4626              MOV      r6,r4                 ;223
                  |L3.120|
000078  e023              B        |L3.194|
                  |L3.122|
00007a  e005              B        |L3.136|
                  |L3.124|
00007c  2300              MOVS     r3,#0                 ;229
00007e  2201              MOVS     r2,#1                 ;229
000080  4619              MOV      r1,r3                 ;229
000082  4620              MOV      r0,r4                 ;229
000084  f7fffffe          BL       OS_EventTaskRdy
                  |L3.136|
000088  7aa0              LDRB     r0,[r4,#0xa]          ;228
00008a  2800              CMP      r0,#0                 ;228
00008c  d1f6              BNE      |L3.124|
00008e  7020              STRB     r0,[r4,#0]            ;234
000090  480e              LDR      r0,|L3.204|
000092  6800              LDR      r0,[r0,#0]            ;235  ; OSEventFreeList
000094  6060              STR      r0,[r4,#4]            ;235
000096  2000              MOVS     r0,#0                 ;236
000098  8120              STRH     r0,[r4,#8]            ;236
00009a  480c              LDR      r0,|L3.204|
00009c  6004              STR      r4,[r0,#0]            ;237  ; OSEventFreeList
00009e  4648              MOV      r0,r9                 ;238
0000a0  f7fffffe          BL       OS_CPU_SR_Restore
0000a4  2f01              CMP      r7,#1                 ;239
0000a6  d101              BNE      |L3.172|
0000a8  f7fffffe          BL       OS_Sched
                  |L3.172|
0000ac  2000              MOVS     r0,#0                 ;242
0000ae  7028              STRB     r0,[r5,#0]            ;242
0000b0  2600              MOVS     r6,#0                 ;243
0000b2  e006              B        |L3.194|
                  |L3.180|
0000b4  4648              MOV      r0,r9                 ;247
0000b6  f7fffffe          BL       OS_CPU_SR_Restore
0000ba  2007              MOVS     r0,#7                 ;248
0000bc  7028              STRB     r0,[r5,#0]            ;248
0000be  4626              MOV      r6,r4                 ;249
0000c0  bf00              NOP                            ;250
                  |L3.194|
0000c2  bf00              NOP                            ;225
0000c4  4630              MOV      r0,r6                 ;252
0000c6  e7a8              B        |L3.26|
;;;254    #endif
                          ENDP

                  |L3.200|
                          DCD      OSIntNesting
                  |L3.204|
                          DCD      OSEventFreeList

                          AREA ||i.OSSemPend||, CODE, READONLY, ALIGN=2

                  OSSemPend PROC
;;;288    /*$PAGE*/
;;;289    void  OSSemPend (OS_EVENT  *pevent,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;290                     INT32U     timeout,
;;;291                     INT8U     *perr)
;;;292    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;293    #if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
;;;294        OS_CPU_SR  cpu_sr = 0u;
00000a  2700              MOVS     r7,#0
;;;295    #endif
;;;296    
;;;297    
;;;298    
;;;299    #ifdef OS_SAFETY_CRITICAL
;;;300        if (perr == (INT8U *)0) {
;;;301            OS_SAFETY_CRITICAL_EXCEPTION();
;;;302        }
;;;303    #endif
;;;304    
;;;305    #if OS_ARG_CHK_EN > 0u
;;;306        if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
;;;307            *perr = OS_ERR_PEVENT_NULL;
;;;308            return;
;;;309        }
;;;310    #endif
;;;311        if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
00000c  7828              LDRB     r0,[r5,#0]
00000e  2803              CMP      r0,#3
000010  d003              BEQ      |L4.26|
;;;312            *perr = OS_ERR_EVENT_TYPE;
000012  2001              MOVS     r0,#1
000014  7020              STRB     r0,[r4,#0]
                  |L4.22|
;;;313            return;
;;;314        }
;;;315        if (OSIntNesting > 0u) {                          /* See if called from ISR ...                    */
;;;316            *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
;;;317            return;
;;;318        }
;;;319        if (OSLockNesting > 0u) {                         /* See if called with scheduler locked ...       */
;;;320            *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
;;;321            return;
;;;322        }
;;;323        OS_ENTER_CRITICAL();
;;;324        if (pevent->OSEventCnt > 0u) {                    /* If sem. is positive, resource available ...   */
;;;325            pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
;;;326            OS_EXIT_CRITICAL();
;;;327            *perr = OS_ERR_NONE;
;;;328            return;
;;;329        }
;;;330                                                          /* Otherwise, must wait until event occurs       */
;;;331        OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
;;;332        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
;;;333        OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
;;;334        OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
;;;335        OS_EXIT_CRITICAL();
;;;336        OS_Sched();                                       /* Find next highest priority task ready         */
;;;337        OS_ENTER_CRITICAL();
;;;338        switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
;;;339            case OS_STAT_PEND_OK:
;;;340                 *perr = OS_ERR_NONE;
;;;341                 break;
;;;342    
;;;343            case OS_STAT_PEND_ABORT:
;;;344                 *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
;;;345                 break;
;;;346    
;;;347            case OS_STAT_PEND_TO:
;;;348            default:
;;;349                 OS_EventTaskRemove(OSTCBCur, pevent);
;;;350                 *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
;;;351                 break;
;;;352        }
;;;353        OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
;;;354        OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
;;;355        OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
;;;356    #if (OS_EVENT_MULTI_EN > 0u)
;;;357        OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
;;;358    #endif
;;;359        OS_EXIT_CRITICAL();
;;;360    }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L4.26|
00001a  4831              LDR      r0,|L4.224|
00001c  7800              LDRB     r0,[r0,#0]            ;315  ; OSIntNesting
00001e  b110              CBZ      r0,|L4.38|
000020  2002              MOVS     r0,#2                 ;316
000022  7020              STRB     r0,[r4,#0]            ;316
000024  e7f7              B        |L4.22|
                  |L4.38|
000026  482f              LDR      r0,|L4.228|
000028  7800              LDRB     r0,[r0,#0]            ;319  ; OSLockNesting
00002a  b110              CBZ      r0,|L4.50|
00002c  200d              MOVS     r0,#0xd               ;320
00002e  7020              STRB     r0,[r4,#0]            ;320
000030  e7f1              B        |L4.22|
                  |L4.50|
000032  f7fffffe          BL       OS_CPU_SR_Save
000036  4607              MOV      r7,r0                 ;323
000038  8928              LDRH     r0,[r5,#8]            ;324
00003a  b140              CBZ      r0,|L4.78|
00003c  8928              LDRH     r0,[r5,#8]            ;325
00003e  1e40              SUBS     r0,r0,#1              ;325
000040  8128              STRH     r0,[r5,#8]            ;325
000042  4638              MOV      r0,r7                 ;326
000044  f7fffffe          BL       OS_CPU_SR_Restore
000048  2000              MOVS     r0,#0                 ;327
00004a  7020              STRB     r0,[r4,#0]            ;327
00004c  e7e3              B        |L4.22|
                  |L4.78|
00004e  4826              LDR      r0,|L4.232|
000050  6800              LDR      r0,[r0,#0]            ;331  ; OSTCBCur
000052  f8900030          LDRB     r0,[r0,#0x30]         ;331
000056  f0400001          ORR      r0,r0,#1              ;331
00005a  4923              LDR      r1,|L4.232|
00005c  6809              LDR      r1,[r1,#0]            ;331  ; OSTCBCur
00005e  f8810030          STRB     r0,[r1,#0x30]         ;331
000062  2000              MOVS     r0,#0                 ;332
000064  4920              LDR      r1,|L4.232|
000066  6809              LDR      r1,[r1,#0]            ;332  ; OSTCBCur
000068  f8810031          STRB     r0,[r1,#0x31]         ;332
00006c  481e              LDR      r0,|L4.232|
00006e  6800              LDR      r0,[r0,#0]            ;333  ; OSTCBCur
000070  62c6              STR      r6,[r0,#0x2c]         ;333
000072  4628              MOV      r0,r5                 ;334
000074  f7fffffe          BL       OS_EventTaskWait
000078  4638              MOV      r0,r7                 ;335
00007a  f7fffffe          BL       OS_CPU_SR_Restore
00007e  f7fffffe          BL       OS_Sched
000082  f7fffffe          BL       OS_CPU_SR_Save
000086  4607              MOV      r7,r0                 ;337
000088  4817              LDR      r0,|L4.232|
00008a  6800              LDR      r0,[r0,#0]            ;338  ; OSTCBCur
00008c  f8900031          LDRB     r0,[r0,#0x31]         ;338
000090  b120              CBZ      r0,|L4.156|
000092  2801              CMP      r0,#1                 ;338
000094  d009              BEQ      |L4.170|
000096  2802              CMP      r0,#2                 ;338
000098  d106              BNE      |L4.168|
00009a  e002              B        |L4.162|
                  |L4.156|
00009c  2000              MOVS     r0,#0                 ;340
00009e  7020              STRB     r0,[r4,#0]            ;340
0000a0  e00b              B        |L4.186|
                  |L4.162|
0000a2  200e              MOVS     r0,#0xe               ;344
0000a4  7020              STRB     r0,[r4,#0]            ;344
0000a6  e008              B        |L4.186|
                  |L4.168|
0000a8  bf00              NOP                            ;347
                  |L4.170|
0000aa  4629              MOV      r1,r5                 ;349
0000ac  480e              LDR      r0,|L4.232|
0000ae  6800              LDR      r0,[r0,#0]            ;349  ; OSTCBCur
0000b0  f7fffffe          BL       OS_EventTaskRemove
0000b4  200a              MOVS     r0,#0xa               ;350
0000b6  7020              STRB     r0,[r4,#0]            ;350
0000b8  bf00              NOP                            ;351
                  |L4.186|
0000ba  bf00              NOP                            ;341
0000bc  2000              MOVS     r0,#0                 ;353
0000be  490a              LDR      r1,|L4.232|
0000c0  6809              LDR      r1,[r1,#0]            ;353  ; OSTCBCur
0000c2  f8810030          STRB     r0,[r1,#0x30]         ;353
0000c6  4908              LDR      r1,|L4.232|
0000c8  6809              LDR      r1,[r1,#0]            ;354  ; OSTCBCur
0000ca  f8810031          STRB     r0,[r1,#0x31]         ;354
0000ce  4906              LDR      r1,|L4.232|
0000d0  6809              LDR      r1,[r1,#0]            ;355  ; OSTCBCur
0000d2  61c8              STR      r0,[r1,#0x1c]         ;355
0000d4  4638              MOV      r0,r7                 ;359
0000d6  f7fffffe          BL       OS_CPU_SR_Restore
0000da  bf00              NOP      
0000dc  e79b              B        |L4.22|
;;;361    
                          ENDP

0000de  0000              DCW      0x0000
                  |L4.224|
                          DCD      OSIntNesting
                  |L4.228|
                          DCD      OSLockNesting
                  |L4.232|
                          DCD      OSTCBCur

                          AREA ||i.OSSemPendAbort||, CODE, READONLY, ALIGN=1

                  OSSemPendAbort PROC
;;;396    #if OS_SEM_PEND_ABORT_EN > 0u
;;;397    INT8U  OSSemPendAbort (OS_EVENT  *pevent,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;398                           INT8U      opt,
;;;399                           INT8U     *perr)
;;;400    {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
;;;401        INT8U      nbr_tasks;
;;;402    #if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
;;;403        OS_CPU_SR  cpu_sr = 0u;
00000a  f04f0800          MOV      r8,#0
;;;404    #endif
;;;405    
;;;406    
;;;407    
;;;408    #ifdef OS_SAFETY_CRITICAL
;;;409        if (perr == (INT8U *)0) {
;;;410            OS_SAFETY_CRITICAL_EXCEPTION();
;;;411        }
;;;412    #endif
;;;413    
;;;414    #if OS_ARG_CHK_EN > 0u
;;;415        if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
;;;416            *perr = OS_ERR_PEVENT_NULL;
;;;417            return (0u);
;;;418        }
;;;419    #endif
;;;420        if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
00000e  7820              LDRB     r0,[r4,#0]
000010  2803              CMP      r0,#3
000012  d004              BEQ      |L5.30|
;;;421            *perr = OS_ERR_EVENT_TYPE;
000014  2001              MOVS     r0,#1
000016  7028              STRB     r0,[r5,#0]
;;;422            return (0u);
000018  2000              MOVS     r0,#0
                  |L5.26|
;;;423        }
;;;424        OS_ENTER_CRITICAL();
;;;425        if (pevent->OSEventGrp != 0u) {                   /* See if any task waiting on semaphore?         */
;;;426            nbr_tasks = 0u;
;;;427            switch (opt) {
;;;428                case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
;;;429                     while (pevent->OSEventGrp != 0u) {   /* Yes, ready ALL tasks waiting on semaphore     */
;;;430                         (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
;;;431                         nbr_tasks++;
;;;432                     }
;;;433                     break;
;;;434    
;;;435                case OS_PEND_OPT_NONE:
;;;436                default:                                  /* No,  ready HPT       waiting on semaphore     */
;;;437                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
;;;438                     nbr_tasks++;
;;;439                     break;
;;;440            }
;;;441            OS_EXIT_CRITICAL();
;;;442            OS_Sched();                                   /* Find HPT ready to run                         */
;;;443            *perr = OS_ERR_PEND_ABORT;
;;;444            return (nbr_tasks);
;;;445        }
;;;446        OS_EXIT_CRITICAL();
;;;447        *perr = OS_ERR_NONE;
;;;448        return (0u);                                      /* No tasks waiting on semaphore                 */
;;;449    }
00001a  e8bd81f0          POP      {r4-r8,pc}
                  |L5.30|
00001e  f7fffffe          BL       OS_CPU_SR_Save
000022  4680              MOV      r8,r0                 ;424
000024  7aa0              LDRB     r0,[r4,#0xa]          ;425
000026  b320              CBZ      r0,|L5.114|
000028  2600              MOVS     r6,#0                 ;426
00002a  b17f              CBZ      r7,|L5.76|
00002c  2f01              CMP      r7,#1                 ;427
00002e  d10c              BNE      |L5.74|
000030  e007              B        |L5.66|
                  |L5.50|
000032  2302              MOVS     r3,#2                 ;430
000034  2201              MOVS     r2,#1                 ;430
000036  2100              MOVS     r1,#0                 ;430
000038  4620              MOV      r0,r4                 ;430
00003a  f7fffffe          BL       OS_EventTaskRdy
00003e  1c70              ADDS     r0,r6,#1              ;431
000040  b2c6              UXTB     r6,r0                 ;431
                  |L5.66|
000042  7aa0              LDRB     r0,[r4,#0xa]          ;429
000044  2800              CMP      r0,#0                 ;429
000046  d1f4              BNE      |L5.50|
000048  e009              B        |L5.94|
                  |L5.74|
00004a  bf00              NOP                            ;435
                  |L5.76|
00004c  2302              MOVS     r3,#2                 ;437
00004e  2201              MOVS     r2,#1                 ;437
000050  2100              MOVS     r1,#0                 ;437
000052  4620              MOV      r0,r4                 ;437
000054  f7fffffe          BL       OS_EventTaskRdy
000058  1c70              ADDS     r0,r6,#1              ;438
00005a  b2c6              UXTB     r6,r0                 ;438
00005c  bf00              NOP                            ;439
                  |L5.94|
00005e  bf00              NOP                            ;433
000060  4640              MOV      r0,r8                 ;441
000062  f7fffffe          BL       OS_CPU_SR_Restore
000066  f7fffffe          BL       OS_Sched
00006a  200e              MOVS     r0,#0xe               ;443
00006c  7028              STRB     r0,[r5,#0]            ;443
00006e  4630              MOV      r0,r6                 ;444
000070  e7d3              B        |L5.26|
                  |L5.114|
000072  4640              MOV      r0,r8                 ;446
000074  f7fffffe          BL       OS_CPU_SR_Restore
000078  2000              MOVS     r0,#0                 ;447
00007a  7028              STRB     r0,[r5,#0]            ;447
00007c  bf00              NOP                            ;448
00007e  e7cc              B        |L5.26|
;;;450    #endif
                          ENDP


                          AREA ||i.OSSemPost||, CODE, READONLY, ALIGN=1

                  OSSemPost PROC
;;;470    
;;;471    INT8U  OSSemPost (OS_EVENT *pevent)
000000  b570              PUSH     {r4-r6,lr}
;;;472    {
000002  4604              MOV      r4,r0
;;;473    #if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
;;;474        OS_CPU_SR  cpu_sr = 0u;
000004  2500              MOVS     r5,#0
;;;475    #endif
;;;476    
;;;477    
;;;478    
;;;479    #if OS_ARG_CHK_EN > 0u
;;;480        if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
;;;481            return (OS_ERR_PEVENT_NULL);
;;;482        }
;;;483    #endif
;;;484        if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
000006  7820              LDRB     r0,[r4,#0]
000008  2803              CMP      r0,#3
00000a  d001              BEQ      |L6.16|
;;;485            return (OS_ERR_EVENT_TYPE);
00000c  2001              MOVS     r0,#1
                  |L6.14|
;;;486        }
;;;487        OS_ENTER_CRITICAL();
;;;488        if (pevent->OSEventGrp != 0u) {                   /* See if any task waiting for semaphore         */
;;;489                                                          /* Ready HPT waiting on event                    */
;;;490            (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
;;;491            OS_EXIT_CRITICAL();
;;;492            OS_Sched();                                   /* Find HPT ready to run                         */
;;;493            return (OS_ERR_NONE);
;;;494        }
;;;495        if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
;;;496            pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
;;;497            OS_EXIT_CRITICAL();
;;;498            return (OS_ERR_NONE);
;;;499        }
;;;500        OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
;;;501        return (OS_ERR_SEM_OVF);
;;;502    }
00000e  bd70              POP      {r4-r6,pc}
                  |L6.16|
000010  f7fffffe          BL       OS_CPU_SR_Save
000014  4605              MOV      r5,r0                 ;487
000016  7aa0              LDRB     r0,[r4,#0xa]          ;488
000018  b160              CBZ      r0,|L6.52|
00001a  2300              MOVS     r3,#0                 ;490
00001c  2201              MOVS     r2,#1                 ;490
00001e  4619              MOV      r1,r3                 ;490
000020  4620              MOV      r0,r4                 ;490
000022  f7fffffe          BL       OS_EventTaskRdy
000026  4628              MOV      r0,r5                 ;491
000028  f7fffffe          BL       OS_CPU_SR_Restore
00002c  f7fffffe          BL       OS_Sched
000030  2000              MOVS     r0,#0                 ;493
000032  e7ec              B        |L6.14|
                  |L6.52|
000034  8920              LDRH     r0,[r4,#8]            ;495
000036  f64f71ff          MOV      r1,#0xffff            ;495
00003a  4288              CMP      r0,r1                 ;495
00003c  d207              BCS      |L6.78|
00003e  8920              LDRH     r0,[r4,#8]            ;496
000040  1c40              ADDS     r0,r0,#1              ;496
000042  8120              STRH     r0,[r4,#8]            ;496
000044  4628              MOV      r0,r5                 ;497
000046  f7fffffe          BL       OS_CPU_SR_Restore
00004a  2000              MOVS     r0,#0                 ;498
00004c  e7df              B        |L6.14|
                  |L6.78|
00004e  4628              MOV      r0,r5                 ;500
000050  f7fffffe          BL       OS_CPU_SR_Restore
000054  2033              MOVS     r0,#0x33              ;501
000056  e7da              B        |L6.14|
;;;503    
                          ENDP


                          AREA ||i.OSSemQuery||, CODE, READONLY, ALIGN=1

                  OSSemQuery PROC
;;;524    #if OS_SEM_QUERY_EN > 0u
;;;525    INT8U  OSSemQuery (OS_EVENT     *pevent,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;526                       OS_SEM_DATA  *p_sem_data)
;;;527    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;528        INT8U       i;
;;;529        OS_PRIO    *psrc;
;;;530        OS_PRIO    *pdest;
;;;531    #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
;;;532        OS_CPU_SR   cpu_sr = 0u;
000008  f04f0900          MOV      r9,#0
;;;533    #endif
;;;534    
;;;535    
;;;536    
;;;537    #if OS_ARG_CHK_EN > 0u
;;;538        if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
;;;539            return (OS_ERR_PEVENT_NULL);
;;;540        }
;;;541        if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
;;;542            return (OS_ERR_PDATA_NULL);
;;;543        }
;;;544    #endif
;;;545        if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
00000c  7820              LDRB     r0,[r4,#0]
00000e  2803              CMP      r0,#3
000010  d002              BEQ      |L7.24|
;;;546            return (OS_ERR_EVENT_TYPE);
000012  2001              MOVS     r0,#1
                  |L7.20|
;;;547        }
;;;548        OS_ENTER_CRITICAL();
;;;549        p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
;;;550        psrc                   = &pevent->OSEventTbl[0];
;;;551        pdest                  = &p_sem_data->OSEventTbl[0];
;;;552        for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
;;;553            *pdest++ = *psrc++;
;;;554        }
;;;555        p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
;;;556        OS_EXIT_CRITICAL();
;;;557        return (OS_ERR_NONE);
;;;558    }
000014  e8bd87f0          POP      {r4-r10,pc}
                  |L7.24|
000018  f7fffffe          BL       OS_CPU_SR_Save
00001c  4681              MOV      r9,r0                 ;548
00001e  7aa0              LDRB     r0,[r4,#0xa]          ;549
000020  72a8              STRB     r0,[r5,#0xa]          ;549
000022  f104070b          ADD      r7,r4,#0xb            ;550
000026  f1050802          ADD      r8,r5,#2              ;551
00002a  2600              MOVS     r6,#0                 ;552
00002c  e005              B        |L7.58|
                  |L7.46|
00002e  f8170b01          LDRB     r0,[r7],#1            ;553
000032  f8080b01          STRB     r0,[r8],#1            ;553
000036  1c70              ADDS     r0,r6,#1              ;552
000038  b2c6              UXTB     r6,r0                 ;552
                  |L7.58|
00003a  2e08              CMP      r6,#8                 ;552
00003c  d3f7              BCC      |L7.46|
00003e  8920              LDRH     r0,[r4,#8]            ;555
000040  8028              STRH     r0,[r5,#0]            ;555
000042  4648              MOV      r0,r9                 ;556
000044  f7fffffe          BL       OS_CPU_SR_Restore
000048  2000              MOVS     r0,#0                 ;557
00004a  e7e3              B        |L7.20|
;;;559    #endif                                                     /* OS_SEM_QUERY_EN                          */
                          ENDP


                          AREA ||i.OSSemSet||, CODE, READONLY, ALIGN=1

                  OSSemSet PROC
;;;586    #if OS_SEM_SET_EN > 0u
;;;587    void  OSSemSet (OS_EVENT  *pevent,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;588                    INT16U     cnt,
;;;589                    INT8U     *perr)
;;;590    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
;;;591    #if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
;;;592        OS_CPU_SR  cpu_sr = 0u;
00000a  2700              MOVS     r7,#0
;;;593    #endif
;;;594    
;;;595    
;;;596    
;;;597    #ifdef OS_SAFETY_CRITICAL
;;;598        if (perr == (INT8U *)0) {
;;;599            OS_SAFETY_CRITICAL_EXCEPTION();
;;;600        }
;;;601    #endif
;;;602    
;;;603    #if OS_ARG_CHK_EN > 0u
;;;604        if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
;;;605            *perr = OS_ERR_PEVENT_NULL;
;;;606            return;
;;;607        }
;;;608    #endif
;;;609        if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
00000c  7820              LDRB     r0,[r4,#0]
00000e  2803              CMP      r0,#3
000010  d003              BEQ      |L8.26|
;;;610            *perr = OS_ERR_EVENT_TYPE;
000012  2001              MOVS     r0,#1
000014  7028              STRB     r0,[r5,#0]
                  |L8.22|
;;;611            return;
;;;612        }
;;;613        OS_ENTER_CRITICAL();
;;;614        *perr = OS_ERR_NONE;
;;;615        if (pevent->OSEventCnt > 0u) {                    /* See if semaphore already has a count          */
;;;616            pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
;;;617        } else {                                          /* No                                            */
;;;618            if (pevent->OSEventGrp == 0u) {               /*      See if task(s) waiting?                  */
;;;619                pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
;;;620            } else {
;;;621                *perr              = OS_ERR_TASK_WAITING;
;;;622            }
;;;623        }
;;;624        OS_EXIT_CRITICAL();
;;;625    }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L8.26|
00001a  f7fffffe          BL       OS_CPU_SR_Save
00001e  4607              MOV      r7,r0                 ;613
000020  2000              MOVS     r0,#0                 ;614
000022  7028              STRB     r0,[r5,#0]            ;614
000024  8920              LDRH     r0,[r4,#8]            ;615
000026  b108              CBZ      r0,|L8.44|
000028  8126              STRH     r6,[r4,#8]            ;616
00002a  e005              B        |L8.56|
                  |L8.44|
00002c  7aa0              LDRB     r0,[r4,#0xa]          ;618
00002e  b908              CBNZ     r0,|L8.52|
000030  8126              STRH     r6,[r4,#8]            ;619
000032  e001              B        |L8.56|
                  |L8.52|
000034  2049              MOVS     r0,#0x49              ;621
000036  7028              STRB     r0,[r5,#0]            ;621
                  |L8.56|
000038  4638              MOV      r0,r7                 ;624
00003a  f7fffffe          BL       OS_CPU_SR_Restore
00003e  bf00              NOP      
000040  e7e9              B        |L8.22|
;;;626    #endif
                          ENDP

