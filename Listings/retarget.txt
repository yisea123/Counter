; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\retarget.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\retarget.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\user -I.\driver -I.\HARDWARE\TIMER -I.\AD_Sample -I.\SYSTEM\delay -I.\Cmd -I.\SYSTEM\sys -I.\UCOSII\CONFIG -I.\UCOSII\CORE -I.\UCOSII\PORT -I.\Protocol -I.\RTE\Device\STM32F103ZE -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\StdPeriph_Driver\inc -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F10X_HD --omf_browse=.\objects\retarget.crf my_printf\retarget.c]
                          THUMB

                          AREA ||i.ITM_SendChar||, CODE, READONLY, ALIGN=2

                  ITM_SendChar PROC
;;;1853    */
;;;1854   __STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
000000  490a              LDR      r1,|L1.44|
;;;1855   {
;;;1856     if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
000002  6809              LDR      r1,[r1,#0]
000004  f0010101          AND      r1,r1,#1
000008  b179              CBZ      r1,|L1.42|
;;;1857         ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
00000a  4908              LDR      r1,|L1.44|
00000c  3980              SUBS     r1,r1,#0x80
00000e  6809              LDR      r1,[r1,#0]
000010  f0010101          AND      r1,r1,#1
000014  b149              CBZ      r1,|L1.42|
;;;1858     {
;;;1859       while (ITM->PORT[0U].u32 == 0UL)
000016  e000              B        |L1.26|
                  |L1.24|
;;;1860       {
;;;1861         __NOP();
000018  bf00              NOP      
                  |L1.26|
00001a  f04f4160          MOV      r1,#0xe0000000        ;1859
00001e  6809              LDR      r1,[r1,#0]            ;1859
000020  2900              CMP      r1,#0                 ;1859
000022  d0f9              BEQ      |L1.24|
;;;1862       }
;;;1863       ITM->PORT[0U].u8 = (uint8_t)ch;
000024  f04f4260          MOV      r2,#0xe0000000
000028  7010              STRB     r0,[r2,#0]
                  |L1.42|
;;;1864     }
;;;1865     return (ch);
;;;1866   }
00002a  4770              BX       lr
;;;1867   
                          ENDP

                  |L1.44|
                          DCD      0xe0000e80

                          AREA ||i.__backspace||, CODE, READONLY, ALIGN=1

                  __backspace PROC
;;;54     
;;;55     int __backspace()
000000  2000              MOVS     r0,#0
;;;56     {
;;;57         return 0;
;;;58     }
000002  4770              BX       lr
;;;59     void _sys_exit(int return_code)
                          ENDP


                          AREA ||i._sys_exit||, CODE, READONLY, ALIGN=1

                  _sys_exit PROC
;;;58     }
;;;59     void _sys_exit(int return_code)
000000  bf00              NOP      
                  |L3.2|
;;;60     {
;;;61     label:
;;;62         goto label; /* endless loop */
000002  e7fe              B        |L3.2|
;;;63     }
;;;64     
                          ENDP


                          AREA ||i._ttywrch||, CODE, READONLY, ALIGN=2

                  _ttywrch PROC
;;;49     
;;;50     void _ttywrch(int c)
000000  b510              PUSH     {r4,lr}
;;;51     {
000002  4604              MOV      r4,r0
;;;52         fputc(c, &__stdout);
000004  4902              LDR      r1,|L4.16|
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       fputc
;;;53     }
00000c  bd10              POP      {r4,pc}
;;;54     
                          ENDP

00000e  0000              DCW      0x0000
                  |L4.16|
                          DCD      __stdout

                          AREA ||i.ferror||, CODE, READONLY, ALIGN=1

                  ferror PROC
;;;43     
;;;44     int ferror(FILE *f)
000000  4601              MOV      r1,r0
;;;45     {
;;;46         /* Your implementation of ferror */
;;;47         return EOF;
000002  f04f30ff          MOV      r0,#0xffffffff
;;;48     }
000006  4770              BX       lr
;;;49     
                          ENDP


                          AREA ||i.fgetc||, CODE, READONLY, ALIGN=2

                  fgetc PROC
;;;30     volatile int32_t ITM_RxBuffer = ITM_RXBUFFER_EMPTY;
;;;31     int fgetc(FILE *f)
000000  b570              PUSH     {r4-r6,lr}
;;;32     {
000002  4605              MOV      r5,r0
;;;33     	char ch = '\0';
000004  2400              MOVS     r4,#0
;;;34     #ifdef ITM_PRINTF
;;;35     	while (ITM_CheckChar() != 1) __NOP();
000006  e000              B        |L6.10|
                  |L6.8|
000008  bf00              NOP      
                  |L6.10|
00000a  bf00              NOP      
00000c  4810              LDR      r0,|L6.80|
00000e  6800              LDR      r0,[r0,#0]  ; ITM_RxBuffer
000010  4910              LDR      r1,|L6.84|
000012  4288              CMP      r0,r1
000014  d101              BNE      |L6.26|
000016  2000              MOVS     r0,#0
000018  e000              B        |L6.28|
                  |L6.26|
00001a  2001              MOVS     r0,#1
                  |L6.28|
00001c  2801              CMP      r0,#1
00001e  d1f3              BNE      |L6.8|
;;;36     	ch = ITM_ReceiveChar();
000020  bf00              NOP      
000022  1e80              SUBS     r0,r0,#2
000024  490a              LDR      r1,|L6.80|
000026  6809              LDR      r1,[r1,#0]  ; ITM_RxBuffer
000028  4a0a              LDR      r2,|L6.84|
00002a  4291              CMP      r1,r2
00002c  d004              BEQ      |L6.56|
00002e  4908              LDR      r1,|L6.80|
000030  6808              LDR      r0,[r1,#0]  ; ITM_RxBuffer
000032  4611              MOV      r1,r2
000034  4a06              LDR      r2,|L6.80|
000036  6011              STR      r1,[r2,#0]  ; ITM_RxBuffer
                  |L6.56|
000038  bf00              NOP      
00003a  b2c4              UXTB     r4,r0
;;;37     	ITM_SendChar(ch);
00003c  4620              MOV      r0,r4
00003e  f7fffffe          BL       ITM_SendChar
;;;38     	if (ch == '\r')
000042  2c0d              CMP      r4,#0xd
000044  d102              BNE      |L6.76|
;;;39     		ITM_SendChar ('\n');
000046  200a              MOVS     r0,#0xa
000048  f7fffffe          BL       ITM_SendChar
                  |L6.76|
;;;40     #endif
;;;41     	return (ch);
00004c  4620              MOV      r0,r4
;;;42     }
00004e  bd70              POP      {r4-r6,pc}
;;;43     
                          ENDP

                  |L6.80|
                          DCD      ITM_RxBuffer
                  |L6.84|
                          DCD      0x5aa55aa5

                          AREA ||i.fputc||, CODE, READONLY, ALIGN=1

                  fputc PROC
;;;20        
;;;21     int fputc(int ch, FILE *f)
000000  b570              PUSH     {r4-r6,lr}
;;;22     { 
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;23     #if ITM_PRINTF
;;;24     	ITM_SendChar(ch);
;;;25     #endif
;;;26     	uart1_send_data (ch);
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       uart1_send_data
;;;27     	return (ch);
00000c  4620              MOV      r0,r4
;;;28     }
00000e  bd70              POP      {r4-r6,pc}
;;;29     
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  __stdout
                          DCD      0x00000000
                  __stdin
                          DCD      0x00000000
                  ITM_RxBuffer
                          DCD      0x5aa55aa5

;*** Start embedded assembler ***

#line 1 "my_printf\\retarget.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_retarget_c_fputc____REV16|
#line 447 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.0.1\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___10_retarget_c_fputc____REV16| PROC
#line 448

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_retarget_c_fputc____REVSH|
#line 462
|__asm___10_retarget_c_fputc____REVSH| PROC
#line 463

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___10_retarget_c_fputc____RRX|
#line 649
|__asm___10_retarget_c_fputc____RRX| PROC
#line 650

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
