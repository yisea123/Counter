; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\my_cmd.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\my_cmd.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\user -I.\driver -I.\HARDWARE\TIMER -I.\AD_Sample -I.\SYSTEM\delay -I.\Cmd -I.\SYSTEM\sys -I.\UCOSII\CONFIG -I.\UCOSII\CORE -I.\UCOSII\PORT -I.\Protocol -I.\RTE\Device\STM32F103ZE -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\StdPeriph_Driver\inc -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F10X_HD --omf_browse=.\objects\my_cmd.crf Cmd\my_cmd.c]
                          THUMB

                          AREA ||i.Rollback||, CODE, READONLY, ALIGN=2

                  Rollback PROC
;;;28     
;;;29     void Rollback(void)
000000  b510              PUSH     {r4,lr}
;;;30     {
;;;31     	int i;
;;;32     	for (i = 0; i < my_env.roll_count; i++)
000002  2400              MOVS     r4,#0
000004  e009              B        |L1.26|
                  |L1.6|
;;;33     	{
;;;34     		uart1_send_data (0x1b);
000006  201b              MOVS     r0,#0x1b
000008  f7fffffe          BL       uart1_send_data
;;;35     		uart1_send_data (0x5b);
00000c  205b              MOVS     r0,#0x5b
00000e  f7fffffe          BL       uart1_send_data
;;;36     		uart1_send_data (0x41);
000012  2041              MOVS     r0,#0x41
000014  f7fffffe          BL       uart1_send_data
000018  1c64              ADDS     r4,r4,#1              ;32
                  |L1.26|
00001a  4804              LDR      r0,|L1.44|
00001c  8840              LDRH     r0,[r0,#2]            ;32  ; my_env
00001e  42a0              CMP      r0,r4                 ;32
000020  dcf1              BGT      |L1.6|
;;;37     	}
;;;38     	my_env.roll_count = 0;
000022  2000              MOVS     r0,#0
000024  4901              LDR      r1,|L1.44|
000026  8048              STRH     r0,[r1,#2]
;;;39     }
000028  bd10              POP      {r4,pc}
;;;40     void Rollforward(u16 lines)
                          ENDP

00002a  0000              DCW      0x0000
                  |L1.44|
                          DCD      my_env

                          AREA ||i.Rollforward||, CODE, READONLY, ALIGN=1

                  Rollforward PROC
;;;39     }
;;;40     void Rollforward(u16 lines)
000000  b570              PUSH     {r4-r6,lr}
;;;41     {
000002  4604              MOV      r4,r0
;;;42     	int i;
;;;43     	for (i = 0; i < lines; i++)
000004  2500              MOVS     r5,#0
000006  e009              B        |L2.28|
                  |L2.8|
;;;44     	{
;;;45     		uart1_send_data (0x1b);
000008  201b              MOVS     r0,#0x1b
00000a  f7fffffe          BL       uart1_send_data
;;;46     		uart1_send_data (0x5b);
00000e  205b              MOVS     r0,#0x5b
000010  f7fffffe          BL       uart1_send_data
;;;47     		uart1_send_data (0x42);
000014  2042              MOVS     r0,#0x42
000016  f7fffffe          BL       uart1_send_data
00001a  1c6d              ADDS     r5,r5,#1              ;43
                  |L2.28|
00001c  42a5              CMP      r5,r4                 ;43
00001e  dbf3              BLT      |L2.8|
;;;48     	}
;;;49     }
000020  bd70              POP      {r4-r6,pc}
;;;50     
                          ENDP


                          AREA ||i.clear_ctrlc||, CODE, READONLY, ALIGN=2

                  clear_ctrlc PROC
;;;97     
;;;98     void clear_ctrlc(void)
000000  2000              MOVS     r0,#0
;;;99     {
;;;100    	my_env.sys_break = 0;
000002  4901              LDR      r1,|L3.8|
000004  8008              STRH     r0,[r1,#0]
;;;101    }
000006  4770              BX       lr
;;;102    
                          ENDP

                  |L3.8|
                          DCD      my_env

                          AREA ||i.cmd_usage||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  cmd_usage PROC
;;;671    
;;;672    int cmd_usage(cmd_tbl_t *cmdtp)
000000  b510              PUSH     {r4,lr}
;;;673    {
000002  4604              MOV      r4,r0
;;;674    	printf("%s", cmdtp->usage);
000004  a009              ADR      r0,|L4.44|
000006  6921              LDR      r1,[r4,#0x10]
000008  f7fffffe          BL       __2printf
;;;675    #ifdef	CONFIG_SYS_LONGHELP
;;;676    	printf("Usage:\n");
00000c  a008              ADR      r0,|L4.48|
00000e  f7fffffe          BL       __2printf
;;;677    
;;;678    	if (!cmdtp->help) {
000012  6960              LDR      r0,[r4,#0x14]
000014  b920              CBNZ     r0,|L4.32|
;;;679    		puts ("- No additional help available.\n");
000016  a008              ADR      r0,|L4.56|
000018  f7fffffe          BL       puts
;;;680    		return 1;
00001c  2001              MOVS     r0,#1
                  |L4.30|
;;;681    	}
;;;682    
;;;683    	my_puts (cmdtp->help);
;;;684    	//my_putc ('\n');
;;;685    	//my_putc ('\n');
;;;686    #endif	/* CONFIG_SYS_LONGHELP */
;;;687    	return 0;
;;;688    }
00001e  bd10              POP      {r4,pc}
                  |L4.32|
000020  6960              LDR      r0,[r4,#0x14]         ;683
000022  f7fffffe          BL       uart1_puts
000026  2000              MOVS     r0,#0                 ;687
000028  e7f9              B        |L4.30|
;;;689    
                          ENDP

00002a  0000              DCW      0x0000
                  |L4.44|
00002c  257300            DCB      "%s",0
00002f  00                DCB      0
                  |L4.48|
000030  55736167          DCB      "Usage:\n",0
000034  653a0a00
                  |L4.56|
000038  2d204e6f          DCB      "- No additional help available.\n",0
00003c  20616464
000040  6974696f
000044  6e616c20
000048  68656c70
00004c  20617661
000050  696c6162
000054  6c652e0a
000058  00      
000059  00                DCB      0
00005a  00                DCB      0
00005b  00                DCB      0

                          AREA ||i.ctrlc||, CODE, READONLY, ALIGN=1

                  ctrlc PROC
;;;653    
;;;654    int ctrlc (void)
000000  2000              MOVS     r0,#0
;;;655    {
;;;656    //	if (!ctrlc_disabled && gd->have_console) {
;;;657    //		if (tstc ()) {
;;;658    //			switch (getc ()) {
;;;659    //			case 0x03:		/* ^C - Control C */
;;;660    //				ctrlc_was_pressed = 1;
;;;661    //				return 1;
;;;662    //			default:
;;;663    //				break;
;;;664    //			}
;;;665    //		}
;;;666    //	}
;;;667    	return 0;
;;;668    }
000002  4770              BX       lr
;;;669    
                          ENDP


                          AREA ||i.do_help||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  do_help PROC
;;;713    
;;;714    static int do_help (cmd_tbl_t *cmdtp, int flag, int argc, char *argv[])
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;715    {
000004  4681              MOV      r9,r0
000006  4692              MOV      r10,r2
000008  469b              MOV      r11,r3
;;;716    	int i;
;;;717    	int rcode = 0;
00000a  2000              MOVS     r0,#0
00000c  9003              STR      r0,[sp,#0xc]
;;;718    	cmdtp = &__my_cmd_help; //加上这一句防止my_cmd_sec这个Section 被编译器优化掉
00000e  f8df9114          LDR      r9,|L6.292|
;;;719    	my_println ("-----------------------------------------------------------");
000012  a045              ADR      r0,|L6.296|
000014  f7fffffe          BL       __2printf
;;;720    	if (argc == 1)
000018  f1ba0f01          CMP      r10,#1
00001c  d163              BNE      |L6.230|
;;;721    	{	/*show list of commands */
;;;722    
;;;723    		int cmd_items = (unsigned int)MY_CMD_RO_SEC_LENGTH / sizeof (cmd_tbl_t);	/* pointer arith! */
00001e  4852              LDR      r0,|L6.360|
000020  2118              MOVS     r1,#0x18
000022  fbb0f8f1          UDIV     r8,r0,r1
;;;724    		cmd_tbl_t *cmd_array[cmd_items];
000026  f8cd8008          STR      r8,[sp,#8]
00002a  f8dd8008          LDR      r8,[sp,#8]
00002e  ea4f0088          LSL      r0,r8,#2
000032  f7fffffe          BL       malloc
000036  4604              MOV      r4,r0
;;;725    		int i, j, swaps;
;;;726    
;;;727    		/* Make array of commands from .uboot_cmd section */
;;;728    		cmdtp = (cmd_tbl_t *)MY_CMD_RO_SEC_START;
000038  f8df9130          LDR      r9,|L6.364|
;;;729    		for (i = 0; i < cmd_items; i++) {
00003c  2500              MOVS     r5,#0
00003e  e004              B        |L6.74|
                  |L6.64|
;;;730    			cmd_array[i] = cmdtp++;
000040  f8449025          STR      r9,[r4,r5,LSL #2]
000044  f1090918          ADD      r9,r9,#0x18
000048  1c6d              ADDS     r5,r5,#1              ;729
                  |L6.74|
00004a  4545              CMP      r5,r8                 ;729
00004c  dbf8              BLT      |L6.64|
;;;731    		}
;;;732    
;;;733    		/* Sort command list (trivial bubble sort) */
;;;734    		for (i = cmd_items - 1; i > 0; --i) {
00004e  f1a80501          SUB      r5,r8,#1
000052  e023              B        |L6.156|
                  |L6.84|
;;;735    			swaps = 0;
000054  2000              MOVS     r0,#0
000056  9001              STR      r0,[sp,#4]
;;;736    			for (j = 0; j < i; ++j) {
000058  2600              MOVS     r6,#0
00005a  e019              B        |L6.144|
                  |L6.92|
;;;737    				if (strcmp (cmd_array[j]->name,
00005c  1c72              ADDS     r2,r6,#1
00005e  f8542022          LDR      r2,[r4,r2,LSL #2]
000062  6811              LDR      r1,[r2,#0]
000064  f8542026          LDR      r2,[r4,r6,LSL #2]
000068  6810              LDR      r0,[r2,#0]
00006a  f7fffffe          BL       strcmp
00006e  2800              CMP      r0,#0
000070  dd0d              BLE      |L6.142|
;;;738    					    cmd_array[j + 1]->name) > 0) {
;;;739    					cmd_tbl_t *tmp;
;;;740    					tmp = cmd_array[j];
000072  f8540026          LDR      r0,[r4,r6,LSL #2]
;;;741    					cmd_array[j] = cmd_array[j + 1];
000076  1c71              ADDS     r1,r6,#1
000078  f8541021          LDR      r1,[r4,r1,LSL #2]
00007c  f8441026          STR      r1,[r4,r6,LSL #2]
;;;742    					cmd_array[j + 1] = tmp;
000080  1c71              ADDS     r1,r6,#1
000082  f8440021          STR      r0,[r4,r1,LSL #2]
;;;743    					++swaps;
000086  9901              LDR      r1,[sp,#4]
000088  1c49              ADDS     r1,r1,#1
00008a  9101              STR      r1,[sp,#4]
;;;744    				}
00008c  bf00              NOP      
                  |L6.142|
00008e  1c76              ADDS     r6,r6,#1              ;736
                  |L6.144|
000090  42ae              CMP      r6,r5                 ;736
000092  dbe3              BLT      |L6.92|
;;;745    			}
;;;746    			if (!swaps)
000094  9801              LDR      r0,[sp,#4]
000096  b900              CBNZ     r0,|L6.154|
;;;747    				break;
000098  e002              B        |L6.160|
                  |L6.154|
00009a  1e6d              SUBS     r5,r5,#1              ;734
                  |L6.156|
00009c  2d00              CMP      r5,#0                 ;734
00009e  dcd9              BGT      |L6.84|
                  |L6.160|
0000a0  bf00              NOP      
;;;748    		}
;;;749    
;;;750    		/* print short help (usage) */
;;;751    		for (i = 0; i < cmd_items; i++) {
0000a2  2500              MOVS     r5,#0
0000a4  e015              B        |L6.210|
                  |L6.166|
;;;752    			const char *usage = cmd_array[i]->usage;
0000a6  f8540025          LDR      r0,[r4,r5,LSL #2]
0000aa  6900              LDR      r0,[r0,#0x10]
0000ac  9000              STR      r0,[sp,#0]
;;;753    
;;;754    			/* allow user abort */
;;;755    			if (ctrlc ())
0000ae  f7fffffe          BL       ctrlc
0000b2  b130              CBZ      r0,|L6.194|
0000b4  4620              MOV      r0,r4
0000b6  f7fffffe          BL       free
;;;756    				return 1;
0000ba  2001              MOVS     r0,#1
                  |L6.188|
;;;757    			if (usage == NULL)
;;;758    				continue;
;;;759    			my_puts (usage);
;;;760    		}
;;;761    		my_println ("-----------------------------------------------------------");
;;;762    		return 0;
;;;763    	}
;;;764    	/*
;;;765    	 * command help (long version)
;;;766    	 */
;;;767    	for (i = 1; i < argc; ++i) {
;;;768    		if ((cmdtp = find_cmd (argv[i])) != NULL) {
;;;769    			rcode |= cmd_usage(cmdtp);
;;;770    		} else {
;;;771    			printf ("Unknown command '%s' - try 'help'\n"
;;;772    				" without arguments for list of all\n"
;;;773    				" known commands\n\n", argv[i]
;;;774    					);
;;;775    			rcode = 1;
;;;776    		}
;;;777    	}
;;;778    	my_println ("-----------------------------------------------------------");
;;;779    	return rcode;
;;;780    }
0000bc  b004              ADD      sp,sp,#0x10
0000be  e8bd9ff0          POP      {r4-r12,pc}
                  |L6.194|
0000c2  9800              LDR      r0,[sp,#0]            ;757
0000c4  b900              CBNZ     r0,|L6.200|
0000c6  e003              B        |L6.208|
                  |L6.200|
0000c8  9800              LDR      r0,[sp,#0]            ;759
0000ca  f7fffffe          BL       uart1_puts
0000ce  bf00              NOP                            ;758
                  |L6.208|
0000d0  1c6d              ADDS     r5,r5,#1              ;751
                  |L6.210|
0000d2  4545              CMP      r5,r8                 ;751
0000d4  dbe7              BLT      |L6.166|
0000d6  a014              ADR      r0,|L6.296|
0000d8  f7fffffe          BL       __2printf
0000dc  4620              MOV      r0,r4                 ;761
0000de  f7fffffe          BL       free
0000e2  2000              MOVS     r0,#0                 ;762
0000e4  e7ea              B        |L6.188|
                  |L6.230|
0000e6  2701              MOVS     r7,#1                 ;767
0000e8  e015              B        |L6.278|
                  |L6.234|
0000ea  f85b0027          LDR      r0,[r11,r7,LSL #2]    ;768
0000ee  f7fffffe          BL       find_cmd
0000f2  f1b00900          SUBS     r9,r0,#0              ;768
0000f6  d006              BEQ      |L6.262|
0000f8  4648              MOV      r0,r9                 ;769
0000fa  f7fffffe          BL       cmd_usage
0000fe  9903              LDR      r1,[sp,#0xc]          ;769
000100  4308              ORRS     r0,r0,r1              ;769
000102  9003              STR      r0,[sp,#0xc]          ;769
000104  e006              B        |L6.276|
                  |L6.262|
000106  f85b1027          LDR      r1,[r11,r7,LSL #2]    ;771
00010a  4819              LDR      r0,|L6.368|
00010c  f7fffffe          BL       __2printf
000110  2001              MOVS     r0,#1                 ;775
000112  9003              STR      r0,[sp,#0xc]          ;775
                  |L6.276|
000114  1c7f              ADDS     r7,r7,#1              ;767
                  |L6.278|
000116  4557              CMP      r7,r10                ;767
000118  dbe7              BLT      |L6.234|
00011a  a003              ADR      r0,|L6.296|
00011c  f7fffffe          BL       __2printf
000120  9803              LDR      r0,[sp,#0xc]          ;779
000122  e7cb              B        |L6.188|
;;;781    
                          ENDP

                  |L6.292|
                          DCD      __my_cmd_help
                  |L6.296|
000128  2d2d2d2d          DCB      "-------------------------------------------------------"
00012c  2d2d2d2d
000130  2d2d2d2d
000134  2d2d2d2d
000138  2d2d2d2d
00013c  2d2d2d2d
000140  2d2d2d2d
000144  2d2d2d2d
000148  2d2d2d2d
00014c  2d2d2d2d
000150  2d2d2d2d
000154  2d2d2d2d
000158  2d2d2d2d
00015c  2d2d2d  
00015f  2d2d2d2d          DCB      "----\n",0
000163  0a00    
000165  00                DCB      0
000166  00                DCB      0
000167  00                DCB      0
                  |L6.360|
                          DCD      ||Image$$MY_CMD_RO_SEC$$Length||
                  |L6.364|
                          DCD      ||Image$$MY_CMD_RO_SEC$$Base||
                  |L6.368|
                          DCD      ||.conststring||

                          AREA ||i.do_print||, CODE, READONLY, ALIGN=2

                  do_print PROC
;;;828    
;;;829    int do_print (cmd_tbl_t *cmdtp, int flag, int argc, char *argv[])
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;830    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
00000a  461c              MOV      r4,r3
;;;831    	switch (argc){
00000c  2d02              CMP      r5,#2
00000e  d002              BEQ      |L7.22|
000010  2d03              CMP      r5,#3
000012  d132              BNE      |L7.122|
000014  e013              B        |L7.62|
                  |L7.22|
;;;832    		case 2:
;;;833    			if (strcmp (argv[1], "count") == 0){
000016  a11d              ADR      r1,|L7.140|
000018  6860              LDR      r0,[r4,#4]
00001a  f7fffffe          BL       strcmp
00001e  b910              CBNZ     r0,|L7.38|
;;;834    				print_count ();
000020  f7fffffe          BL       print_count
;;;835    				break;
000024  e02d              B        |L7.130|
                  |L7.38|
;;;836    			}else if (strcmp (argv[1], "step") == 0){
000026  a11b              ADR      r1,|L7.148|
000028  6860              LDR      r0,[r4,#4]
00002a  f7fffffe          BL       strcmp
00002e  b910              CBNZ     r0,|L7.54|
;;;837    				print_step ();
000030  f7fffffe          BL       print_step
;;;838    				break;
000034  e025              B        |L7.130|
                  |L7.54|
;;;839    			}
;;;840    			cmd_usage (cmdtp);
000036  4630              MOV      r0,r6
000038  f7fffffe          BL       cmd_usage
;;;841    			break;
00003c  e021              B        |L7.130|
                  |L7.62|
;;;842    		case 3:
;;;843    			if (strcmp (argv[1], "ad") == 0)
00003e  a117              ADR      r1,|L7.156|
000040  6860              LDR      r0,[r4,#4]
000042  f7fffffe          BL       strcmp
000046  b938              CBNZ     r0,|L7.88|
;;;844    			{
;;;845    				if (strcmp (argv[2], "all") == 0)
000048  a115              ADR      r1,|L7.160|
00004a  68a0              LDR      r0,[r4,#8]
00004c  f7fffffe          BL       strcmp
000050  b978              CBNZ     r0,|L7.114|
;;;846    				{
;;;847    					print_da_all ();
000052  f7fffffe          BL       print_da_all
;;;848    					break;
000056  e014              B        |L7.130|
                  |L7.88|
;;;849    				}
;;;850    			}else if (strcmp (argv[1], "env") == 0){
000058  a112              ADR      r1,|L7.164|
00005a  6860              LDR      r0,[r4,#4]
00005c  f7fffffe          BL       strcmp
000060  b938              CBNZ     r0,|L7.114|
;;;851    				if (strcmp (argv[2], "-s") == 0)
000062  a111              ADR      r1,|L7.168|
000064  68a0              LDR      r0,[r4,#8]
000066  f7fffffe          BL       strcmp
00006a  b910              CBNZ     r0,|L7.114|
;;;852    				{
;;;853    					print_system_env_info ();
00006c  f7fffffe          BL       print_system_env_info
;;;854    					break;
000070  e007              B        |L7.130|
                  |L7.114|
;;;855    				}
;;;856    			}
;;;857    			cmd_usage (cmdtp);
000072  4630              MOV      r0,r6
000074  f7fffffe          BL       cmd_usage
;;;858    			break;
000078  e003              B        |L7.130|
                  |L7.122|
;;;859    		default: cmd_usage (cmdtp);break;
00007a  4630              MOV      r0,r6
00007c  f7fffffe          BL       cmd_usage
000080  bf00              NOP      
                  |L7.130|
000082  bf00              NOP                            ;835
;;;860    	}
;;;861    	return 0;
000084  2000              MOVS     r0,#0
;;;862    }
000086  e8bd81f0          POP      {r4-r8,pc}
;;;863    
                          ENDP

00008a  0000              DCW      0x0000
                  |L7.140|
00008c  636f756e          DCB      "count",0
000090  7400    
000092  00                DCB      0
000093  00                DCB      0
                  |L7.148|
000094  73746570          DCB      "step",0
000098  00      
000099  00                DCB      0
00009a  00                DCB      0
00009b  00                DCB      0
                  |L7.156|
00009c  616400            DCB      "ad",0
00009f  00                DCB      0
                  |L7.160|
0000a0  616c6c00          DCB      "all",0
                  |L7.164|
0000a4  656e7600          DCB      "env",0
                  |L7.168|
0000a8  2d7300            DCB      "-s",0
0000ab  00                DCB      0

                          AREA ||i.do_reset||, CODE, READONLY, ALIGN=2

                  do_reset PROC
;;;631     */
;;;632    int do_reset (cmd_tbl_t *cmdtp, int flag, int argc, char *argv[])
000000  a010              ADR      r0,|L8.68|
;;;633    {
;;;634    	my_println ("Reset System...");
000002  f7fffffe          BL       __2printf
;;;635    	NVIC_SystemReset ();
000006  bf00              NOP      
000008  bf00              NOP      
00000a  bf00              NOP      
00000c  bf00              NOP      
00000e  bf00              NOP      
000010  f3bf8f4f          DSB      
000014  bf00              NOP      
000016  bf00              NOP      
000018  bf00              NOP      
00001a  480f              LDR      r0,|L8.88|
00001c  6800              LDR      r0,[r0,#0]
00001e  f40060e0          AND      r0,r0,#0x700
000022  490e              LDR      r1,|L8.92|
000024  4308              ORRS     r0,r0,r1
000026  1d00              ADDS     r0,r0,#4
000028  490b              LDR      r1,|L8.88|
00002a  6008              STR      r0,[r1,#0]
00002c  bf00              NOP      
00002e  bf00              NOP      
000030  bf00              NOP      
000032  f3bf8f4f          DSB      
000036  bf00              NOP      
000038  bf00              NOP      
00003a  bf00              NOP      
00003c  bf00              NOP      
                  |L8.62|
00003e  bf00              NOP      
000040  e7fd              B        |L8.62|
;;;636    	return 0;
;;;637    }
;;;638    MY_CMD(
                          ENDP

000042  0000              DCW      0x0000
                  |L8.68|
000044  52657365          DCB      "Reset System...\n",0
000048  74205379
00004c  7374656d
000050  2e2e2e0a
000054  00      
000055  00                DCB      0
000056  00                DCB      0
000057  00                DCB      0
                  |L8.88|
                          DCD      0xe000ed0c
                  |L8.92|
                          DCD      0x05fa0000

                          AREA ||i.do_set||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  do_set PROC
;;;869    
;;;870    int do_set (cmd_tbl_t *cmdtp, int flag, int argc, char *argv[])
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;871    {	
000004  4607              MOV      r7,r0
000006  4689              MOV      r9,r1
000008  4616              MOV      r6,r2
00000a  461c              MOV      r4,r3
;;;872    	U16 data_temp;
;;;873    	switch (argc){
00000c  2e03              CMP      r6,#3
00000e  d13d              BNE      |L9.140|
;;;874    		case 3:
;;;875    			if (strcmp (argv[1], "da") == 0){
000010  a122              ADR      r1,|L9.156|
000012  6860              LDR      r0,[r4,#4]
000014  f7fffffe          BL       strcmp
000018  b950              CBNZ     r0,|L9.48|
;;;876    				dac1_set_vol (simple_strtoul(argv[2], NULL, 10));
00001a  220a              MOVS     r2,#0xa
00001c  2100              MOVS     r1,#0
00001e  68a0              LDR      r0,[r4,#8]
000020  f7fffffe          BL       simple_strtoul
000024  fa1ff880          UXTH     r8,r0
000028  4640              MOV      r0,r8
00002a  f7fffffe          BL       dac1_set_vol
;;;877    				break;
00002e  e031              B        |L9.148|
                  |L9.48|
;;;878    			}else if (strcmp (argv[1], "watch") == 0){
000030  a11b              ADR      r1,|L9.160|
000032  6860              LDR      r0,[r4,#4]
000034  f7fffffe          BL       strcmp
000038  b978              CBNZ     r0,|L9.90|
;;;879    				data_temp = simple_strtoul(argv[2], NULL, 10);
00003a  220a              MOVS     r2,#0xa
00003c  2100              MOVS     r1,#0
00003e  68a0              LDR      r0,[r4,#8]
000040  f7fffffe          BL       simple_strtoul
000044  b285              UXTH     r5,r0
;;;880    				if (data_temp < CHANEL_NUM){
000046  2d0c              CMP      r5,#0xc
000048  da02              BGE      |L9.80|
;;;881    					my_env.watch_ch = data_temp;
00004a  4817              LDR      r0,|L9.168|
00004c  8085              STRH     r5,[r0,#4]
00004e  e003              B        |L9.88|
                  |L9.80|
;;;882    				}else{
;;;883    					my_println ("chanel value must be 0 - %d", CHANEL_NUM);
000050  210c              MOVS     r1,#0xc
000052  a016              ADR      r0,|L9.172|
000054  f7fffffe          BL       __2printf
                  |L9.88|
;;;884    				}
;;;885    				break;
000058  e01c              B        |L9.148|
                  |L9.90|
;;;886    			}else if (strcmp (argv[1], "print") == 0){
00005a  a11c              ADR      r1,|L9.204|
00005c  6860              LDR      r0,[r4,#4]
00005e  f7fffffe          BL       strcmp
000062  b978              CBNZ     r0,|L9.132|
;;;887    				data_temp = simple_strtoul(argv[2], NULL, 10);
000064  220a              MOVS     r2,#0xa
000066  2100              MOVS     r1,#0
000068  68a0              LDR      r0,[r4,#8]
00006a  f7fffffe          BL       simple_strtoul
00006e  b285              UXTH     r5,r0
;;;888    				if (data_temp == 0 || data_temp == 1){
000070  b10d              CBZ      r5,|L9.118|
000072  2d01              CMP      r5,#1
000074  d102              BNE      |L9.124|
                  |L9.118|
;;;889    					my_env.print = data_temp;
000076  480c              LDR      r0,|L9.168|
000078  8105              STRH     r5,[r0,#8]
00007a  e002              B        |L9.130|
                  |L9.124|
;;;890    				}else{
;;;891    					my_println ("print value must be 0 or 1");
00007c  a015              ADR      r0,|L9.212|
00007e  f7fffffe          BL       __2printf
                  |L9.130|
;;;892    				}
;;;893    				break;
000082  e007              B        |L9.148|
                  |L9.132|
;;;894    			}
;;;895    			cmd_usage (cmdtp);
000084  4638              MOV      r0,r7
000086  f7fffffe          BL       cmd_usage
;;;896    			break;
00008a  e003              B        |L9.148|
                  |L9.140|
;;;897    		default: cmd_usage (cmdtp);break;
00008c  4638              MOV      r0,r7
00008e  f7fffffe          BL       cmd_usage
000092  bf00              NOP      
                  |L9.148|
000094  bf00              NOP                            ;877
;;;898    	}
;;;899    	return 0;
000096  2000              MOVS     r0,#0
;;;900    }
000098  e8bd87f0          POP      {r4-r10,pc}
;;;901    MY_CMD(
                          ENDP

                  |L9.156|
00009c  646100            DCB      "da",0
00009f  00                DCB      0
                  |L9.160|
0000a0  77617463          DCB      "watch",0
0000a4  6800    
0000a6  00                DCB      0
0000a7  00                DCB      0
                  |L9.168|
                          DCD      my_env
                  |L9.172|
0000ac  6368616e          DCB      "chanel value must be 0 - %d\n",0
0000b0  656c2076
0000b4  616c7565
0000b8  206d7573
0000bc  74206265
0000c0  2030202d
0000c4  2025640a
0000c8  00      
0000c9  00                DCB      0
0000ca  00                DCB      0
0000cb  00                DCB      0
                  |L9.204|
0000cc  7072696e          DCB      "print",0
0000d0  7400    
0000d2  00                DCB      0
0000d3  00                DCB      0
                  |L9.212|
0000d4  7072696e          DCB      "print value must be 0 or 1\n",0
0000d8  74207661
0000dc  6c756520
0000e0  6d757374
0000e4  20626520
0000e8  30206f72
0000ec  20310a00

                          AREA ||i.do_task_manager||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_sizespec
                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                  do_task_manager PROC
;;;787    
;;;788    int do_task_manager (cmd_tbl_t *cmdtp, int flag, int argc, char *argv[])
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;789    {
000004  4607              MOV      r7,r0
000006  4688              MOV      r8,r1
000008  4691              MOV      r9,r2
00000a  469a              MOV      r10,r3
;;;790    	my_println ("------------------------------------------");
00000c  a03f              ADR      r0,|L10.268|
00000e  f7fffffe          BL       __2printf
;;;791    	my_print("                Task View  \n");  
000012  a049              ADR      r0,|L10.312|
000014  f7fffffe          BL       __2printf
;;;792    	my_print("\n Micrium uC/OS-II  \n");  
000018  a04f              ADR      r0,|L10.344|
00001a  f7fffffe          BL       __2printf
;;;793    	my_print(" ST STM32 (Cortex-M3)\n\n");  
00001e  a054              ADR      r0,|L10.368|
000020  f7fffffe          BL       __2printf
;;;794         
;;;795         
;;;796    	my_print(" uC/OS-II: V%ld.%ld%ld\r\n",OSVersion()/100,(OSVersion() % 100) /   10,(OSVersion() % 10));  
000024  f7fffffe          BL       OSVersion
000028  210a              MOVS     r1,#0xa
00002a  fb90f2f1          SDIV     r2,r0,r1
00002e  fb010412          MLS      r4,r1,r2,r0
000032  f7fffffe          BL       OSVersion
000036  2164              MOVS     r1,#0x64
000038  fb90f2f1          SDIV     r2,r0,r1
00003c  fb010012          MLS      r0,r1,r2,r0
000040  210a              MOVS     r1,#0xa
000042  fb90f5f1          SDIV     r5,r0,r1
000046  f7fffffe          BL       OSVersion
00004a  2164              MOVS     r1,#0x64
00004c  fb90f6f1          SDIV     r6,r0,r1
000050  4623              MOV      r3,r4
000052  462a              MOV      r2,r5
000054  4631              MOV      r1,r6
000056  a04c              ADR      r0,|L10.392|
000058  f7fffffe          BL       __2printf
;;;797    	my_print(" TickRate: %ld  \r\n",OS_TICKS_PER_SEC);  
00005c  21c8              MOVS     r1,#0xc8
00005e  a051              ADR      r0,|L10.420|
000060  f7fffffe          BL       __2printf
;;;798    	my_print(" CPU Speed: %ld MHz  \r\n",SystemCoreClock / 1000000L);  
000064  4854              LDR      r0,|L10.440|
000066  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
000068  4954              LDR      r1,|L10.444|
00006a  fbb0f4f1          UDIV     r4,r0,r1
00006e  4621              MOV      r1,r4
000070  a053              ADR      r0,|L10.448|
000072  f7fffffe          BL       __2printf
;;;799    	my_print(" Number of tasks: %ld   \r\n", OSTaskCtr);  
000076  4858              LDR      r0,|L10.472|
000078  7801              LDRB     r1,[r0,#0]  ; OSTaskCtr
00007a  a058              ADR      r0,|L10.476|
00007c  f7fffffe          BL       __2printf
;;;800    	clear_ctrlc();/* forget any previous Control C */
000080  f7fffffe          BL       clear_ctrlc
;;;801    	my_env.roll_count = 0;
000084  2000              MOVS     r0,#0
000086  495c              LDR      r1,|L10.504|
000088  8048              STRH     r0,[r1,#2]
;;;802    	while (1)
00008a  e036              B        |L10.250|
                  |L10.140|
;;;803    	{	
;;;804    		Rollback ();
00008c  f7fffffe          BL       Rollback
;;;805    		my_print(" counter_process_cycle: %06d us\n", counter_process_cycle); 
000090  485a              LDR      r0,|L10.508|
000092  8801              LDRH     r1,[r0,#0]  ; counter_process_cycle
000094  a05a              ADR      r0,|L10.512|
000096  f7fffffe          BL       __2printf
;;;806    		my_print(" dma_irq_cycle: %06d us\n", dma_irq_cycle);  
00009a  4862              LDR      r0,|L10.548|
00009c  8801              LDRH     r1,[r0,#0]  ; dma_irq_cycle
00009e  a062              ADR      r0,|L10.552|
0000a0  f7fffffe          BL       __2printf
;;;807    		my_print(" detect_chanel_index: %d \n", detect_chanel_index);  
0000a4  4867              LDR      r0,|L10.580|
0000a6  8801              LDRH     r1,[r0,#0]  ; detect_chanel_index
0000a8  a067              ADR      r0,|L10.584|
0000aa  f7fffffe          BL       __2printf
;;;808    		my_print(" chanel_pos_index: %d \n", chanel_pos_index);   
0000ae  486d              LDR      r0,|L10.612|
0000b0  8801              LDRH     r1,[r0,#0]  ; chanel_pos_index
0000b2  a06d              ADR      r0,|L10.616|
0000b4  f7fffffe          BL       __2printf
;;;809    		my_print(" #Ticks: %ld  \n",OSTime);  
0000b8  4871              LDR      r0,|L10.640|
0000ba  6801              LDR      r1,[r0,#0]  ; OSTime
0000bc  a071              ADR      r0,|L10.644|
0000be  f7fffffe          BL       __2printf
;;;810    		my_print(" #CtxSw: %ld  \n",OSCtxSwCtr);  	
0000c2  4874              LDR      r0,|L10.660|
0000c4  6801              LDR      r1,[r0,#0]  ; OSCtxSwCtr
0000c6  a074              ADR      r0,|L10.664|
0000c8  f7fffffe          BL       __2printf
;;;811    		my_print(" OSIdleCtrRun: %ld  OSIdleCtrMax: %ld  \n", OSIdleCtrRun, OSIdleCtrMax);  		
0000cc  4876              LDR      r0,|L10.680|
0000ce  6802              LDR      r2,[r0,#0]  ; OSIdleCtrMax
0000d0  4876              LDR      r0,|L10.684|
0000d2  6801              LDR      r1,[r0,#0]  ; OSIdleCtrRun
0000d4  a076              ADR      r0,|L10.688|
0000d6  f7fffffe          BL       __2printf
;;;812    		my_print(" CPU Usage: %02d%%\n",OSCPUUsage);  
0000da  4880              LDR      r0,|L10.732|
0000dc  7801              LDRB     r1,[r0,#0]  ; OSCPUUsage
0000de  a080              ADR      r0,|L10.736|
0000e0  f7fffffe          BL       __2printf
;;;813    		my_println ("------------------------------------------");
0000e4  a009              ADR      r0,|L10.268|
0000e6  f7fffffe          BL       __2printf
;;;814    		delay_ms (1000);
0000ea  f44f707a          MOV      r0,#0x3e8
0000ee  f7fffffe          BL       delay_ms
;;;815    		
;;;816    		if (had_ctrlc ())
0000f2  f7fffffe          BL       had_ctrlc
0000f6  b100              CBZ      r0,|L10.250|
;;;817    			break;
0000f8  e000              B        |L10.252|
                  |L10.250|
0000fa  e7c7              B        |L10.140|
                  |L10.252|
0000fc  bf00              NOP      
;;;818    	}
;;;819    	my_println ();
0000fe  a01b              ADR      r0,|L10.364|
000100  f7fffffe          BL       __2printf
;;;820    	return 0;
000104  2000              MOVS     r0,#0
;;;821    }
000106  e8bd87f0          POP      {r4-r10,pc}
;;;822    
                          ENDP

00010a  0000              DCW      0x0000
                  |L10.268|
00010c  2d2d2d2d          DCB      "------------------------------------------\n",0
000110  2d2d2d2d
000114  2d2d2d2d
000118  2d2d2d2d
00011c  2d2d2d2d
000120  2d2d2d2d
000124  2d2d2d2d
000128  2d2d2d2d
00012c  2d2d2d2d
000130  2d2d2d2d
000134  2d2d0a00
                  |L10.312|
000138  20202020          DCB      "                Task View  \n",0
00013c  20202020
000140  20202020
000144  20202020
000148  5461736b
00014c  20566965
000150  7720200a
000154  00      
000155  00                DCB      0
000156  00                DCB      0
000157  00                DCB      0
                  |L10.344|
000158  0a204d69          DCB      "\n Micrium uC/OS-II  "
00015c  63726975
000160  6d207543
000164  2f4f532d
000168  49492020
                  |L10.364|
00016c  0a00              DCB      "\n",0
00016e  00                DCB      0
00016f  00                DCB      0
                  |L10.368|
000170  20535420          DCB      " ST STM32 (Cortex-M3)\n\n",0
000174  53544d33
000178  32202843
00017c  6f727465
000180  782d4d33
000184  290a0a00
                  |L10.392|
000188  2075432f          DCB      " uC/OS-II: V%ld.%ld%ld\r\n",0
00018c  4f532d49
000190  493a2056
000194  256c642e
000198  256c6425
00019c  6c640d0a
0001a0  00      
0001a1  00                DCB      0
0001a2  00                DCB      0
0001a3  00                DCB      0
                  |L10.420|
0001a4  20546963          DCB      " TickRate: %ld  \r\n",0
0001a8  6b526174
0001ac  653a2025
0001b0  6c642020
0001b4  0d0a00  
0001b7  00                DCB      0
                  |L10.440|
                          DCD      SystemCoreClock
                  |L10.444|
                          DCD      0x000f4240
                  |L10.448|
0001c0  20435055          DCB      " CPU Speed: %ld MHz  \r\n",0
0001c4  20537065
0001c8  65643a20
0001cc  256c6420
0001d0  4d487a20
0001d4  200d0a00
                  |L10.472|
                          DCD      OSTaskCtr
                  |L10.476|
0001dc  204e756d          DCB      " Number of tasks: %ld   \r\n",0
0001e0  62657220
0001e4  6f662074
0001e8  61736b73
0001ec  3a20256c
0001f0  64202020
0001f4  0d0a00  
0001f7  00                DCB      0
                  |L10.504|
                          DCD      my_env
                  |L10.508|
                          DCD      counter_process_cycle
                  |L10.512|
000200  20636f75          DCB      " counter_process_cycle: %06d us\n",0
000204  6e746572
000208  5f70726f
00020c  63657373
000210  5f637963
000214  6c653a20
000218  25303664
00021c  2075730a
000220  00      
000221  00                DCB      0
000222  00                DCB      0
000223  00                DCB      0
                  |L10.548|
                          DCD      dma_irq_cycle
                  |L10.552|
000228  20646d61          DCB      " dma_irq_cycle: %06d us\n",0
00022c  5f697271
000230  5f637963
000234  6c653a20
000238  25303664
00023c  2075730a
000240  00      
000241  00                DCB      0
000242  00                DCB      0
000243  00                DCB      0
                  |L10.580|
                          DCD      detect_chanel_index
                  |L10.584|
000248  20646574          DCB      " detect_chanel_index: %d \n",0
00024c  6563745f
000250  6368616e
000254  656c5f69
000258  6e646578
00025c  3a202564
000260  200a00  
000263  00                DCB      0
                  |L10.612|
                          DCD      chanel_pos_index
                  |L10.616|
000268  20636861          DCB      " chanel_pos_index: %d \n",0
00026c  6e656c5f
000270  706f735f
000274  696e6465
000278  783a2025
00027c  64200a00
                  |L10.640|
                          DCD      OSTime
                  |L10.644|
000284  20235469          DCB      " #Ticks: %ld  \n",0
000288  636b733a
00028c  20256c64
000290  20200a00
                  |L10.660|
                          DCD      OSCtxSwCtr
                  |L10.664|
000298  20234374          DCB      " #CtxSw: %ld  \n",0
00029c  7853773a
0002a0  20256c64
0002a4  20200a00
                  |L10.680|
                          DCD      OSIdleCtrMax
                  |L10.684|
                          DCD      OSIdleCtrRun
                  |L10.688|
0002b0  204f5349          DCB      " OSIdleCtrRun: %ld  OSIdleCtrMax: %ld  \n",0
0002b4  646c6543
0002b8  74725275
0002bc  6e3a2025
0002c0  6c642020
0002c4  4f534964
0002c8  6c654374
0002cc  724d6178
0002d0  3a20256c
0002d4  6420200a
0002d8  00      
0002d9  00                DCB      0
0002da  00                DCB      0
0002db  00                DCB      0
                  |L10.732|
                          DCD      OSCPUUsage
                  |L10.736|
0002e0  20435055          DCB      " CPU Usage: %02d%%\n",0
0002e4  20557361
0002e8  67653a20
0002ec  25303264
0002f0  25250a00

                          AREA ||i.fill_rec_buf||, CODE, READONLY, ALIGN=2

                  fill_rec_buf PROC
;;;557    uint32_t rec_count = 0;                  
;;;558    void fill_rec_buf(char data)                                                           
000000  b510              PUSH     {r4,lr}
;;;559    {                                       
000002  4604              MOV      r4,r0
;;;560    
;;;561    	if (data == CTRL_C && my_env.tty == TTY_CONSOLE)
000004  2c03              CMP      r4,#3
000006  d106              BNE      |L11.22|
000008  4843              LDR      r0,|L11.280|
00000a  8940              LDRH     r0,[r0,#0xa]  ; my_env
00000c  2801              CMP      r0,#1
00000e  d102              BNE      |L11.22|
;;;562    	{
;;;563    		my_env.sys_break = 1;
000010  4941              LDR      r1,|L11.280|
000012  8008              STRH     r0,[r1,#0]
                  |L11.20|
;;;564    		return;
;;;565    	}	
;;;566        
;;;567    	cmd_analyze.rec_buf[rec_count] = data;                                                                        
;;;568    	rec_count++;                                                                   																   
;;;569    	/*防御性代码，防止数组越界*/                                                    
;;;570    	if(rec_count>=CMD_BUF_LEN)                                                      
;;;571    	{                                                                               
;;;572    		rec_count=0;                                                                
;;;573    	}   
;;;574    	
;;;575    	if (my_env.tty == TTY_MODBUS){
;;;576    		return ;
;;;577    	}else if (cmd_analyze.rec_buf[0] > 7){
;;;578    		if (data != '\b'){
;;;579    			uart1_send_data(data);	
;;;580    		}
;;;581    	}else{
;;;582    		my_env.tty = TTY_MODBUS;
;;;583    		return ;
;;;584    	}
;;;585    	
;;;586    	if(my_env.sys_break == 1)
;;;587    	{
;;;588    		
;;;589    		if (data == '\b')
;;;590    		{
;;;591    			if (rec_count > 1)
;;;592    			{
;;;593    				rec_count--;
;;;594    				cmd_analyze.rec_buf[rec_count] = 0;
;;;595    				uart1_send_data('\b');
;;;596    				uart1_send_data(' ');
;;;597    				uart1_send_data('\b');
;;;598    				uart1_send_data('\b');
;;;599    				rec_count--;
;;;600    				cmd_analyze.rec_buf[rec_count] = 0;
;;;601    				if (rec_count > 0)
;;;602    				{
;;;603    					uart1_send_data(cmd_analyze.rec_buf[rec_count - 1]);
;;;604    				}
;;;605    				else
;;;606    				{
;;;607    					uart1_send_data(':');
;;;608    				}
;;;609    			}else{
;;;610    				rec_count--;
;;;611    			}
;;;612    			return;
;;;613    		}else if(0x0D == data){ 
;;;614    			if (rec_count > 0){				
;;;615    				cmd_analyze.rec_buf[rec_count - 1] = '\0';  
;;;616    				rec_count=0;    
;;;617    			}	  
;;;618    			uart1_send_data('\n');
;;;619    			OSQPost(cmd_msg, (void *) 0x55);//发送消息	                          
;;;620    		}else{     
;;;621    			my_env.tty = TTY_CONSOLE;	                                                                                    
;;;622    		}     
;;;623    	}
;;;624    	else{
;;;625    		rec_count = 0;
;;;626    	}
;;;627    }                                                                                      
000014  bd10              POP      {r4,pc}
                  |L11.22|
000016  4841              LDR      r0,|L11.284|
000018  4941              LDR      r1,|L11.288|
00001a  6809              LDR      r1,[r1,#0]            ;567  ; rec_count
00001c  5444              STRB     r4,[r0,r1]            ;567
00001e  4840              LDR      r0,|L11.288|
000020  6800              LDR      r0,[r0,#0]            ;568  ; rec_count
000022  1c40              ADDS     r0,r0,#1              ;568
000024  493e              LDR      r1,|L11.288|
000026  6008              STR      r0,[r1,#0]            ;568  ; rec_count
000028  4608              MOV      r0,r1                 ;570
00002a  6800              LDR      r0,[r0,#0]            ;570  ; rec_count
00002c  283c              CMP      r0,#0x3c              ;570
00002e  d301              BCC      |L11.52|
000030  2000              MOVS     r0,#0                 ;572
000032  6008              STR      r0,[r1,#0]            ;572  ; rec_count
                  |L11.52|
000034  4838              LDR      r0,|L11.280|
000036  8940              LDRH     r0,[r0,#0xa]          ;575  ; my_env
000038  2802              CMP      r0,#2                 ;575
00003a  d100              BNE      |L11.62|
00003c  e7ea              B        |L11.20|
                  |L11.62|
00003e  4837              LDR      r0,|L11.284|
000040  7800              LDRB     r0,[r0,#0]            ;577  ; cmd_analyze
000042  2807              CMP      r0,#7                 ;577
000044  dd05              BLE      |L11.82|
000046  2c08              CMP      r4,#8                 ;578
000048  d007              BEQ      |L11.90|
00004a  4620              MOV      r0,r4                 ;579
00004c  f7fffffe          BL       uart1_send_data
000050  e003              B        |L11.90|
                  |L11.82|
000052  2002              MOVS     r0,#2                 ;582
000054  4930              LDR      r1,|L11.280|
000056  8148              STRH     r0,[r1,#0xa]          ;582
000058  e7dc              B        |L11.20|
                  |L11.90|
00005a  482f              LDR      r0,|L11.280|
00005c  8800              LDRH     r0,[r0,#0]            ;586  ; my_env
00005e  2801              CMP      r0,#1                 ;586
000060  d155              BNE      |L11.270|
000062  2c08              CMP      r4,#8                 ;589
000064  d138              BNE      |L11.216|
000066  482e              LDR      r0,|L11.288|
000068  6800              LDR      r0,[r0,#0]            ;591  ; rec_count
00006a  2801              CMP      r0,#1                 ;591
00006c  d92e              BLS      |L11.204|
00006e  482c              LDR      r0,|L11.288|
000070  6800              LDR      r0,[r0,#0]            ;593  ; rec_count
000072  1e40              SUBS     r0,r0,#1              ;593
000074  492a              LDR      r1,|L11.288|
000076  6008              STR      r0,[r1,#0]            ;593  ; rec_count
000078  2000              MOVS     r0,#0                 ;594
00007a  4928              LDR      r1,|L11.284|
00007c  4a28              LDR      r2,|L11.288|
00007e  6812              LDR      r2,[r2,#0]            ;594  ; rec_count
000080  5488              STRB     r0,[r1,r2]            ;594
000082  2008              MOVS     r0,#8                 ;595
000084  f7fffffe          BL       uart1_send_data
000088  2020              MOVS     r0,#0x20              ;596
00008a  f7fffffe          BL       uart1_send_data
00008e  2008              MOVS     r0,#8                 ;597
000090  f7fffffe          BL       uart1_send_data
000094  2008              MOVS     r0,#8                 ;598
000096  f7fffffe          BL       uart1_send_data
00009a  4821              LDR      r0,|L11.288|
00009c  6800              LDR      r0,[r0,#0]            ;599  ; rec_count
00009e  1e40              SUBS     r0,r0,#1              ;599
0000a0  491f              LDR      r1,|L11.288|
0000a2  6008              STR      r0,[r1,#0]            ;599  ; rec_count
0000a4  2100              MOVS     r1,#0                 ;600
0000a6  481d              LDR      r0,|L11.284|
0000a8  4a1d              LDR      r2,|L11.288|
0000aa  6812              LDR      r2,[r2,#0]            ;600  ; rec_count
0000ac  5481              STRB     r1,[r0,r2]            ;600
0000ae  481c              LDR      r0,|L11.288|
0000b0  6800              LDR      r0,[r0,#0]            ;601  ; rec_count
0000b2  b138              CBZ      r0,|L11.196|
0000b4  491a              LDR      r1,|L11.288|
0000b6  6809              LDR      r1,[r1,#0]            ;603  ; rec_count
0000b8  1e49              SUBS     r1,r1,#1              ;603
0000ba  4a18              LDR      r2,|L11.284|
0000bc  5c50              LDRB     r0,[r2,r1]            ;603
0000be  f7fffffe          BL       uart1_send_data
0000c2  e008              B        |L11.214|
                  |L11.196|
0000c4  203a              MOVS     r0,#0x3a              ;607
0000c6  f7fffffe          BL       uart1_send_data
0000ca  e004              B        |L11.214|
                  |L11.204|
0000cc  4814              LDR      r0,|L11.288|
0000ce  6800              LDR      r0,[r0,#0]            ;610  ; rec_count
0000d0  1e40              SUBS     r0,r0,#1              ;610
0000d2  4913              LDR      r1,|L11.288|
0000d4  6008              STR      r0,[r1,#0]            ;610  ; rec_count
                  |L11.214|
0000d6  e79d              B        |L11.20|
                  |L11.216|
0000d8  2c0d              CMP      r4,#0xd               ;613
0000da  d114              BNE      |L11.262|
0000dc  4810              LDR      r0,|L11.288|
0000de  6800              LDR      r0,[r0,#0]            ;614  ; rec_count
0000e0  b140              CBZ      r0,|L11.244|
0000e2  2100              MOVS     r1,#0                 ;615
0000e4  480e              LDR      r0,|L11.288|
0000e6  6800              LDR      r0,[r0,#0]            ;615  ; rec_count
0000e8  1e40              SUBS     r0,r0,#1              ;615
0000ea  4a0c              LDR      r2,|L11.284|
0000ec  5411              STRB     r1,[r2,r0]            ;615
0000ee  2000              MOVS     r0,#0                 ;616
0000f0  490b              LDR      r1,|L11.288|
0000f2  6008              STR      r0,[r1,#0]            ;616  ; rec_count
                  |L11.244|
0000f4  200a              MOVS     r0,#0xa               ;618
0000f6  f7fffffe          BL       uart1_send_data
0000fa  2155              MOVS     r1,#0x55              ;619
0000fc  4809              LDR      r0,|L11.292|
0000fe  6800              LDR      r0,[r0,#0]            ;619  ; cmd_msg
000100  f7fffffe          BL       OSQPost
000104  e006              B        |L11.276|
                  |L11.262|
000106  2001              MOVS     r0,#1                 ;621
000108  4903              LDR      r1,|L11.280|
00010a  8148              STRH     r0,[r1,#0xa]          ;621
00010c  e002              B        |L11.276|
                  |L11.270|
00010e  2000              MOVS     r0,#0                 ;625
000110  4903              LDR      r1,|L11.288|
000112  6008              STR      r0,[r1,#0]            ;625  ; rec_count
                  |L11.276|
000114  bf00              NOP      
000116  e77d              B        |L11.20|
;;;628     
                          ENDP

                  |L11.280|
                          DCD      my_env
                  |L11.284|
                          DCD      cmd_analyze
                  |L11.288|
                          DCD      rec_count
                  |L11.292|
                          DCD      cmd_msg

                          AREA ||i.find_cmd||, CODE, READONLY, ALIGN=2

                  find_cmd PROC
;;;911     */
;;;912    cmd_tbl_t *find_cmd (const char *cmd)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;913    {
000004  4605              MOV      r5,r0
;;;914    	cmd_tbl_t *cmdtp;
;;;915    	cmd_tbl_t *cmdtp_temp = (cmd_tbl_t *)MY_CMD_RO_SEC_START;	/*Init value */
000006  f8df805c          LDR      r8,|L12.100|
;;;916    	const char *p;
;;;917    	int len;
;;;918    	int n_found = 0;
00000a  2700              MOVS     r7,#0
;;;919    
;;;920    	/*
;;;921    	 * Some commands allow length modifiers (like "cp.b");
;;;922    	 * compare command name only until first dot.
;;;923    	 */
;;;924    	len = ((p = strchr(cmd, '.')) == NULL) ? strlen (cmd) : (p - cmd);
00000c  212e              MOVS     r1,#0x2e
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       strchr
000014  f1b00900          SUBS     r9,r0,#0
000018  d103              BNE      |L12.34|
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       strlen
000020  e001              B        |L12.38|
                  |L12.34|
000022  eba90005          SUB      r0,r9,r5
                  |L12.38|
000026  4606              MOV      r6,r0
;;;925    
;;;926    	for (cmdtp = (cmd_tbl_t *)MY_CMD_RO_SEC_START;
000028  4c0e              LDR      r4,|L12.100|
00002a  e010              B        |L12.78|
                  |L12.44|
;;;927    	     cmdtp != (cmd_tbl_t *)MY_CMD_RO_SEC_END;
;;;928    	     cmdtp++) {
;;;929    		if (strncmp (cmd, cmdtp->name, len) == 0) {
00002c  4632              MOV      r2,r6
00002e  4628              MOV      r0,r5
000030  6821              LDR      r1,[r4,#0]
000032  f7fffffe          BL       strncmp
000036  b948              CBNZ     r0,|L12.76|
;;;930    			if (len == strlen (cmdtp->name))
000038  6820              LDR      r0,[r4,#0]
00003a  f7fffffe          BL       strlen
00003e  42b0              CMP      r0,r6
000040  d102              BNE      |L12.72|
;;;931    				return cmdtp;	/* full match */
000042  4620              MOV      r0,r4
                  |L12.68|
;;;932    
;;;933    			cmdtp_temp = cmdtp;	/* abbreviated command ? */
;;;934    			n_found++;
;;;935    		}
;;;936    	}
;;;937    	if (n_found == 1) {			/* exactly one match */
;;;938    		return cmdtp_temp;
;;;939    	}
;;;940    
;;;941    	return NULL;	/* not found or ambiguous command */
;;;942    }
000044  e8bd87f0          POP      {r4-r10,pc}
                  |L12.72|
000048  46a0              MOV      r8,r4                 ;933
00004a  1c7f              ADDS     r7,r7,#1              ;934
                  |L12.76|
00004c  3418              ADDS     r4,r4,#0x18           ;928
                  |L12.78|
00004e  4805              LDR      r0,|L12.100|
000050  4905              LDR      r1,|L12.104|
000052  4408              ADD      r0,r0,r1              ;927
000054  42a0              CMP      r0,r4                 ;927
000056  d1e9              BNE      |L12.44|
000058  2f01              CMP      r7,#1                 ;937
00005a  d101              BNE      |L12.96|
00005c  4640              MOV      r0,r8                 ;938
00005e  e7f1              B        |L12.68|
                  |L12.96|
000060  2000              MOVS     r0,#0                 ;941
000062  e7ef              B        |L12.68|
;;;943    
                          ENDP

                  |L12.100|
                          DCD      ||Image$$MY_CMD_RO_SEC$$Base||
                  |L12.104|
                          DCD      ||Image$$MY_CMD_RO_SEC$$Length||

                          AREA ||i.had_ctrlc||, CODE, READONLY, ALIGN=2

                  had_ctrlc PROC
;;;92     
;;;93     int had_ctrlc (void)
000000  4801              LDR      r0,|L13.8|
;;;94     {
;;;95     	return my_env.sys_break;
000002  f9b00000          LDRSH    r0,[r0,#0]  ; my_env
;;;96     }
000006  4770              BX       lr
;;;97     
                          ENDP

                  |L13.8|
                          DCD      my_env

                          AREA ||i.handle_task||, CODE, READONLY, ALIGN=2

                  handle_task PROC
;;;411    /*命令行分析任务*/  
;;;412    void handle_task (void * pdata)
000000  b570              PUSH     {r4-r6,lr}
;;;413    {
000002  4604              MOV      r4,r0
;;;414    	INT8U state; 
;;;415    
;;;416    	if (run_command (pdata, 0) < 0)
000004  2100              MOVS     r1,#0
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       run_command
;;;417    	{
;;;418    		//my_println ("run_command exec failed");
;;;419    	}
;;;420    	set_ctrlc (1);
00000c  2001              MOVS     r0,#1
00000e  f7fffffe          BL       set_ctrlc
;;;421    	cmd ();
000012  a007              ADR      r0,|L14.48|
000014  f7fffffe          BL       __2printf
;;;422    	
;;;423    	my_env.tty = TTY_IDLE;		
000018  2000              MOVS     r0,#0
00001a  4908              LDR      r1,|L14.60|
00001c  8148              STRH     r0,[r1,#0xa]
;;;424    	state = OSTaskDel(OS_PRIO_SELF);		
00001e  20ff              MOVS     r0,#0xff
000020  f7fffffe          BL       OSTaskDel
000024  4605              MOV      r5,r0
;;;425    	if (state != OS_ERR_NONE)			
000026  b115              CBZ      r5,|L14.46|
;;;426    	{
;;;427    		my_println ("delete handle_task failed");
000028  a005              ADR      r0,|L14.64|
00002a  f7fffffe          BL       __2printf
                  |L14.46|
;;;428    	}	
;;;429    }
00002e  bd70              POP      {r4-r6,pc}
;;;430    
                          ENDP

                  |L14.48|
000030  4e69636b          DCB      "Nick-Cmd:",0
000034  2d436d64
000038  3a00    
00003a  00                DCB      0
00003b  00                DCB      0
                  |L14.60|
                          DCD      my_env
                  |L14.64|
000040  64656c65          DCB      "delete handle_task failed\n",0
000044  74652068
000048  616e646c
00004c  655f7461
000050  736b2066
000054  61696c65
000058  640a00  
00005b  00                DCB      0

                          AREA ||i.is_repeate||, CODE, READONLY, ALIGN=1

                  is_repeate PROC
;;;646    
;;;647    S16 is_repeate (S16 _coin_index)
000000  4601              MOV      r1,r0
;;;648    {
;;;649    
;;;650    	return 0;
000002  2000              MOVS     r0,#0
;;;651    }
000004  4770              BX       lr
;;;652    
                          ENDP


                          AREA ||i.parse_line||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  parse_line PROC
;;;104    
;;;105    int parse_line (char *line, char *argv[])
000000  b570              PUSH     {r4-r6,lr}
;;;106    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;107    	int nargs = 0;
000006  2500              MOVS     r5,#0
;;;108    
;;;109    #ifdef DEBUG_PARSER
;;;110    	printf ("parse_line: \"%s\"\n", line);
;;;111    #endif
;;;112    	while (nargs < CONFIG_SYS_MAXARGS) {
000008  e026              B        |L16.88|
                  |L16.10|
;;;113    
;;;114    		/* skip any white space */
;;;115    		while ((*line == ' ') || (*line == '\t')) {
00000a  e000              B        |L16.14|
                  |L16.12|
;;;116    			++line;
00000c  1c64              ADDS     r4,r4,#1
                  |L16.14|
00000e  7820              LDRB     r0,[r4,#0]            ;115
000010  2820              CMP      r0,#0x20              ;115
000012  d0fb              BEQ      |L16.12|
000014  7820              LDRB     r0,[r4,#0]            ;115
000016  2809              CMP      r0,#9                 ;115
000018  d0f8              BEQ      |L16.12|
;;;117    		}
;;;118    
;;;119    		if (*line == '\0') {	/* end of line, no more args	*/
00001a  7820              LDRB     r0,[r4,#0]
00001c  b920              CBNZ     r0,|L16.40|
;;;120    			argv[nargs] = NULL;
00001e  2000              MOVS     r0,#0
000020  f8460025          STR      r0,[r6,r5,LSL #2]
;;;121    #ifdef DEBUG_PARSER
;;;122    		printf ("parse_line: nargs=%d\n", nargs);
;;;123    #endif
;;;124    			return (nargs);
000024  4628              MOV      r0,r5
                  |L16.38|
;;;125    		}
;;;126    
;;;127    		argv[nargs++] = line;	/* begin of argument string	*/
;;;128    
;;;129    		/* find end of string */
;;;130    		while (*line && (*line != ' ') && (*line != '\t')) {
;;;131    			++line;
;;;132    		}
;;;133    
;;;134    		if (*line == '\0') {	/* end of line, no more args	*/
;;;135    			argv[nargs] = NULL;
;;;136    #ifdef DEBUG_PARSER
;;;137    		printf ("parse_line: nargs=%d\n", nargs);
;;;138    #endif
;;;139    			return (nargs);
;;;140    		}
;;;141    
;;;142    		*line++ = '\0';		/* terminate current arg	 */
;;;143    	}
;;;144    
;;;145    	printf ("** Too many args (max. %d) **\n", CONFIG_SYS_MAXARGS);
;;;146    
;;;147    #ifdef DEBUG_PARSER
;;;148    	printf ("parse_line: nargs=%d\n", nargs);
;;;149    #endif
;;;150    	return (nargs);
;;;151    }
000026  bd70              POP      {r4-r6,pc}
                  |L16.40|
000028  4628              MOV      r0,r5                 ;127
00002a  1c6d              ADDS     r5,r5,#1              ;127
00002c  f8464020          STR      r4,[r6,r0,LSL #2]     ;127
000030  e000              B        |L16.52|
                  |L16.50|
000032  1c64              ADDS     r4,r4,#1              ;131
                  |L16.52|
000034  7820              LDRB     r0,[r4,#0]            ;130
000036  b128              CBZ      r0,|L16.68|
000038  7820              LDRB     r0,[r4,#0]            ;130
00003a  2820              CMP      r0,#0x20              ;130
00003c  d002              BEQ      |L16.68|
00003e  7820              LDRB     r0,[r4,#0]            ;130
000040  2809              CMP      r0,#9                 ;130
000042  d1f6              BNE      |L16.50|
                  |L16.68|
000044  7820              LDRB     r0,[r4,#0]            ;134
000046  b920              CBNZ     r0,|L16.82|
000048  2000              MOVS     r0,#0                 ;135
00004a  f8460025          STR      r0,[r6,r5,LSL #2]     ;135
00004e  4628              MOV      r0,r5                 ;139
000050  e7e9              B        |L16.38|
                  |L16.82|
000052  2000              MOVS     r0,#0                 ;142
000054  f8040b01          STRB     r0,[r4],#1            ;142
                  |L16.88|
000058  2d10              CMP      r5,#0x10              ;112
00005a  dbd6              BLT      |L16.10|
00005c  2110              MOVS     r1,#0x10              ;145
00005e  a002              ADR      r0,|L16.104|
000060  f7fffffe          BL       __2printf
000064  4628              MOV      r0,r5                 ;150
000066  e7de              B        |L16.38|
;;;152    /****************************************************************************/
                          ENDP

                  |L16.104|
000068  2a2a2054          DCB      "** Too many args (max. %d) **\n",0
00006c  6f6f206d
000070  616e7920
000074  61726773
000078  20286d61
00007c  782e2025
000080  6429202a
000084  2a0a00  
000087  00                DCB      0

                          AREA ||i.print_count||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  print_count PROC
;;;495    
;;;496    void print_count (void)
000000  b510              PUSH     {r4,lr}
;;;497    {
;;;498    	U16 i;
;;;499    	clear_ctrlc();		/* forget any previous Control C */
000002  f7fffffe          BL       clear_ctrlc
;;;500    	
;;;501    	my_println ("------------------------------------------");
000006  a021              ADR      r0,|L17.140|
000008  f7fffffe          BL       __2printf
;;;502    	my_println ("-----------live count value---------------");
00000c  a02a              ADR      r0,|L17.184|
00000e  f7fffffe          BL       __2printf
;;;503    	my_println ("------------------------------------------");
000012  a01e              ADR      r0,|L17.140|
000014  f7fffffe          BL       __2printf
;;;504    	my_env.roll_count = 0;
000018  2000              MOVS     r0,#0
00001a  4932              LDR      r1,|L17.228|
00001c  8048              STRH     r0,[r1,#2]
;;;505    	while (1)
00001e  e02e              B        |L17.126|
                  |L17.32|
;;;506    	{
;;;507    		Rollback ();
000020  f7fffffe          BL       Rollback
;;;508    		for(i=0;i<12;i++)
000024  2400              MOVS     r4,#0
000026  e016              B        |L17.86|
                  |L17.40|
;;;509    		{
;;;510    			my_print ("%02d:%05d  ", i, g_counter.ch[i].cur_count);
000028  eb041004          ADD      r0,r4,r4,LSL #4
00002c  492e              LDR      r1,|L17.232|
00002e  eb010040          ADD      r0,r1,r0,LSL #1
000032  89c2              LDRH     r2,[r0,#0xe]
000034  4621              MOV      r1,r4
000036  a02d              ADR      r0,|L17.236|
000038  f7fffffe          BL       __2printf
;;;511    			if ((i + 1) % 4 == 0)
00003c  1c60              ADDS     r0,r4,#1
00003e  17c1              ASRS     r1,r0,#31
000040  eb007191          ADD      r1,r0,r1,LSR #30
000044  1089              ASRS     r1,r1,#2
000046  eba00181          SUB      r1,r0,r1,LSL #2
00004a  b911              CBNZ     r1,|L17.82|
;;;512    				my_println ();
00004c  a02a              ADR      r0,|L17.248|
00004e  f7fffffe          BL       __2printf
                  |L17.82|
000052  1c60              ADDS     r0,r4,#1              ;508
000054  b284              UXTH     r4,r0                 ;508
                  |L17.86|
000056  2c0c              CMP      r4,#0xc               ;508
000058  dbe6              BLT      |L17.40|
;;;513    		}
;;;514    		my_println ("------------------------------------------");
00005a  a00c              ADR      r0,|L17.140|
00005c  f7fffffe          BL       __2printf
;;;515    		my_println (" CPU Usage: %02d%%",OSCPUUsage);  
000060  4826              LDR      r0,|L17.252|
000062  7801              LDRB     r1,[r0,#0]  ; OSCPUUsage
000064  a026              ADR      r0,|L17.256|
000066  f7fffffe          BL       __2printf
;;;516    		my_println ("------------------------------------------");
00006a  a008              ADR      r0,|L17.140|
00006c  f7fffffe          BL       __2printf
;;;517    		delay_ms(200);
000070  20c8              MOVS     r0,#0xc8
000072  f7fffffe          BL       delay_ms
;;;518    		
;;;519    		if (had_ctrlc ())
000076  f7fffffe          BL       had_ctrlc
00007a  b100              CBZ      r0,|L17.126|
;;;520    			break;
00007c  e000              B        |L17.128|
                  |L17.126|
00007e  e7cf              B        |L17.32|
                  |L17.128|
000080  bf00              NOP      
;;;521    	}
;;;522    	my_println ();
000082  a01d              ADR      r0,|L17.248|
000084  f7fffffe          BL       __2printf
;;;523    }
000088  bd10              POP      {r4,pc}
;;;524    
                          ENDP

00008a  0000              DCW      0x0000
                  |L17.140|
00008c  2d2d2d2d          DCB      "------------------------------------------\n",0
000090  2d2d2d2d
000094  2d2d2d2d
000098  2d2d2d2d
00009c  2d2d2d2d
0000a0  2d2d2d2d
0000a4  2d2d2d2d
0000a8  2d2d2d2d
0000ac  2d2d2d2d
0000b0  2d2d2d2d
0000b4  2d2d0a00
                  |L17.184|
0000b8  2d2d2d2d          DCB      "-----------live count value---------------\n",0
0000bc  2d2d2d2d
0000c0  2d2d2d6c
0000c4  69766520
0000c8  636f756e
0000cc  74207661
0000d0  6c75652d
0000d4  2d2d2d2d
0000d8  2d2d2d2d
0000dc  2d2d2d2d
0000e0  2d2d0a00
                  |L17.228|
                          DCD      my_env
                  |L17.232|
                          DCD      g_counter
                  |L17.236|
0000ec  25303264          DCB      "%02d:%05d  ",0
0000f0  3a253035
0000f4  64202000
                  |L17.248|
0000f8  0a00              DCB      "\n",0
0000fa  00                DCB      0
0000fb  00                DCB      0
                  |L17.252|
                          DCD      OSCPUUsage
                  |L17.256|
000100  20435055          DCB      " CPU Usage: %02d%%\n",0
000104  20557361
000108  67653a20
00010c  25303264
000110  25250a00

                          AREA ||i.print_da_all||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  print_da_all PROC
;;;464    
;;;465    void print_da_all (void)
000000  b510              PUSH     {r4,lr}
;;;466    {
;;;467    	#define DA_ALL_ROLL_N 6
;;;468    	u16 i;
;;;469    	
;;;470    	clear_ctrlc();		/* forget any previous Control C */
000002  f7fffffe          BL       clear_ctrlc
;;;471    	my_println ("------------------------------------------");
000006  a020              ADR      r0,|L18.136|
000008  f7fffffe          BL       __2printf
;;;472    	my_println ("-------------live all da value------------");
00000c  a029              ADR      r0,|L18.180|
00000e  f7fffffe          BL       __2printf
;;;473    	my_println ("------------------------------------------");
000012  a01d              ADR      r0,|L18.136|
000014  f7fffffe          BL       __2printf
;;;474    	my_env.roll_count = 0;
000018  2000              MOVS     r0,#0
00001a  4931              LDR      r1,|L18.224|
00001c  8048              STRH     r0,[r1,#2]
;;;475    	while (1)
00001e  e02c              B        |L18.122|
                  |L18.32|
;;;476    	{
;;;477    		Rollback ();
000020  f7fffffe          BL       Rollback
;;;478    		for(i=0;i<12;i++)
000024  2400              MOVS     r4,#0
000026  e013              B        |L18.80|
                  |L18.40|
;;;479    		{
;;;480    			//value[i]= GetVolt(After_filter[i]);
;;;481    			my_print ("%02d:%05d  ", i, After_filter[i]);
000028  482e              LDR      r0,|L18.228|
00002a  f8302014          LDRH     r2,[r0,r4,LSL #1]
00002e  4621              MOV      r1,r4
000030  a02d              ADR      r0,|L18.232|
000032  f7fffffe          BL       __2printf
;;;482    			if ((i + 1) % 4 == 0)
000036  1c60              ADDS     r0,r4,#1
000038  17c1              ASRS     r1,r0,#31
00003a  eb007191          ADD      r1,r0,r1,LSR #30
00003e  1089              ASRS     r1,r1,#2
000040  eba00181          SUB      r1,r0,r1,LSL #2
000044  b911              CBNZ     r1,|L18.76|
;;;483    				my_println ();
000046  a02b              ADR      r0,|L18.244|
000048  f7fffffe          BL       __2printf
                  |L18.76|
00004c  1c60              ADDS     r0,r4,#1              ;478
00004e  b284              UXTH     r4,r0                 ;478
                  |L18.80|
000050  2c0c              CMP      r4,#0xc               ;478
000052  dbe9              BLT      |L18.40|
;;;484    		}
;;;485    		my_println ("------------------------------------------");
000054  a00c              ADR      r0,|L18.136|
000056  f7fffffe          BL       __2printf
;;;486    		my_println (" CPU Usage: %02d%%",OSCPUUsage);  
00005a  4827              LDR      r0,|L18.248|
00005c  7801              LDRB     r1,[r0,#0]  ; OSCPUUsage
00005e  a027              ADR      r0,|L18.252|
000060  f7fffffe          BL       __2printf
;;;487    		my_println ("------------------------------------------");
000064  a008              ADR      r0,|L18.136|
000066  f7fffffe          BL       __2printf
;;;488    		delay_ms(500);
00006a  f44f70fa          MOV      r0,#0x1f4
00006e  f7fffffe          BL       delay_ms
;;;489    		
;;;490    		if (had_ctrlc ())
000072  f7fffffe          BL       had_ctrlc
000076  b100              CBZ      r0,|L18.122|
;;;491    			break;
000078  e000              B        |L18.124|
                  |L18.122|
00007a  e7d1              B        |L18.32|
                  |L18.124|
00007c  bf00              NOP      
;;;492    	}
;;;493    	my_println ();
00007e  a01d              ADR      r0,|L18.244|
000080  f7fffffe          BL       __2printf
;;;494    }
000084  bd10              POP      {r4,pc}
;;;495    
                          ENDP

000086  0000              DCW      0x0000
                  |L18.136|
000088  2d2d2d2d          DCB      "------------------------------------------\n",0
00008c  2d2d2d2d
000090  2d2d2d2d
000094  2d2d2d2d
000098  2d2d2d2d
00009c  2d2d2d2d
0000a0  2d2d2d2d
0000a4  2d2d2d2d
0000a8  2d2d2d2d
0000ac  2d2d2d2d
0000b0  2d2d0a00
                  |L18.180|
0000b4  2d2d2d2d          DCB      "-------------live all da value------------\n",0
0000b8  2d2d2d2d
0000bc  2d2d2d2d
0000c0  2d6c6976
0000c4  6520616c
0000c8  6c206461
0000cc  2076616c
0000d0  75652d2d
0000d4  2d2d2d2d
0000d8  2d2d2d2d
0000dc  2d2d0a00
                  |L18.224|
                          DCD      my_env
                  |L18.228|
                          DCD      After_filter
                  |L18.232|
0000e8  25303264          DCB      "%02d:%05d  ",0
0000ec  3a253035
0000f0  64202000
                  |L18.244|
0000f4  0a00              DCB      "\n",0
0000f6  00                DCB      0
0000f7  00                DCB      0
                  |L18.248|
                          DCD      OSCPUUsage
                  |L18.252|
0000fc  20435055          DCB      " CPU Usage: %02d%%\n",0
000100  20557361
000104  67653a20
000108  25303264
00010c  25250a00

                          AREA ||i.print_step||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  print_step PROC
;;;524    
;;;525    void print_step (void)
000000  b510              PUSH     {r4,lr}
;;;526    {
;;;527    	U16 i;
;;;528    	clear_ctrlc();		/* forget any previous Control C */
000002  f7fffffe          BL       clear_ctrlc
;;;529    	
;;;530    	my_println ("------------------------------------------");
000006  a021              ADR      r0,|L19.140|
000008  f7fffffe          BL       __2printf
;;;531    	my_println ("---------live process_step value----------");
00000c  a02a              ADR      r0,|L19.184|
00000e  f7fffffe          BL       __2printf
;;;532    	my_println ("------------------------------------------");
000012  a01e              ADR      r0,|L19.140|
000014  f7fffffe          BL       __2printf
;;;533    	my_env.roll_count = 0;
000018  2000              MOVS     r0,#0
00001a  4932              LDR      r1,|L19.228|
00001c  8048              STRH     r0,[r1,#2]
;;;534    	while (1)
00001e  e02e              B        |L19.126|
                  |L19.32|
;;;535    	{
;;;536    		Rollback ();
000020  f7fffffe          BL       Rollback
;;;537    		for(i=0;i<12;i++)
000024  2400              MOVS     r4,#0
000026  e015              B        |L19.84|
                  |L19.40|
;;;538    		{
;;;539    			my_print ("%02d:%05d  ", i, g_counter.ch[i].process_step);
000028  eb041004          ADD      r0,r4,r4,LSL #4
00002c  492e              LDR      r1,|L19.232|
00002e  f8312010          LDRH     r2,[r1,r0,LSL #1]
000032  4621              MOV      r1,r4
000034  a02d              ADR      r0,|L19.236|
000036  f7fffffe          BL       __2printf
;;;540    			if ((i + 1) % 4 == 0)
00003a  1c60              ADDS     r0,r4,#1
00003c  17c1              ASRS     r1,r0,#31
00003e  eb007191          ADD      r1,r0,r1,LSR #30
000042  1089              ASRS     r1,r1,#2
000044  eba00181          SUB      r1,r0,r1,LSL #2
000048  b911              CBNZ     r1,|L19.80|
;;;541    				my_println ();
00004a  a02b              ADR      r0,|L19.248|
00004c  f7fffffe          BL       __2printf
                  |L19.80|
000050  1c60              ADDS     r0,r4,#1              ;537
000052  b284              UXTH     r4,r0                 ;537
                  |L19.84|
000054  2c0c              CMP      r4,#0xc               ;537
000056  dbe7              BLT      |L19.40|
;;;542    		}
;;;543    		my_println ("------------------------------------------");
000058  a00c              ADR      r0,|L19.140|
00005a  f7fffffe          BL       __2printf
;;;544    		my_println (" CPU Usage: %02d%%",OSCPUUsage);  
00005e  4827              LDR      r0,|L19.252|
000060  7801              LDRB     r1,[r0,#0]  ; OSCPUUsage
000062  a027              ADR      r0,|L19.256|
000064  f7fffffe          BL       __2printf
;;;545    		my_println ("------------------------------------------");
000068  a008              ADR      r0,|L19.140|
00006a  f7fffffe          BL       __2printf
;;;546    		delay_ms(500);
00006e  f44f70fa          MOV      r0,#0x1f4
000072  f7fffffe          BL       delay_ms
;;;547    		
;;;548    		if (had_ctrlc ())
000076  f7fffffe          BL       had_ctrlc
00007a  b100              CBZ      r0,|L19.126|
;;;549    			break;
00007c  e000              B        |L19.128|
                  |L19.126|
00007e  e7cf              B        |L19.32|
                  |L19.128|
000080  bf00              NOP      
;;;550    	}
;;;551    	my_println ();
000082  a01d              ADR      r0,|L19.248|
000084  f7fffffe          BL       __2printf
;;;552    }
000088  bd10              POP      {r4,pc}
;;;553    
                          ENDP

00008a  0000              DCW      0x0000
                  |L19.140|
00008c  2d2d2d2d          DCB      "------------------------------------------\n",0
000090  2d2d2d2d
000094  2d2d2d2d
000098  2d2d2d2d
00009c  2d2d2d2d
0000a0  2d2d2d2d
0000a4  2d2d2d2d
0000a8  2d2d2d2d
0000ac  2d2d2d2d
0000b0  2d2d2d2d
0000b4  2d2d0a00
                  |L19.184|
0000b8  2d2d2d2d          DCB      "---------live process_step value----------\n",0
0000bc  2d2d2d2d
0000c0  2d6c6976
0000c4  65207072
0000c8  6f636573
0000cc  735f7374
0000d0  65702076
0000d4  616c7565
0000d8  2d2d2d2d
0000dc  2d2d2d2d
0000e0  2d2d0a00
                  |L19.228|
                          DCD      my_env
                  |L19.232|
                          DCD      g_counter
                  |L19.236|
0000ec  25303264          DCB      "%02d:%05d  ",0
0000f0  3a253035
0000f4  64202000
                  |L19.248|
0000f8  0a00              DCB      "\n",0
0000fa  00                DCB      0
0000fb  00                DCB      0
                  |L19.252|
                          DCD      OSCPUUsage
                  |L19.256|
000100  20435055          DCB      " CPU Usage: %02d%%\n",0
000104  20557361
000108  67653a20
00010c  25303264
000110  25250a00

                          AREA ||i.print_system_env_info||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  print_system_env_info PROC
;;;442    }
;;;443    void print_system_env_info (void) 
000000  b510              PUSH     {r4,lr}
;;;444    {                  
;;;445    	my_println("----------------------------------------------------");        
000002  a016              ADR      r0,|L20.92|
000004  f7fffffe          BL       __2printf
;;;446    	my_println("              Compile Time Info                     ");     
000008  a022              ADR      r0,|L20.148|
00000a  f7fffffe          BL       __2printf
;;;447    	my_println("              %s %s                    ", __DATE__, __TIME__);                                                                          
00000e  a22f              ADR      r2,|L20.204|
000010  a131              ADR      r1,|L20.216|
000012  a034              ADR      r0,|L20.228|
000014  f7fffffe          BL       __2printf
;;;448    	my_println("----------------print system env info---------------");        
000018  a03d              ADR      r0,|L20.272|
00001a  f7fffffe          BL       __2printf
;;;449    	my_println ("sys_break        = %d", my_env.sys_break);             
00001e  484a              LDR      r0,|L20.328|
000020  f9b01000          LDRSH    r1,[r0,#0]  ; my_env
000024  a049              ADR      r0,|L20.332|
000026  f7fffffe          BL       __2printf
;;;450    	my_println ("watch_ch         = %d", my_env.watch_ch);                    
00002a  4847              LDR      r0,|L20.328|
00002c  8881              LDRH     r1,[r0,#4]  ; my_env
00002e  a04d              ADR      r0,|L20.356|
000030  f7fffffe          BL       __2printf
;;;451    	my_println ("roll_count       = %d", my_env.roll_count);               
000034  4844              LDR      r0,|L20.328|
000036  8841              LDRH     r1,[r0,#2]  ; my_env
000038  a050              ADR      r0,|L20.380|
00003a  f7fffffe          BL       __2printf
;;;452    	my_println ("print            = %d", my_env.print);             
00003e  4842              LDR      r0,|L20.328|
000040  8901              LDRH     r1,[r0,#8]  ; my_env
000042  a054              ADR      r0,|L20.404|
000044  f7fffffe          BL       __2printf
;;;453    //	my_println ("save_good_data   = %d", my_env.save_good_data);              
;;;454    //	my_println ("coin_index       = %d", my_env.coin_index);            
;;;455    //	my_println ("country_index    = %d", my_env.country_index);        
;;;456    //	my_println ("workstep         = %d", my_env.workstep);            
;;;457    //	my_println ("pre_workstep     = %d", my_env.pre_workstep);         
;;;458    	my_println ("uart0_cmd_flag   = %d", my_env.uart0_cmd_flag);       
000048  483f              LDR      r0,|L20.328|
00004a  f9b0100c          LDRSH    r1,[r0,#0xc]  ; my_env
00004e  a057              ADR      r0,|L20.428|
000050  f7fffffe          BL       __2printf
;;;459    //	my_println("----------------------------------------------------");       
;;;460    //	my_println ("kick_start_delay_time = %d", para_set_value.data.kick_start_delay_time);         
;;;461    //	my_println ("kick_keep_time        = %d", para_set_value.data.kick_keep_time);             
;;;462    	my_println("----------------------------------------------------");        
000054  a001              ADR      r0,|L20.92|
000056  f7fffffe          BL       __2printf
;;;463    }  
00005a  bd10              POP      {r4,pc}
;;;464    
                          ENDP

                  |L20.92|
00005c  2d2d2d2d          DCB      "----------------------------------------------------\n",0
000060  2d2d2d2d
000064  2d2d2d2d
000068  2d2d2d2d
00006c  2d2d2d2d
000070  2d2d2d2d
000074  2d2d2d2d
000078  2d2d2d2d
00007c  2d2d2d2d
000080  2d2d2d2d
000084  2d2d2d2d
000088  2d2d2d2d
00008c  2d2d2d2d
000090  0a00    
000092  00                DCB      0
000093  00                DCB      0
                  |L20.148|
000094  20202020          DCB      "              Compile Time Info                     \n",0
000098  20202020
00009c  20202020
0000a0  2020436f
0000a4  6d70696c
0000a8  65205469
0000ac  6d652049
0000b0  6e666f20
0000b4  20202020
0000b8  20202020
0000bc  20202020
0000c0  20202020
0000c4  20202020
0000c8  0a00    
0000ca  00                DCB      0
0000cb  00                DCB      0
                  |L20.204|
0000cc  31363a34          DCB      "16:46:14",0
0000d0  363a3134
0000d4  00      
0000d5  00                DCB      0
0000d6  00                DCB      0
0000d7  00                DCB      0
                  |L20.216|
0000d8  4a756c20          DCB      "Jul 18 2017",0
0000dc  31382032
0000e0  30313700
                  |L20.228|
0000e4  20202020          DCB      "              %s %s                    \n",0
0000e8  20202020
0000ec  20202020
0000f0  20202573
0000f4  20257320
0000f8  20202020
0000fc  20202020
000100  20202020
000104  20202020
000108  2020200a
00010c  00      
00010d  00                DCB      0
00010e  00                DCB      0
00010f  00                DCB      0
                  |L20.272|
000110  2d2d2d2d          DCB      "----------------print system env info---------------\n",0
000114  2d2d2d2d
000118  2d2d2d2d
00011c  2d2d2d2d
000120  7072696e
000124  74207379
000128  7374656d
00012c  20656e76
000130  20696e66
000134  6f2d2d2d
000138  2d2d2d2d
00013c  2d2d2d2d
000140  2d2d2d2d
000144  0a00    
000146  00                DCB      0
000147  00                DCB      0
                  |L20.328|
                          DCD      my_env
                  |L20.332|
00014c  7379735f          DCB      "sys_break        = %d\n",0
000150  62726561
000154  6b202020
000158  20202020
00015c  203d2025
000160  640a00  
000163  00                DCB      0
                  |L20.356|
000164  77617463          DCB      "watch_ch         = %d\n",0
000168  685f6368
00016c  20202020
000170  20202020
000174  203d2025
000178  640a00  
00017b  00                DCB      0
                  |L20.380|
00017c  726f6c6c          DCB      "roll_count       = %d\n",0
000180  5f636f75
000184  6e742020
000188  20202020
00018c  203d2025
000190  640a00  
000193  00                DCB      0
                  |L20.404|
000194  7072696e          DCB      "print            = %d\n",0
000198  74202020
00019c  20202020
0001a0  20202020
0001a4  203d2025
0001a8  640a00  
0001ab  00                DCB      0
                  |L20.428|
0001ac  75617274          DCB      "uart0_cmd_flag   = %d\n",0
0001b0  305f636d
0001b4  645f666c
0001b8  61672020
0001bc  203d2025
0001c0  640a00  
0001c3  00                DCB      0

                          AREA ||i.process_macros||, CODE, READONLY, ALIGN=1

                  process_macros PROC
;;;153    
;;;154    static void process_macros (const char *input, char *output)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;155    {
000004  b093              SUB      sp,sp,#0x4c
000006  4607              MOV      r7,r0
000008  460c              MOV      r4,r1
;;;156    	char c, prev;
;;;157    	const char *varname_start = NULL;
00000a  2000              MOVS     r0,#0
00000c  9012              STR      r0,[sp,#0x48]
;;;158    	int inputcnt = strlen (input);
00000e  4638              MOV      r0,r7
000010  f7fffffe          BL       strlen
000014  9011              STR      r0,[sp,#0x44]
;;;159    	int outputcnt = CONFIG_SYS_CBSIZE;
000016  2640              MOVS     r6,#0x40
;;;160    	int state = 0;		/* 0 = waiting for '$'  */
000018  f04f0b00          MOV      r11,#0
;;;161    
;;;162    	/* 1 = waiting for '(' or '{' */
;;;163    	/* 2 = waiting for ')' or '}' */
;;;164    	/* 3 = waiting for '''  */
;;;165    #ifdef DEBUG_PARSER
;;;166    	char *output_start = output;
;;;167    
;;;168    	printf ("[PROCESS_MACROS] INPUT len %d: \"%s\"\n", strlen (input),
;;;169    		input);
;;;170    #endif
;;;171    
;;;172    	prev = '\0';		/* previous character   */
00001c  f04f0a00          MOV      r10,#0
;;;173    
;;;174    	while (inputcnt && outputcnt) {
000020  e086              B        |L21.304|
                  |L21.34|
;;;175    		c = *input++;
000022  f8175b01          LDRB     r5,[r7],#1
;;;176    		inputcnt--;
000026  9811              LDR      r0,[sp,#0x44]
000028  1e40              SUBS     r0,r0,#1
00002a  9011              STR      r0,[sp,#0x44]
;;;177    
;;;178    		if (state != 3) {
00002c  f1bb0f03          CMP      r11,#3
000030  d00c              BEQ      |L21.76|
;;;179    			/* remove one level of escape characters */
;;;180    			if ((c == '\\') && (prev != '\\')) {
000032  2d5c              CMP      r5,#0x5c
000034  d10a              BNE      |L21.76|
000036  f1ba0f5c          CMP      r10,#0x5c
00003a  d007              BEQ      |L21.76|
;;;181    				if (inputcnt-- == 0)
00003c  9811              LDR      r0,[sp,#0x44]
00003e  1e41              SUBS     r1,r0,#1
000040  9111              STR      r1,[sp,#0x44]
000042  b900              CBNZ     r0,|L21.70|
;;;182    					break;
000044  e079              B        |L21.314|
                  |L21.70|
;;;183    				prev = c;
000046  46aa              MOV      r10,r5
;;;184    				c = *input++;
000048  f8175b01          LDRB     r5,[r7],#1
                  |L21.76|
;;;185    			}
;;;186    		}
;;;187    
;;;188    		switch (state) {
00004c  f1bb0f00          CMP      r11,#0
000050  d009              BEQ      |L21.102|
000052  f1bb0f01          CMP      r11,#1
000056  d01a              BEQ      |L21.142|
000058  f1bb0f02          CMP      r11,#2
00005c  d02a              BEQ      |L21.180|
00005e  f1bb0f03          CMP      r11,#3
000062  d163              BNE      |L21.300|
000064  e056              B        |L21.276|
                  |L21.102|
;;;189    		case 0:	/* Waiting for (unescaped) $    */
;;;190    			if ((c == '\'') && (prev != '\\')) {
000066  2d27              CMP      r5,#0x27
000068  d105              BNE      |L21.118|
00006a  f1ba0f5c          CMP      r10,#0x5c
00006e  d002              BEQ      |L21.118|
;;;191    				state = 3;
000070  f04f0b03          MOV      r11,#3
;;;192    				break;
000074  e05a              B        |L21.300|
                  |L21.118|
;;;193    			}
;;;194    			if ((c == '$') && (prev != '\\')) {
000076  2d24              CMP      r5,#0x24
000078  d105              BNE      |L21.134|
00007a  f1ba0f5c          CMP      r10,#0x5c
00007e  d002              BEQ      |L21.134|
;;;195    				state++;
000080  f10b0b01          ADD      r11,r11,#1
000084  e002              B        |L21.140|
                  |L21.134|
;;;196    			} else {
;;;197    				*(output++) = c;
000086  f8045b01          STRB     r5,[r4],#1
;;;198    				outputcnt--;
00008a  1e76              SUBS     r6,r6,#1
                  |L21.140|
;;;199    			}
;;;200    			break;
00008c  e04e              B        |L21.300|
                  |L21.142|
;;;201    		case 1:	/* Waiting for (        */
;;;202    			if (c == '(' || c == '{') {
00008e  2d28              CMP      r5,#0x28
000090  d001              BEQ      |L21.150|
000092  2d7b              CMP      r5,#0x7b
000094  d103              BNE      |L21.158|
                  |L21.150|
;;;203    				state++;
000096  f10b0b01          ADD      r11,r11,#1
;;;204    				varname_start = input;
00009a  9712              STR      r7,[sp,#0x48]
00009c  e009              B        |L21.178|
                  |L21.158|
;;;205    			} else {
;;;206    				state = 0;
00009e  f04f0b00          MOV      r11,#0
;;;207    				*(output++) = '$';
0000a2  2024              MOVS     r0,#0x24
0000a4  f8040b01          STRB     r0,[r4],#1
;;;208    				outputcnt--;
0000a8  1e76              SUBS     r6,r6,#1
;;;209    
;;;210    				if (outputcnt) {
0000aa  b116              CBZ      r6,|L21.178|
;;;211    					*(output++) = c;
0000ac  f8045b01          STRB     r5,[r4],#1
;;;212    					outputcnt--;
0000b0  1e76              SUBS     r6,r6,#1
                  |L21.178|
;;;213    				}
;;;214    			}
;;;215    			break;
0000b2  e03b              B        |L21.300|
                  |L21.180|
;;;216    		case 2:	/* Waiting for )        */
;;;217    			if (c == ')' || c == '}') {
0000b4  2d29              CMP      r5,#0x29
0000b6  d001              BEQ      |L21.188|
0000b8  2d7d              CMP      r5,#0x7d
0000ba  d12a              BNE      |L21.274|
                  |L21.188|
;;;218    				int i;
;;;219    				char envname[CONFIG_SYS_CBSIZE], *envval;
;;;220    				int envcnt = input - varname_start - 1;	/* Varname # of chars */
0000bc  9812              LDR      r0,[sp,#0x48]
0000be  1a38              SUBS     r0,r7,r0
0000c0  1e40              SUBS     r0,r0,#1
0000c2  9000              STR      r0,[sp,#0]
;;;221    
;;;222    				/* Get the varname */
;;;223    				for (i = 0; i < envcnt; i++) {
0000c4  f04f0900          MOV      r9,#0
0000c8  e007              B        |L21.218|
                  |L21.202|
;;;224    					envname[i] = varname_start[i];
0000ca  9812              LDR      r0,[sp,#0x48]
0000cc  f8100009          LDRB     r0,[r0,r9]
0000d0  a901              ADD      r1,sp,#4
0000d2  f8010009          STRB     r0,[r1,r9]
0000d6  f1090901          ADD      r9,r9,#1              ;223
                  |L21.218|
0000da  9800              LDR      r0,[sp,#0]            ;223
0000dc  4581              CMP      r9,r0                 ;223
0000de  dbf4              BLT      |L21.202|
;;;225    				}
;;;226    				envname[i] = 0;
0000e0  2000              MOVS     r0,#0
0000e2  a901              ADD      r1,sp,#4
0000e4  f8010009          STRB     r0,[r1,r9]
;;;227    
;;;228    				/* Get its value */
;;;229    				envval = getenv (envname);
0000e8  a801              ADD      r0,sp,#4
0000ea  f7fffffe          BL       getenv
0000ee  4680              MOV      r8,r0
;;;230    
;;;231    				/* Copy into the line if it exists */
;;;232    				if (envval != NULL)
0000f0  f1b80f00          CMP      r8,#0
0000f4  d00a              BEQ      |L21.268|
;;;233    					while ((*envval) && outputcnt) {
0000f6  e004              B        |L21.258|
                  |L21.248|
;;;234    						*(output++) = *(envval++);
0000f8  f8180b01          LDRB     r0,[r8],#1
0000fc  f8040b01          STRB     r0,[r4],#1
;;;235    						outputcnt--;
000100  1e76              SUBS     r6,r6,#1
                  |L21.258|
000102  f8980000          LDRB     r0,[r8,#0]            ;233
000106  b108              CBZ      r0,|L21.268|
000108  2e00              CMP      r6,#0                 ;233
00010a  d1f5              BNE      |L21.248|
                  |L21.268|
;;;236    					}
;;;237    				/* Look for another '$' */
;;;238    				state = 0;
00010c  f04f0b00          MOV      r11,#0
;;;239    			}
000110  bf00              NOP      
                  |L21.274|
;;;240    			break;
000112  e00b              B        |L21.300|
                  |L21.276|
;;;241    		case 3:	/* Waiting for '        */
;;;242    			if ((c == '\'') && (prev != '\\')) {
000114  2d27              CMP      r5,#0x27
000116  d105              BNE      |L21.292|
000118  f1ba0f5c          CMP      r10,#0x5c
00011c  d002              BEQ      |L21.292|
;;;243    				state = 0;
00011e  f04f0b00          MOV      r11,#0
000122  e002              B        |L21.298|
                  |L21.292|
;;;244    			} else {
;;;245    				*(output++) = c;
000124  f8045b01          STRB     r5,[r4],#1
;;;246    				outputcnt--;
000128  1e76              SUBS     r6,r6,#1
                  |L21.298|
;;;247    			}
;;;248    			break;
00012a  bf00              NOP      
                  |L21.300|
00012c  bf00              NOP                            ;192
;;;249    		}
;;;250    		prev = c;
00012e  46aa              MOV      r10,r5
                  |L21.304|
000130  9811              LDR      r0,[sp,#0x44]         ;174
000132  b110              CBZ      r0,|L21.314|
000134  2e00              CMP      r6,#0                 ;174
000136  f47faf74          BNE      |L21.34|
                  |L21.314|
00013a  bf00              NOP                            ;182
;;;251    	}
;;;252    
;;;253    	if (outputcnt)
00013c  b116              CBZ      r6,|L21.324|
;;;254    		*output = 0;
00013e  2000              MOVS     r0,#0
000140  7020              STRB     r0,[r4,#0]
000142  e002              B        |L21.330|
                  |L21.324|
;;;255    	else
;;;256    		*(output - 1) = 0;
000144  2000              MOVS     r0,#0
000146  f8040c01          STRB     r0,[r4,#-1]
                  |L21.330|
;;;257    
;;;258    #ifdef DEBUG_PARSER
;;;259    	printf ("[PROCESS_MACROS] OUTPUT len %d: \"%s\"\n",
;;;260    		strlen (output_start), output_start);
;;;261    #endif
;;;262    }
00014a  b013              ADD      sp,sp,#0x4c
00014c  e8bd8ff0          POP      {r4-r11,pc}
;;;263    
                          ENDP


                          AREA ||i.run_command||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  run_command PROC
;;;279     */
;;;280    int run_command (const char *cmd, int flag)
000000  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
;;;281    {
000004  b0b3              SUB      sp,sp,#0xcc
000006  4606              MOV      r6,r0
;;;282    	cmd_tbl_t *cmdtp;
;;;283    	char cmdbuf[CFG_CBSIZE];	/* working copy of cmd		*/
;;;284    	char *token;			/* start of token in cmdbuf	*/
;;;285    	char *sep;			/* end of token (separator) in cmdbuf */
;;;286    	char finaltoken[CFG_CBSIZE];
;;;287    	char *str = cmdbuf;
000008  af23              ADD      r7,sp,#0x8c
;;;288    	char *argv[CFG_MAXARGS + 1];	/* NULL terminated	*/
;;;289    	int argc, inquotes;
;;;290    	int repeatable = 1;
00000a  f04f0b01          MOV      r11,#1
;;;291    	int rc = 0;
00000e  2000              MOVS     r0,#0
000010  9001              STR      r0,[sp,#4]
;;;292    
;;;293    #ifdef DEBUG_PARSER
;;;294    	my_print ("[RUN_COMMAND] cmd[%p]=\"", cmd);
;;;295    	my_puts (cmd ? cmd : "NULL");	/* use my_puts - string may be loooong */
;;;296    	my_puts ("\"\n");
;;;297    #endif
;;;298    
;;;299    	clear_ctrlc();		/* forget any previous Control C */
000012  f7fffffe          BL       clear_ctrlc
;;;300    
;;;301    	if (!cmd || !*cmd) {
000016  b10e              CBZ      r6,|L22.28|
000018  7830              LDRB     r0,[r6,#0]
00001a  b920              CBNZ     r0,|L22.38|
                  |L22.28|
;;;302    		return -1;	/* empty command */
00001c  f04f30ff          MOV      r0,#0xffffffff
                  |L22.32|
;;;303    	}
;;;304    
;;;305    	if (strlen(cmd) >= CFG_CBSIZE) {
;;;306    		my_puts ("## Command too long!\n");
;;;307    		return -1;
;;;308    	}
;;;309    
;;;310    	strcpy (cmdbuf, cmd);
;;;311    
;;;312    	/* Process separators and check for invalid
;;;313    	 * repeatable commands
;;;314    	 */
;;;315    
;;;316    #ifdef DEBUG_PARSER
;;;317    	my_print ("[PROCESS_SEPARATORS] %s\n", cmd);
;;;318    #endif
;;;319    	while (*str) {
;;;320    
;;;321    		/*
;;;322    		 * Find separator, or string end
;;;323    		 * Allow simple escape of ';' by writing "\;"
;;;324    		 */
;;;325    		for (inquotes = 0, sep = str; *sep; sep++) {
;;;326    			if ((*sep=='\'') &&
;;;327    			    (*(sep-1) != '\\'))
;;;328    				inquotes=!inquotes;
;;;329    
;;;330    			if (!inquotes &&
;;;331    			    (*sep == ';') &&	/* separator		*/
;;;332    			    ( sep != str) &&	/* past string start	*/
;;;333    			    (*(sep-1) != '\\'))	/* and NOT escaped	*/
;;;334    				break;
;;;335    		}
;;;336    
;;;337    		/*
;;;338    		 * Limit the token to data between separators
;;;339    		 */
;;;340    		token = str;
;;;341    		if (*sep) {
;;;342    			str = sep + 1;	/* start of command for next pass */
;;;343    			*sep = '\0';
;;;344    		}
;;;345    		else
;;;346    			str = sep;	/* no more commands for next pass */
;;;347    #ifdef DEBUG_PARSER
;;;348    		my_print ("token: \"%s\"\n", token);
;;;349    #endif
;;;350    
;;;351    		/* find macros in this token and replace them */
;;;352    		process_macros (token, finaltoken);
;;;353    
;;;354    		/* Extract arguments */
;;;355    		if ((argc = parse_line (finaltoken, argv)) == 0) {
;;;356    			rc = -1;	/* no command at all */
;;;357    			continue;
;;;358    		}
;;;359    
;;;360    		/* Look up command in command table */
;;;361    		if ((cmdtp = find_cmd(argv[0])) == NULL) {
;;;362    			my_print ("Unknown command '%s' - try 'help'\n", argv[0]);
;;;363    			rc = -1;	/* give up after bad command */
;;;364    			continue;
;;;365    		}
;;;366    
;;;367    		/* found - check max args */
;;;368    		if (argc > cmdtp->maxargs) {
;;;369    			my_print ("Usage:\n%s\n", cmdtp->usage);
;;;370    			rc = -1;
;;;371    			continue;
;;;372    		}
;;;373    
;;;374    #if (CONFIG_COMMANDS & CFG_CMD_BOOTD)
;;;375    		/* avoid "bootd" recursion */
;;;376    		if (cmdtp->cmdhandle == do_bootd) {
;;;377    #ifdef DEBUG_PARSER
;;;378    			my_print ("[%s]\n", finaltoken);
;;;379    #endif
;;;380    			if (flag & CMD_FLAG_BOOTD) {
;;;381    				my_puts ("'bootd' recursion detected\n");
;;;382    				rc = -1;
;;;383    				continue;
;;;384    			} else {
;;;385    				flag |= CMD_FLAG_BOOTD;
;;;386    			}
;;;387    		}
;;;388    #endif	/* CFG_CMD_BOOTD */
;;;389    
;;;390    		/* OK - call function to do the command */
;;;391    		if ((cmdtp->cmdhandle) (cmdtp, flag, argc, argv) != 0) {
;;;392    			rc = -1;
;;;393    		}
;;;394    
;;;395    		repeatable &= cmdtp->repeatable;
;;;396    
;;;397    		/* Did the user stop this? */
;;;398    		if (had_ctrlc ())
;;;399    			return 0;	/* if stopped then not repeatable */
;;;400    	}
;;;401    
;;;402    	return rc ? rc : repeatable;
;;;403    }
000020  b035              ADD      sp,sp,#0xd4
000022  e8bd8ff0          POP      {r4-r11,pc}
                  |L22.38|
000026  4630              MOV      r0,r6                 ;305
000028  f7fffffe          BL       strlen
00002c  2840              CMP      r0,#0x40              ;305
00002e  d305              BCC      |L22.60|
000030  a03c              ADR      r0,|L22.292|
000032  f7fffffe          BL       uart1_puts
000036  f04f30ff          MOV      r0,#0xffffffff        ;307
00003a  e7f1              B        |L22.32|
                  |L22.60|
00003c  4631              MOV      r1,r6                 ;310
00003e  a823              ADD      r0,sp,#0x8c           ;310
000040  f7fffffe          BL       strcpy
000044  e064              B        |L22.272|
                  |L22.70|
000046  f04f0a00          MOV      r10,#0                ;325
00004a  463c              MOV      r4,r7                 ;325
00004c  e01b              B        |L22.134|
                  |L22.78|
00004e  7820              LDRB     r0,[r4,#0]            ;326
000050  2827              CMP      r0,#0x27              ;326
000052  d10a              BNE      |L22.106|
000054  f8140c01          LDRB     r0,[r4,#-1]           ;327
000058  285c              CMP      r0,#0x5c              ;327
00005a  d006              BEQ      |L22.106|
00005c  f1ba0f00          CMP      r10,#0                ;328
000060  d101              BNE      |L22.102|
000062  2001              MOVS     r0,#1                 ;328
000064  e000              B        |L22.104|
                  |L22.102|
000066  2000              MOVS     r0,#0                 ;328
                  |L22.104|
000068  4682              MOV      r10,r0                ;328
                  |L22.106|
00006a  f1ba0f00          CMP      r10,#0                ;330
00006e  d109              BNE      |L22.132|
000070  7820              LDRB     r0,[r4,#0]            ;331
000072  283b              CMP      r0,#0x3b              ;331
000074  d106              BNE      |L22.132|
000076  42bc              CMP      r4,r7                 ;332
000078  d004              BEQ      |L22.132|
00007a  f8140c01          LDRB     r0,[r4,#-1]           ;333
00007e  285c              CMP      r0,#0x5c              ;333
000080  d000              BEQ      |L22.132|
000082  e003              B        |L22.140|
                  |L22.132|
000084  1c64              ADDS     r4,r4,#1              ;325
                  |L22.134|
000086  7820              LDRB     r0,[r4,#0]            ;325
000088  2800              CMP      r0,#0                 ;325
00008a  d1e0              BNE      |L22.78|
                  |L22.140|
00008c  bf00              NOP                            ;334
00008e  46b9              MOV      r9,r7                 ;340
000090  7820              LDRB     r0,[r4,#0]            ;341
000092  b118              CBZ      r0,|L22.156|
000094  1c67              ADDS     r7,r4,#1              ;342
000096  2000              MOVS     r0,#0                 ;343
000098  7020              STRB     r0,[r4,#0]            ;343
00009a  e000              B        |L22.158|
                  |L22.156|
00009c  4627              MOV      r7,r4                 ;346
                  |L22.158|
00009e  a913              ADD      r1,sp,#0x4c           ;352
0000a0  4648              MOV      r0,r9                 ;352
0000a2  f7fffffe          BL       process_macros
0000a6  a902              ADD      r1,sp,#8              ;355
0000a8  a813              ADD      r0,sp,#0x4c           ;355
0000aa  f7fffffe          BL       parse_line
0000ae  f1b00800          SUBS     r8,r0,#0              ;355
0000b2  d102              BNE      |L22.186|
0000b4  1e40              SUBS     r0,r0,#1              ;356
0000b6  9001              STR      r0,[sp,#4]            ;356
0000b8  e02a              B        |L22.272|
                  |L22.186|
0000ba  9802              LDR      r0,[sp,#8]            ;361
0000bc  f7fffffe          BL       find_cmd
0000c0  1e05              SUBS     r5,r0,#0              ;361
0000c2  d106              BNE      |L22.210|
0000c4  a01d              ADR      r0,|L22.316|
0000c6  9902              LDR      r1,[sp,#8]            ;362
0000c8  f7fffffe          BL       __2printf
0000cc  1e68              SUBS     r0,r5,#1              ;363
0000ce  9001              STR      r0,[sp,#4]            ;363
0000d0  e01e              B        |L22.272|
                  |L22.210|
0000d2  6868              LDR      r0,[r5,#4]            ;368
0000d4  4540              CMP      r0,r8                 ;368
0000d6  da07              BGE      |L22.232|
0000d8  a021              ADR      r0,|L22.352|
0000da  6929              LDR      r1,[r5,#0x10]         ;369
0000dc  f7fffffe          BL       __2printf
0000e0  f04f30ff          MOV      r0,#0xffffffff        ;370
0000e4  9001              STR      r0,[sp,#4]            ;370
0000e6  e013              B        |L22.272|
                  |L22.232|
0000e8  ab02              ADD      r3,sp,#8              ;391
0000ea  4642              MOV      r2,r8                 ;391
0000ec  f8d5c00c          LDR      r12,[r5,#0xc]         ;391
0000f0  4628              MOV      r0,r5                 ;391
0000f2  9934              LDR      r1,[sp,#0xd0]         ;391
0000f4  47e0              BLX      r12                   ;391
0000f6  b110              CBZ      r0,|L22.254|
0000f8  f04f30ff          MOV      r0,#0xffffffff        ;392
0000fc  9001              STR      r0,[sp,#4]            ;392
                  |L22.254|
0000fe  68a8              LDR      r0,[r5,#8]            ;395
000100  ea000b0b          AND      r11,r0,r11            ;395
000104  f7fffffe          BL       had_ctrlc
000108  b108              CBZ      r0,|L22.270|
00010a  2000              MOVS     r0,#0                 ;399
00010c  e788              B        |L22.32|
                  |L22.270|
00010e  bf00              NOP                            ;357
                  |L22.272|
000110  7838              LDRB     r0,[r7,#0]            ;319
000112  2800              CMP      r0,#0                 ;319
000114  d197              BNE      |L22.70|
000116  9801              LDR      r0,[sp,#4]            ;402
000118  b108              CBZ      r0,|L22.286|
00011a  9801              LDR      r0,[sp,#4]            ;402
00011c  e780              B        |L22.32|
                  |L22.286|
00011e  4658              MOV      r0,r11                ;402
000120  e77e              B        |L22.32|
;;;404    
                          ENDP

000122  0000              DCW      0x0000
                  |L22.292|
000124  23232043          DCB      "## Command too long!\n",0
000128  6f6d6d61
00012c  6e642074
000130  6f6f206c
000134  6f6e6721
000138  0a00    
00013a  00                DCB      0
00013b  00                DCB      0
                  |L22.316|
00013c  556e6b6e          DCB      "Unknown command '%s' - try 'help'\n",0
000140  6f776e20
000144  636f6d6d
000148  616e6420
00014c  27257327
000150  202d2074
000154  72792027
000158  68656c70
00015c  270a00  
00015f  00                DCB      0
                  |L22.352|
000160  55736167          DCB      "Usage:\n%s\n",0
000164  653a0a25
000168  730a00  
00016b  00                DCB      0

                          AREA ||i.set_ctrlc||, CODE, READONLY, ALIGN=2

                  set_ctrlc PROC
;;;85     
;;;86     int set_ctrlc(int state)
000000  4601              MOV      r1,r0
;;;87     {
;;;88     	int prev;
;;;89     	my_env.sys_break = state;
000002  b20a              SXTH     r2,r1
000004  4b01              LDR      r3,|L23.12|
000006  801a              STRH     r2,[r3,#0]
;;;90     	return prev;
;;;91     }
000008  4770              BX       lr
;;;92     
                          ENDP

00000a  0000              DCW      0x0000
                  |L23.12|
                          DCD      my_env

                          AREA ||i.simple_strtol||, CODE, READONLY, ALIGN=1

                  simple_strtol PROC
;;;78     
;;;79     long simple_strtol(const char *cp,char **endp,unsigned int base)
000000  b570              PUSH     {r4-r6,lr}
;;;80     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;81     	if(*cp=='-')
000008  7820              LDRB     r0,[r4,#0]
00000a  282d              CMP      r0,#0x2d
00000c  d106              BNE      |L24.28|
;;;82     		return -simple_strtoul(cp+1,endp,base);
00000e  4632              MOV      r2,r6
000010  4629              MOV      r1,r5
000012  1c60              ADDS     r0,r4,#1
000014  f7fffffe          BL       simple_strtoul
000018  4240              RSBS     r0,r0,#0
                  |L24.26|
;;;83     	return simple_strtoul(cp,endp,base);
;;;84     }
00001a  bd70              POP      {r4-r6,pc}
                  |L24.28|
00001c  4632              MOV      r2,r6                 ;83
00001e  4629              MOV      r1,r5                 ;83
000020  4620              MOV      r0,r4                 ;83
000022  f7fffffe          BL       simple_strtoul
000026  e7f8              B        |L24.26|
;;;85     
                          ENDP


                          AREA ||i.simple_strtoul||, CODE, READONLY, ALIGN=1

                  simple_strtoul PROC
;;;51     
;;;52     unsigned long simple_strtoul(const char *cp,char **endp,unsigned int base)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;53     {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
;;;54     	unsigned long result = 0,value;
00000a  2700              MOVS     r7,#0
;;;55     
;;;56     	if (*cp == '0') {
00000c  7820              LDRB     r0,[r4,#0]
00000e  2830              CMP      r0,#0x30
000010  d112              BNE      |L25.56|
;;;57     		cp++;
000012  1c64              ADDS     r4,r4,#1
;;;58     		if ((*cp == 'x') && isxdigit(cp[1])) {
000014  7820              LDRB     r0,[r4,#0]
000016  2878              CMP      r0,#0x78
000018  d10c              BNE      |L25.52|
00001a  f7fffffe          BL       __rt_ctype_table
00001e  6800              LDR      r0,[r0,#0]
000020  7861              LDRB     r1,[r4,#1]
000022  f8108001          LDRB     r8,[r0,r1]
000026  ea880088          EOR      r0,r8,r8,LSL #2
00002a  f0000080          AND      r0,r0,#0x80
00002e  b108              CBZ      r0,|L25.52|
;;;59     			base = 16;
000030  2510              MOVS     r5,#0x10
;;;60     			cp++;
000032  1c64              ADDS     r4,r4,#1
                  |L25.52|
;;;61     		}
;;;62     		if (!base) {
000034  b905              CBNZ     r5,|L25.56|
;;;63     			base = 8;
000036  2508              MOVS     r5,#8
                  |L25.56|
;;;64     		}
;;;65     	}
;;;66     	if (!base) {
000038  b905              CBNZ     r5,|L25.60|
;;;67     		base = 10;
00003a  250a              MOVS     r5,#0xa
                  |L25.60|
;;;68     	}
;;;69     	while (isxdigit(*cp) && (value = isdigit(*cp) ? *cp-'0' : (islower(*cp)
00003c  e002              B        |L25.68|
                  |L25.62|
;;;70     	    ? toupper(*cp) : *cp)-'A'+10) < base) {
;;;71     		result = result*base + value;
00003e  fb079705          MLA      r7,r7,r5,r9
;;;72     		cp++;
000042  1c64              ADDS     r4,r4,#1
                  |L25.68|
000044  f7fffffe          BL       __rt_ctype_table
000048  6800              LDR      r0,[r0,#0]            ;69
00004a  7821              LDRB     r1,[r4,#0]            ;69
00004c  f8108001          LDRB     r8,[r0,r1]            ;69
000050  ea880088          EOR      r0,r8,r8,LSL #2       ;69
000054  f0000080          AND      r0,r0,#0x80           ;69
000058  b1d0              CBZ      r0,|L25.144|
00005a  f7fffffe          BL       __rt_ctype_table
00005e  6800              LDR      r0,[r0,#0]            ;69
000060  7821              LDRB     r1,[r4,#0]            ;69
000062  5c40              LDRB     r0,[r0,r1]            ;69
000064  2820              CMP      r0,#0x20              ;69
000066  d102              BNE      |L25.110|
000068  7820              LDRB     r0,[r4,#0]            ;69
00006a  3830              SUBS     r0,r0,#0x30           ;69
00006c  e00d              B        |L25.138|
                  |L25.110|
00006e  f7fffffe          BL       __rt_ctype_table
000072  6800              LDR      r0,[r0,#0]            ;69
000074  7821              LDRB     r1,[r4,#0]            ;69
000076  5c40              LDRB     r0,[r0,r1]            ;69
000078  f0000008          AND      r0,r0,#8              ;69
00007c  b118              CBZ      r0,|L25.134|
00007e  7820              LDRB     r0,[r4,#0]            ;70
000080  f7fffffe          BL       toupper
000084  e000              B        |L25.136|
                  |L25.134|
000086  7820              LDRB     r0,[r4,#0]            ;70
                  |L25.136|
000088  3837              SUBS     r0,r0,#0x37           ;70
                  |L25.138|
00008a  4681              MOV      r9,r0                 ;70
00008c  42a8              CMP      r0,r5                 ;70
00008e  d3d6              BCC      |L25.62|
                  |L25.144|
;;;73     	}
;;;74     	if (endp)
000090  b106              CBZ      r6,|L25.148|
;;;75     		*endp = (char *)cp;
000092  6034              STR      r4,[r6,#0]
                  |L25.148|
;;;76     	return result;
000094  4638              MOV      r0,r7
;;;77     }
000096  e8bd87f0          POP      {r4-r10,pc}
;;;78     
                          ENDP


                          AREA ||i.system_env_init||, CODE, READONLY, ALIGN=2

                  system_env_init PROC
;;;14     
;;;15     void system_env_init (void)
000000  4807              LDR      r0,|L26.32|
;;;16     {
;;;17     	int i;
;;;18     	i = (unsigned int)do_help;
;;;19     	S8 *p = (S8 *) &my_env;
000002  4908              LDR      r1,|L26.36|
;;;20     	for (i = 0; i < sizeof(s_system_env); i++)
000004  2000              MOVS     r0,#0
000006  e003              B        |L26.16|
                  |L26.8|
;;;21     	{
;;;22     		*(p++) = 0;
000008  2200              MOVS     r2,#0
00000a  f8012b01          STRB     r2,[r1],#1
00000e  1c40              ADDS     r0,r0,#1              ;20
                  |L26.16|
000010  2810              CMP      r0,#0x10              ;20
000012  d3f9              BCC      |L26.8|
;;;23     	}	
;;;24     	my_env.sys_break = 1;
000014  2201              MOVS     r2,#1
000016  4b03              LDR      r3,|L26.36|
000018  801a              STRH     r2,[r3,#0]
;;;25     	my_env.modbus_rtu_addr = MODBUS_RTU_ADDR;
00001a  2202              MOVS     r2,#2
00001c  81da              STRH     r2,[r3,#0xe]
;;;26     	//my_env.print = 1;
;;;27     }
00001e  4770              BX       lr
;;;28     
                          ENDP

                  |L26.32|
                          DCD      do_help
                  |L26.36|
                          DCD      my_env

                          AREA ||i.vTaskCmdAnalyze||, CODE, READONLY, ALIGN=2

                  vTaskCmdAnalyze PROC
;;;430    
;;;431    void vTaskCmdAnalyze( void )  
000000  b510              PUSH     {r4,lr}
;;;432    {   
;;;433    	INT8U state;                                                            
;;;434        
;;;435    	state = OSTaskCreate(handle_task, (void*)(cmd_analyze.rec_buf),
000002  2310              MOVS     r3,#0x10
000004  4a05              LDR      r2,|L27.28|
000006  4906              LDR      r1,|L27.32|
000008  4806              LDR      r0,|L27.36|
00000a  f7fffffe          BL       OSTaskCreate
00000e  4604              MOV      r4,r0
;;;436    						(OS_STK*)&START_TASK_STK[START_STK_SIZE-1],
;;;437    						HANDLE_TASK_PRIO); 
;;;438    	if (state != OS_ERR_NONE)
000010  b114              CBZ      r4,|L27.24|
;;;439    	{
;;;440    		my_println ("OSTaskCreate failed");
000012  a005              ADR      r0,|L27.40|
000014  f7fffffe          BL       __2printf
                  |L27.24|
;;;441    	}
;;;442    }
000018  bd10              POP      {r4,pc}
;;;443    void print_system_env_info (void) 
                          ENDP

00001a  0000              DCW      0x0000
                  |L27.28|
                          DCD      START_TASK_STK+0x3fc
                  |L27.32|
                          DCD      cmd_analyze
                  |L27.36|
                          DCD      handle_task
                  |L27.40|
000028  4f535461          DCB      "OSTaskCreate failed\n",0
00002c  736b4372
000030  65617465
000034  20666169
000038  6c65640a
00003c  00      
00003d  00                DCB      0
00003e  00                DCB      0
00003f  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  cmd_analyze
                          %        152
                  my_env
                          %        16
                  task_para
                          %        12

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  556e6b6e          DCB      "Unknown command '%s' - try 'help'\n without arguments f"
000004  6f776e20
000008  636f6d6d
00000c  616e6420
000010  27257327
000014  202d2074
000018  72792027
00001c  68656c70
000020  270a2077
000024  6974686f
000028  75742061
00002c  7267756d
000030  656e7473
000034  2066    
000036  6f72206c          DCB      "or list of all\n known commands\n\n",0
00003a  69737420
00003e  6f662061
000042  6c6c0a20
000046  6b6e6f77
00004a  6e20636f
00004e  6d6d616e
000052  64730a0a
000056  00      

                          AREA ||.conststrlit||, DATA, READONLY, ALIGN=2

000000  72657365          DCB      0x72,0x65,0x73,0x65
000004  74000000          DCB      0x74,0x00,0x00,0x00
000008  72657365          DCB      0x72,0x65,0x73,0x65
00000c  74202d20          DCB      0x74,0x20,0x2d,0x20
000010  72657365          DCB      0x72,0x65,0x73,0x65
000014  74207468          DCB      0x74,0x20,0x74,0x68
000018  65207379          DCB      0x65,0x20,0x73,0x79
00001c  7374656d          DCB      0x73,0x74,0x65,0x6d
000020  0a000000          DCB      0x0a,0x00,0x00,0x00
000024  72657365          DCB      0x72,0x65,0x73,0x65
000028  740a0000          DCB      0x74,0x0a,0x00,0x00
00002c  68656c70          DCB      0x68,0x65,0x6c,0x70
000030  00000000          DCB      0x00,0x00,0x00,0x00
000034  7072696e          DCB      0x70,0x72,0x69,0x6e
000038  74206f6e          DCB      0x74,0x20,0x6f,0x6e
00003c  6c696e65          DCB      0x6c,0x69,0x6e,0x65
000040  2068656c          DCB      0x20,0x68,0x65,0x6c
000044  700a0000          DCB      0x70,0x0a,0x00,0x00
000048  5b636f6d          DCB      0x5b,0x63,0x6f,0x6d
00004c  6d616e64          DCB      0x6d,0x61,0x6e,0x64
000050  202e2e2e          DCB      0x20,0x2e,0x2e,0x2e
000054  5d0a2020          DCB      0x5d,0x0a,0x20,0x20
000058  20202d20          DCB      0x20,0x20,0x2d,0x20
00005c  73686f77          DCB      0x73,0x68,0x6f,0x77
000060  2068656c          DCB      0x20,0x68,0x65,0x6c
000064  7020696e          DCB      0x70,0x20,0x69,0x6e
000068  666f726d          DCB      0x66,0x6f,0x72,0x6d
00006c  6174696f          DCB      0x61,0x74,0x69,0x6f
000070  6e202866          DCB      0x6e,0x20,0x28,0x66
000074  6f722027          DCB      0x6f,0x72,0x20,0x27
000078  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
00007c  616e6427          DCB      0x61,0x6e,0x64,0x27
000080  290a2768          DCB      0x29,0x0a,0x27,0x68
000084  656c7027          DCB      0x65,0x6c,0x70,0x27
000088  20707269          DCB      0x20,0x70,0x72,0x69
00008c  6e747320          DCB      0x6e,0x74,0x73,0x20
000090  6f6e6c69          DCB      0x6f,0x6e,0x6c,0x69
000094  6e652068          DCB      0x6e,0x65,0x20,0x68
000098  656c7020          DCB      0x65,0x6c,0x70,0x20
00009c  666f7220          DCB      0x66,0x6f,0x72,0x20
0000a0  74686520          DCB      0x74,0x68,0x65,0x20
0000a4  6d6f6e69          DCB      0x6d,0x6f,0x6e,0x69
0000a8  746f7220          DCB      0x74,0x6f,0x72,0x20
0000ac  636f6d6d          DCB      0x63,0x6f,0x6d,0x6d
0000b0  616e6473          DCB      0x61,0x6e,0x64,0x73
0000b4  2e0a5769          DCB      0x2e,0x0a,0x57,0x69
0000b8  74686f75          DCB      0x74,0x68,0x6f,0x75
0000bc  74206172          DCB      0x74,0x20,0x61,0x72
0000c0  67756d65          DCB      0x67,0x75,0x6d,0x65
0000c4  6e74732c          DCB      0x6e,0x74,0x73,0x2c
0000c8  20697420          DCB      0x20,0x69,0x74,0x20
0000cc  7072696e          DCB      0x70,0x72,0x69,0x6e
0000d0  74732061          DCB      0x74,0x73,0x20,0x61
0000d4  2073686f          DCB      0x20,0x73,0x68,0x6f
0000d8  72742075          DCB      0x72,0x74,0x20,0x75
0000dc  73616765          DCB      0x73,0x61,0x67,0x65
0000e0  206d6573          DCB      0x20,0x6d,0x65,0x73
0000e4  73616765          DCB      0x73,0x61,0x67,0x65
0000e8  20666f72          DCB      0x20,0x66,0x6f,0x72
0000ec  20616c6c          DCB      0x20,0x61,0x6c,0x6c
0000f0  20636f6d          DCB      0x20,0x63,0x6f,0x6d
0000f4  6d616e64          DCB      0x6d,0x61,0x6e,0x64
0000f8  732e0a54          DCB      0x73,0x2e,0x0a,0x54
0000fc  6f206765          DCB      0x6f,0x20,0x67,0x65
000100  74206465          DCB      0x74,0x20,0x64,0x65
000104  7461696c          DCB      0x74,0x61,0x69,0x6c
000108  65642068          DCB      0x65,0x64,0x20,0x68
00010c  656c7020          DCB      0x65,0x6c,0x70,0x20
000110  696e666f          DCB      0x69,0x6e,0x66,0x6f
000114  726d6174          DCB      0x72,0x6d,0x61,0x74
000118  696f6e20          DCB      0x69,0x6f,0x6e,0x20
00011c  666f7220          DCB      0x66,0x6f,0x72,0x20
000120  73706563          DCB      0x73,0x70,0x65,0x63
000124  69666963          DCB      0x69,0x66,0x69,0x63
000128  20636f6d          DCB      0x20,0x63,0x6f,0x6d
00012c  6d616e64          DCB      0x6d,0x61,0x6e,0x64
000130  7320796f          DCB      0x73,0x20,0x79,0x6f
000134  75206361          DCB      0x75,0x20,0x63,0x61
000138  6e207479          DCB      0x6e,0x20,0x74,0x79
00013c  70650a27          DCB      0x70,0x65,0x0a,0x27
000140  68656c70          DCB      0x68,0x65,0x6c,0x70
000144  27207769          DCB      0x27,0x20,0x77,0x69
000148  7468206f          DCB      0x74,0x68,0x20,0x6f
00014c  6e65206f          DCB      0x6e,0x65,0x20,0x6f
000150  72206d6f          DCB      0x72,0x20,0x6d,0x6f
000154  72652063          DCB      0x72,0x65,0x20,0x63
000158  6f6d6d61          DCB      0x6f,0x6d,0x6d,0x61
00015c  6e64206e          DCB      0x6e,0x64,0x20,0x6e
000160  616d6573          DCB      0x61,0x6d,0x65,0x73
000164  20617320          DCB      0x20,0x61,0x73,0x20
000168  61726775          DCB      0x61,0x72,0x67,0x75
00016c  6d656e74          DCB      0x6d,0x65,0x6e,0x74
000170  732e0a00          DCB      0x73,0x2e,0x0a,0x00
000174  3f000000          DCB      0x3f,0x00,0x00,0x00
000178  616c6961          DCB      0x61,0x6c,0x69,0x61
00017c  7320666f          DCB      0x73,0x20,0x66,0x6f
000180  72202768          DCB      0x72,0x20,0x27,0x68
000184  656c7027          DCB      0x65,0x6c,0x70,0x27
000188  200a0000          DCB      0x20,0x0a,0x00,0x00
00018c  00000000          DCB      0x00,0x00,0x00,0x00
000190  7461736b          DCB      0x74,0x61,0x73,0x6b
000194  5f6d616e          DCB      0x5f,0x6d,0x61,0x6e
000198  61676572          DCB      0x61,0x67,0x65,0x72
00019c  00000000          DCB      0x00,0x00,0x00,0x00
0001a0  7461736b          DCB      0x74,0x61,0x73,0x6b
0001a4  5f6d616e          DCB      0x5f,0x6d,0x61,0x6e
0001a8  61676572          DCB      0x61,0x67,0x65,0x72
0001ac  202d2074          DCB      0x20,0x2d,0x20,0x74
0001b0  6865206f          DCB      0x68,0x65,0x20,0x6f
0001b4  73207461          DCB      0x73,0x20,0x74,0x61
0001b8  736b5f6d          DCB      0x73,0x6b,0x5f,0x6d
0001bc  616e6167          DCB      0x61,0x6e,0x61,0x67
0001c0  65720a00          DCB      0x65,0x72,0x0a,0x00
0001c4  7461736b          DCB      0x74,0x61,0x73,0x6b
0001c8  5f6d616e          DCB      0x5f,0x6d,0x61,0x6e
0001cc  61676572          DCB      0x61,0x67,0x65,0x72
0001d0  0a000000          DCB      0x0a,0x00,0x00,0x00
0001d4  7072696e          DCB      0x70,0x72,0x69,0x6e
0001d8  74000000          DCB      0x74,0x00,0x00,0x00
0001dc  7072696e          DCB      0x70,0x72,0x69,0x6e
0001e0  74202d20          DCB      0x74,0x20,0x2d,0x20
0001e4  7072696e          DCB      0x70,0x72,0x69,0x6e
0001e8  7420696e          DCB      0x74,0x20,0x69,0x6e
0001ec  666f206f          DCB      0x66,0x6f,0x20,0x6f
0001f0  66207468          DCB      0x66,0x20,0x74,0x68
0001f4  65206172          DCB      0x65,0x20,0x61,0x72
0001f8  670a0000          DCB      0x67,0x0a,0x00,0x00
0001fc  7072696e          DCB      0x70,0x72,0x69,0x6e
000200  74206461          DCB      0x74,0x20,0x64,0x61
000204  20320a70          DCB      0x20,0x32,0x0a,0x70
000208  72696e74          DCB      0x72,0x69,0x6e,0x74
00020c  20646120          DCB      0x20,0x64,0x61,0x20
000210  616c6c0a          DCB      0x61,0x6c,0x6c,0x0a
000214  00000000          DCB      0x00,0x00,0x00,0x00
000218  73657400          DCB      0x73,0x65,0x74,0x00
00021c  73657420          DCB      0x73,0x65,0x74,0x20
000220  2d207365          DCB      0x2d,0x20,0x73,0x65
000224  74207061          DCB      0x74,0x20,0x70,0x61
000228  72616d65          DCB      0x72,0x61,0x6d,0x65
00022c  74657220          DCB      0x74,0x65,0x72,0x20
000230  76616c75          DCB      0x76,0x61,0x6c,0x75
000234  65206f66          DCB      0x65,0x20,0x6f,0x66
000238  20746865          DCB      0x20,0x74,0x68,0x65
00023c  20617267          DCB      0x20,0x61,0x72,0x67
000240  0a000000          DCB      0x0a,0x00,0x00,0x00
000244  73657420          DCB      0x73,0x65,0x74,0x20
000248  6e616d65          DCB      0x6e,0x61,0x6d,0x65
00024c  2076616c          DCB      0x20,0x76,0x61,0x6c
000250  75650a00          DCB      0x75,0x65,0x0a,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  rec_count
                          DCD      0x00000000

                          AREA my_cmd_sec, DATA, ALIGN=2

                  __my_cmd_reset
                          DCD      ||.conststrlit||
                          DCD      0x00000008
                          DCD      0x00000001
                          DCD      do_reset
                          DCD      ||.conststrlit||+0x8
                          DCD      ||.conststrlit||+0x24
                  __my_cmd_help
                          DCD      ||.conststrlit||+0x2c
                          DCD      0x00000010
                          DCD      0x00000001
                          DCD      do_help
                          DCD      ||.conststrlit||+0x34
                          DCD      ||.conststrlit||+0x48
                  __u_boot_cmd_question_mark
                          DCD      ||.conststrlit||+0x174
                          DCD      0x00000010
                          DCD      0x00000001
                          DCD      do_help
                          DCD      ||.conststrlit||+0x178
                          DCD      ||.conststrlit||+0x18c
                  __my_cmd_task_manager
                          DCD      ||.conststrlit||+0x190
                          DCD      0x00000003
                          DCD      0x00000001
                          DCD      do_task_manager
                          DCD      ||.conststrlit||+0x1a0
                          DCD      ||.conststrlit||+0x1c4
                  __my_cmd_print
                          DCD      ||.conststrlit||+0x1d4
                          DCD      0x00000003
                          DCD      0x00000001
                          DCD      do_print
                          DCD      ||.conststrlit||+0x1dc
                          DCD      ||.conststrlit||+0x1fc
                  __my_cmd_set
                          DCD      ||.conststrlit||+0x218
                          DCD      0x00000004
                          DCD      0x00000001
                          DCD      do_set
                          DCD      ||.conststrlit||+0x21c
                          DCD      ||.conststrlit||+0x244

;*** Start embedded assembler ***

#line 1 "Cmd\\my_cmd.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_my_cmd_c_cf427a22____REV16|
#line 447 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.0.1\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___8_my_cmd_c_cf427a22____REV16| PROC
#line 448

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_my_cmd_c_cf427a22____REVSH|
#line 462
|__asm___8_my_cmd_c_cf427a22____REVSH| PROC
#line 463

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___8_my_cmd_c_cf427a22____RRX|
#line 649
|__asm___8_my_cmd_c_cf427a22____RRX| PROC
#line 650

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
