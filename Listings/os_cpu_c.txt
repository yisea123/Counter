; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\os_cpu_c.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\os_cpu_c.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\user -I.\driver -I.\HARDWARE\TIMER -I.\AD_Sample -I.\SYSTEM\delay -I.\Cmd -I.\SYSTEM\sys -I.\UCOSII\CONFIG -I.\UCOSII\CORE -I.\UCOSII\PORT -I.\Protocol -I.\RTE\Device\STM32F103ZE -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\StdPeriph_Driver\inc -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F10X_HD --omf_browse=.\objects\os_cpu_c.crf UCOSII\PORT\os_cpu_c.c]
                          THUMB

                          AREA ||i.OSInitHookBegin||, CODE, READONLY, ALIGN=1

                  OSInitHookBegin PROC
;;;51     #if OS_CPU_HOOKS_EN > 0 && OS_VERSION > 203
;;;52     void  OSInitHookBegin (void)
000000  4770              BX       lr
;;;53     {
;;;54     #if OS_TMR_EN > 0
;;;55         OSTmrCtr = 0;
;;;56     #endif
;;;57     }
;;;58     #endif
                          ENDP


                          AREA ||i.OSInitHookEnd||, CODE, READONLY, ALIGN=1

                  OSInitHookEnd PROC
;;;72     #if OS_CPU_HOOKS_EN > 0 && OS_VERSION > 203
;;;73     void  OSInitHookEnd (void)
000000  4770              BX       lr
;;;74     {
;;;75     }
;;;76     #endif
                          ENDP


                          AREA ||i.OSTCBInitHook||, CODE, READONLY, ALIGN=1

                  OSTCBInitHook PROC
;;;259    #if OS_CPU_HOOKS_EN > 0 && OS_VERSION > 203
;;;260    void  OSTCBInitHook (OS_TCB *ptcb)
000000  4770              BX       lr
;;;261    {
;;;262    #if OS_APP_HOOKS_EN > 0
;;;263        App_TCBInitHook(ptcb);
;;;264    #else
;;;265        (void)ptcb;                                  /* Prevent compiler warning                           */
;;;266    #endif
;;;267    }
;;;268    #endif
                          ENDP


                          AREA ||i.OSTaskCreateHook||, CODE, READONLY, ALIGN=1

                  OSTaskCreateHook PROC
;;;89     #if OS_CPU_HOOKS_EN > 0
;;;90     void  OSTaskCreateHook (OS_TCB *ptcb)
000000  4770              BX       lr
;;;91     {
;;;92     #if OS_APP_HOOKS_EN > 0
;;;93         App_TaskCreateHook(ptcb);
;;;94     #else
;;;95         (void)ptcb;                                  /* Prevent compiler warning                           */
;;;96     #endif
;;;97     }
;;;98     #endif
                          ENDP


                          AREA ||i.OSTaskDelHook||, CODE, READONLY, ALIGN=1

                  OSTaskDelHook PROC
;;;112    #if OS_CPU_HOOKS_EN > 0
;;;113    void  OSTaskDelHook (OS_TCB *ptcb)
000000  4770              BX       lr
;;;114    {
;;;115    #if OS_APP_HOOKS_EN > 0
;;;116        App_TaskDelHook(ptcb);
;;;117    #else
;;;118        (void)ptcb;                                  /* Prevent compiler warning                           */
;;;119    #endif
;;;120    }
;;;121    #endif
                          ENDP


                          AREA ||i.OSTaskIdleHook||, CODE, READONLY, ALIGN=1

                  OSTaskIdleHook PROC
;;;135    #if OS_CPU_HOOKS_EN > 0 && OS_VERSION >= 251
;;;136    void  OSTaskIdleHook (void)
000000  4770              BX       lr
;;;137    {
;;;138    #if OS_APP_HOOKS_EN > 0
;;;139        App_TaskIdleHook();
;;;140    #endif
;;;141    }
;;;142    #endif
                          ENDP


                          AREA ||i.OSTaskReturnHook||, CODE, READONLY, ALIGN=1

                  OSTaskReturnHook PROC
;;;300    
;;;301    void OSTaskReturnHook(OS_TCB *ptcb)
000000  4770              BX       lr
;;;302    { 
;;;303    	(void)ptcb; 
;;;304    } 
;;;305    
                          ENDP


                          AREA ||i.OSTaskStatHook||, CODE, READONLY, ALIGN=1

                  OSTaskStatHook PROC
;;;155    #if OS_CPU_HOOKS_EN > 0
;;;156    void  OSTaskStatHook (void)
000000  4770              BX       lr
;;;157    {
;;;158    #if OS_APP_HOOKS_EN > 0
;;;159        App_TaskStatHook();
;;;160    #endif
;;;161    }
;;;162    #endif
                          ENDP


                          AREA ||i.OSTaskStkInit||, CODE, READONLY, ALIGN=1

                  OSTaskStkInit PROC
;;;192    
;;;193    OS_STK *OSTaskStkInit (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT16U opt)
000000  b570              PUSH     {r4-r6,lr}
;;;194    {
000002  4604              MOV      r4,r0
;;;195        OS_STK *stk;
;;;196    
;;;197    
;;;198        (void)opt;                                   /* 'opt' is not used, prevent warning                 */
;;;199        stk       = ptos;                            /* Load stack pointer                                 */
000004  4610              MOV      r0,r2
;;;200    
;;;201                                                     /* Registers stacked as if auto-saved on exception    */
;;;202        *(stk)    = (INT32U)0x01000000L;             /* xPSR                                               */
000006  f04f7580          MOV      r5,#0x1000000
00000a  6005              STR      r5,[r0,#0]
;;;203        *(--stk)  = (INT32U)task;                    /* Entry Point                                        */
00000c  1f05              SUBS     r5,r0,#4
00000e  4628              MOV      r0,r5
000010  602c              STR      r4,[r5,#0]
;;;204        *(--stk)  = (INT32U)0xFFFFFFFEL;             /* R14 (LR) (init value will cause fault if ever used)*/
000012  f06f0601          MVN      r6,#1
000016  1f05              SUBS     r5,r0,#4
000018  4628              MOV      r0,r5
00001a  602e              STR      r6,[r5,#0]
;;;205        *(--stk)  = (INT32U)0x12121212L;             /* R12                                                */
00001c  f04f3612          MOV      r6,#0x12121212
000020  1f05              SUBS     r5,r0,#4
000022  4628              MOV      r0,r5
000024  602e              STR      r6,[r5,#0]
;;;206        *(--stk)  = (INT32U)0x03030303L;             /* R3                                                 */
000026  f04f3603          MOV      r6,#0x3030303
00002a  1f05              SUBS     r5,r0,#4
00002c  4628              MOV      r0,r5
00002e  602e              STR      r6,[r5,#0]
;;;207        *(--stk)  = (INT32U)0x02020202L;             /* R2                                                 */
000030  f04f3602          MOV      r6,#0x2020202
000034  1f05              SUBS     r5,r0,#4
000036  4628              MOV      r0,r5
000038  602e              STR      r6,[r5,#0]
;;;208        *(--stk)  = (INT32U)0x01010101L;             /* R1                                                 */
00003a  1076              ASRS     r6,r6,#1
00003c  1f05              SUBS     r5,r0,#4
00003e  4628              MOV      r0,r5
000040  602e              STR      r6,[r5,#0]
;;;209        *(--stk)  = (INT32U)p_arg;                   /* R0 : argument                                      */
000042  1f05              SUBS     r5,r0,#4
000044  4628              MOV      r0,r5
000046  6029              STR      r1,[r5,#0]
;;;210    
;;;211                                                     /* Remaining registers saved on process stack         */
;;;212        *(--stk)  = (INT32U)0x11111111L;             /* R11                                                */
000048  f04f3611          MOV      r6,#0x11111111
00004c  1f05              SUBS     r5,r0,#4
00004e  4628              MOV      r0,r5
000050  602e              STR      r6,[r5,#0]
;;;213        *(--stk)  = (INT32U)0x10101010L;             /* R10                                                */
000052  f04f3610          MOV      r6,#0x10101010
000056  1f05              SUBS     r5,r0,#4
000058  4628              MOV      r0,r5
00005a  602e              STR      r6,[r5,#0]
;;;214        *(--stk)  = (INT32U)0x09090909L;             /* R9                                                 */
00005c  f04f3609          MOV      r6,#0x9090909
000060  1f05              SUBS     r5,r0,#4
000062  4628              MOV      r0,r5
000064  602e              STR      r6,[r5,#0]
;;;215        *(--stk)  = (INT32U)0x08080808L;             /* R8                                                 */
000066  f04f3608          MOV      r6,#0x8080808
00006a  1f05              SUBS     r5,r0,#4
00006c  4628              MOV      r0,r5
00006e  602e              STR      r6,[r5,#0]
;;;216        *(--stk)  = (INT32U)0x07070707L;             /* R7                                                 */
000070  f04f3607          MOV      r6,#0x7070707
000074  1f05              SUBS     r5,r0,#4
000076  4628              MOV      r0,r5
000078  602e              STR      r6,[r5,#0]
;;;217        *(--stk)  = (INT32U)0x06060606L;             /* R6                                                 */
00007a  f04f3606          MOV      r6,#0x6060606
00007e  1f05              SUBS     r5,r0,#4
000080  4628              MOV      r0,r5
000082  602e              STR      r6,[r5,#0]
;;;218        *(--stk)  = (INT32U)0x05050505L;             /* R5                                                 */
000084  f04f3605          MOV      r6,#0x5050505
000088  1f05              SUBS     r5,r0,#4
00008a  4628              MOV      r0,r5
00008c  602e              STR      r6,[r5,#0]
;;;219        *(--stk)  = (INT32U)0x04040404L;             /* R4                                                 */
00008e  f04f3604          MOV      r6,#0x4040404
000092  1f05              SUBS     r5,r0,#4
000094  4628              MOV      r0,r5
000096  602e              STR      r6,[r5,#0]
;;;220    
;;;221        return (stk);
;;;222    }
000098  bd70              POP      {r4-r6,pc}
;;;223    
                          ENDP


                          AREA ||i.OSTaskSwHook||, CODE, READONLY, ALIGN=1

                  OSTaskSwHook PROC
;;;239    #if (OS_CPU_HOOKS_EN > 0) && (OS_TASK_SW_HOOK_EN > 0)
;;;240    void  OSTaskSwHook (void)
000000  4770              BX       lr
;;;241    {
;;;242    #if OS_APP_HOOKS_EN > 0
;;;243        App_TaskSwHook();
;;;244    #endif
;;;245    }
;;;246    #endif
                          ENDP


                          AREA ||i.OSTimeTickHook||, CODE, READONLY, ALIGN=1

                  OSTimeTickHook PROC
;;;282    #if (OS_CPU_HOOKS_EN > 0) && (OS_TIME_TICK_HOOK_EN > 0)
;;;283    void  OSTimeTickHook (void)
000000  4770              BX       lr
;;;284    {
;;;285    #if OS_APP_HOOKS_EN > 0
;;;286        App_TimeTickHook();
;;;287    #endif
;;;288    
;;;289    #if OS_TMR_EN > 0
;;;290        OSTmrCtr++;
;;;291        if (OSTmrCtr >= (OS_TICKS_PER_SEC / OS_TMR_CFG_TICKS_PER_SEC)) {
;;;292            OSTmrCtr = 0;
;;;293            OSTmrSignal();
;;;294        }
;;;295    #endif
;;;296    }
;;;297    #endif
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  OSInterrputSum
                          DCD      0x00000000
