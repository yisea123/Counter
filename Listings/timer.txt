; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\timer.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\timer.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\user -I.\driver -I.\HARDWARE\TIMER -I.\AD_Sample -I.\SYSTEM\delay -I.\Cmd -I.\SYSTEM\sys -I.\UCOSII\CONFIG -I.\UCOSII\CORE -I.\UCOSII\PORT -I.\Protocol -I.\RTE\Device\STM32F103ZE -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\StdPeriph_Driver\inc -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F10X_HD --omf_browse=.\objects\timer.crf HARDWARE\TIMER\timer.c]
                          THUMB

                          AREA ||i.TIM2_IRQHandler||, CODE, READONLY, ALIGN=1

                  TIM2_IRQHandler PROC
;;;51     vu16 tim2_irq_cycle = 0;
;;;52     void TIM2_IRQHandler(void)   //TIM2中断
000000  b510              PUSH     {r4,lr}
;;;53     {
;;;54     	if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET) //检查指定的TIM中断发生与否:TIM 中断源 
000002  2101              MOVS     r1,#1
000004  0788              LSLS     r0,r1,#30
000006  f7fffffe          BL       TIM_GetITStatus
00000a  b118              CBZ      r0,|L1.20|
;;;55     	{
;;;56     		TIM_ClearITPendingBit(TIM2, TIM_IT_Update);  //清除TIMx的中断待处理位:TIM 中断源  
00000c  2101              MOVS     r1,#1
00000e  0788              LSLS     r0,r1,#30
000010  f7fffffe          BL       TIM_ClearITPendingBit
                  |L1.20|
;;;57     	}
;;;58     }
000014  bd10              POP      {r4,pc}
;;;59     
                          ENDP


                          AREA ||i.TIM2_Int_Init||, CODE, READONLY, ALIGN=1

                  TIM2_Int_Init PROC
;;;25     //这里使用的是定时器3!
;;;26     void TIM2_Int_Init(u16 arr,u16 psc)
000000  b57f              PUSH     {r0-r6,lr}
;;;27     {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;28     	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
;;;29     	NVIC_InitTypeDef NVIC_InitStructure;
;;;30     
;;;31     	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE); //时钟使能
000006  2101              MOVS     r1,#1
000008  4608              MOV      r0,r1
00000a  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;32     
;;;33     	TIM_DeInit (TIM2);
00000e  f04f4080          MOV      r0,#0x40000000
000012  f7fffffe          BL       TIM_DeInit
;;;34     	TIM_TimeBaseStructure.TIM_Period = arr; //设置在下一个更新事件装入活动的自动重装载寄存器周期的值	 计数到5000为500ms
000016  f8ad5008          STRH     r5,[sp,#8]
;;;35     	TIM_TimeBaseStructure.TIM_Prescaler =psc; //设置用来作为TIMx时钟频率除数的预分频值  10Khz的计数频率  
00001a  f8ad4004          STRH     r4,[sp,#4]
;;;36     	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV2; //设置时钟分割:TDTS = Tck_tim
00001e  f44f7080          MOV      r0,#0x100
000022  f8ad000a          STRH     r0,[sp,#0xa]
;;;37     	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;  //TIM向上计数模式
000026  2000              MOVS     r0,#0
000028  f8ad0006          STRH     r0,[sp,#6]
;;;38     	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure); //根据TIM_TimeBaseInitStruct中指定的参数初始化TIMx的时间基数单位
00002c  a901              ADD      r1,sp,#4
00002e  f04f4080          MOV      r0,#0x40000000
000032  f7fffffe          BL       TIM_TimeBaseInit
;;;39      
;;;40     	TIM_ITConfig(TIM2,TIM_IT_Update,ENABLE ); //使能指定的TIM2中断,允许更新中断
000036  2201              MOVS     r2,#1
000038  4611              MOV      r1,r2
00003a  0790              LSLS     r0,r2,#30
00003c  f7fffffe          BL       TIM_ITConfig
;;;41     
;;;42     	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;  //TIM2中断
000040  201c              MOVS     r0,#0x1c
000042  f88d0000          STRB     r0,[sp,#0]
;;;43     	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = TIM2_INT_PREEM;  //先占优先级2级
000046  2003              MOVS     r0,#3
000048  f88d0001          STRB     r0,[sp,#1]
;;;44     	NVIC_InitStructure.NVIC_IRQChannelSubPriority = TIM2_INT_SUB;  //从优先级2级
00004c  2001              MOVS     r0,#1
00004e  f88d0002          STRB     r0,[sp,#2]
;;;45     	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; //IRQ通道被使能
000052  f88d0003          STRB     r0,[sp,#3]
;;;46     	NVIC_Init(&NVIC_InitStructure);  //根据NVIC_InitStruct中指定的参数初始化外设NVIC寄存器
000056  4668              MOV      r0,sp
000058  f7fffffe          BL       NVIC_Init
;;;47     
;;;48     	TIM_Cmd(TIM2, ENABLE);  //使能TIMx外设							 
00005c  2101              MOVS     r1,#1
00005e  0788              LSLS     r0,r1,#30
000060  f7fffffe          BL       TIM_Cmd
;;;49     }
000064  bd7f              POP      {r0-r6,pc}
;;;50     //定时器2中断服务程序
                          ENDP


                          AREA ||i.TIM3_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM3_IRQHandler PROC
;;;141    //定时器3中断服务程序
;;;142    void TIM3_IRQHandler(void)   //TIM3中断
000000  b510              PUSH     {r4,lr}
;;;143    {
;;;144    	static u8 dir=1;
;;;145     	static u16 led0pwmval=0;
;;;146    	static u16 delay = 0;
;;;147    	
;;;148    	
;;;149    	if (TIM_GetITStatus(TIM3, TIM_IT_Update) != RESET) //检查指定的TIM中断发生与否:TIM 中断源 
000002  2101              MOVS     r1,#1
000004  481a              LDR      r0,|L3.112|
000006  f7fffffe          BL       TIM_GetITStatus
00000a  b378              CBZ      r0,|L3.108|
;;;150    	{
;;;151    		TIM_ClearITPendingBit(TIM3, TIM_IT_Update  );  //清除TIMx的中断待处理位:TIM 中断源 
00000c  2101              MOVS     r1,#1
00000e  4818              LDR      r0,|L3.112|
000010  f7fffffe          BL       TIM_ClearITPendingBit
;;;152    		delay++;
000014  4817              LDR      r0,|L3.116|
000016  8800              LDRH     r0,[r0,#0]  ; delay
000018  1c40              ADDS     r0,r0,#1
00001a  4916              LDR      r1,|L3.116|
00001c  8008              STRH     r0,[r1,#0]
;;;153    		if (delay ==  (2 * (TIM3_ARR + 1) / PMW_WIDTH )) //1ms
00001e  4608              MOV      r0,r1
000020  8800              LDRH     r0,[r0,#0]  ; delay
000022  2814              CMP      r0,#0x14
000024  d122              BNE      |L3.108|
;;;154    		{
;;;155    			if(dir)led0pwmval++;
000026  4814              LDR      r0,|L3.120|
000028  7800              LDRB     r0,[r0,#0]  ; dir
00002a  b128              CBZ      r0,|L3.56|
00002c  4813              LDR      r0,|L3.124|
00002e  8800              LDRH     r0,[r0,#0]  ; led0pwmval
000030  1c40              ADDS     r0,r0,#1
000032  4912              LDR      r1,|L3.124|
000034  8008              STRH     r0,[r1,#0]
000036  e004              B        |L3.66|
                  |L3.56|
;;;156    			else led0pwmval--;
000038  4810              LDR      r0,|L3.124|
00003a  8800              LDRH     r0,[r0,#0]  ; led0pwmval
00003c  1e40              SUBS     r0,r0,#1
00003e  490f              LDR      r1,|L3.124|
000040  8008              STRH     r0,[r1,#0]
                  |L3.66|
;;;157    
;;;158    			if(led0pwmval==PMW_WIDTH)dir=0;
000042  480e              LDR      r0,|L3.124|
000044  8800              LDRH     r0,[r0,#0]  ; led0pwmval
000046  2864              CMP      r0,#0x64
000048  d102              BNE      |L3.80|
00004a  2000              MOVS     r0,#0
00004c  490a              LDR      r1,|L3.120|
00004e  7008              STRB     r0,[r1,#0]
                  |L3.80|
;;;159    			if(led0pwmval==0)dir=1;										 
000050  480a              LDR      r0,|L3.124|
000052  8800              LDRH     r0,[r0,#0]  ; led0pwmval
000054  b910              CBNZ     r0,|L3.92|
000056  2001              MOVS     r0,#1
000058  4907              LDR      r1,|L3.120|
00005a  7008              STRB     r0,[r1,#0]
                  |L3.92|
;;;160    			TIM_SetCompare2(TIM3,led0pwmval);	
00005c  4807              LDR      r0,|L3.124|
00005e  8801              LDRH     r1,[r0,#0]  ; led0pwmval
000060  4803              LDR      r0,|L3.112|
000062  f7fffffe          BL       TIM_SetCompare2
;;;161    			delay = 0;
000066  2000              MOVS     r0,#0
000068  4902              LDR      r1,|L3.116|
00006a  8008              STRH     r0,[r1,#0]
                  |L3.108|
;;;162    		}
;;;163    	}
;;;164    }
00006c  bd10              POP      {r4,pc}
;;;165    
                          ENDP

00006e  0000              DCW      0x0000
                  |L3.112|
                          DCD      0x40000400
                  |L3.116|
                          DCD      delay
                  |L3.120|
                          DCD      ||dir||
                  |L3.124|
                          DCD      led0pwmval

                          AREA ||i.TIM3_Int_Init||, CODE, READONLY, ALIGN=2

                  TIM3_Int_Init PROC
;;;65     //这里使用的是定时器3!
;;;66     void TIM3_Int_Init(u16 arr,u16 psc)
000000  b57f              PUSH     {r0-r6,lr}
;;;67     {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;68     	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
;;;69     	NVIC_InitTypeDef NVIC_InitStructure;
;;;70     
;;;71     	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE); //时钟使能
000006  2101              MOVS     r1,#1
000008  2002              MOVS     r0,#2
00000a  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;72     
;;;73     	TIM_TimeBaseStructure.TIM_Period = arr; //设置在下一个更新事件装入活动的自动重装载寄存器周期的值	 计数到5000为500ms
00000e  f8ad5008          STRH     r5,[sp,#8]
;;;74     	TIM_TimeBaseStructure.TIM_Prescaler =psc; //设置用来作为TIMx时钟频率除数的预分频值  10Khz的计数频率  
000012  f8ad4004          STRH     r4,[sp,#4]
;;;75     	TIM_TimeBaseStructure.TIM_ClockDivision = 0; //设置时钟分割:TDTS = Tck_tim
000016  2000              MOVS     r0,#0
000018  f8ad000a          STRH     r0,[sp,#0xa]
;;;76     	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;  //TIM向上计数模式
00001c  f8ad0006          STRH     r0,[sp,#6]
;;;77     	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure); //根据TIM_TimeBaseInitStruct中指定的参数初始化TIMx的时间基数单位
000020  a901              ADD      r1,sp,#4
000022  480e              LDR      r0,|L4.92|
000024  f7fffffe          BL       TIM_TimeBaseInit
;;;78      
;;;79     	TIM_ITConfig(TIM3,TIM_IT_Update,ENABLE ); //使能指定的TIM3中断,允许更新中断
000028  2201              MOVS     r2,#1
00002a  4611              MOV      r1,r2
00002c  480b              LDR      r0,|L4.92|
00002e  f7fffffe          BL       TIM_ITConfig
;;;80     
;;;81     	NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;  //TIM3中断
000032  201d              MOVS     r0,#0x1d
000034  f88d0000          STRB     r0,[sp,#0]
;;;82     	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = TIM3_INT_PREEM;  //先占优先级0级
000038  2003              MOVS     r0,#3
00003a  f88d0001          STRB     r0,[sp,#1]
;;;83     	NVIC_InitStructure.NVIC_IRQChannelSubPriority = TIM3_INT_SUB;  //从优先级3级
00003e  2002              MOVS     r0,#2
000040  f88d0002          STRB     r0,[sp,#2]
;;;84     	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; //IRQ通道被使能
000044  2001              MOVS     r0,#1
000046  f88d0003          STRB     r0,[sp,#3]
;;;85     	NVIC_Init(&NVIC_InitStructure);  //根据NVIC_InitStruct中指定的参数初始化外设NVIC寄存器
00004a  4668              MOV      r0,sp
00004c  f7fffffe          BL       NVIC_Init
;;;86     
;;;87     	TIM_Cmd(TIM3, ENABLE);  //使能TIMx外设
000050  2101              MOVS     r1,#1
000052  4802              LDR      r0,|L4.92|
000054  f7fffffe          BL       TIM_Cmd
;;;88     							 
;;;89     }
000058  bd7f              POP      {r0-r6,pc}
;;;90     
                          ENDP

00005a  0000              DCW      0x0000
                  |L4.92|
                          DCD      0x40000400

                          AREA ||i.TIM3_PWM_Init||, CODE, READONLY, ALIGN=2

                  TIM3_PWM_Init PROC
;;;96     //psc：时钟预分频数
;;;97     void TIM3_PWM_Init(u16 arr,u16 psc)
000000  b530              PUSH     {r4,r5,lr}
;;;98     {  
000002  b089              SUB      sp,sp,#0x24
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;99     	GPIO_InitTypeDef GPIO_InitStructure;
;;;100    	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
;;;101    	TIM_OCInitTypeDef  TIM_OCInitStructure;
;;;102    	NVIC_InitTypeDef NVIC_InitStructure;
;;;103    	
;;;104    
;;;105    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);	//使能定时器3时钟
000008  2101              MOVS     r1,#1
00000a  2002              MOVS     r0,#2
00000c  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;106     	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB  | RCC_APB2Periph_AFIO, ENABLE);  //使能GPIO外设和AFIO复用功能模块时钟
000010  2101              MOVS     r1,#1
000012  2009              MOVS     r0,#9
000014  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;107    	
;;;108    	GPIO_PinRemapConfig(GPIO_PartialRemap_TIM3, ENABLE); //Timer3部分重映射  TIM3_CH2->PB5    
000018  2101              MOVS     r1,#1
00001a  4824              LDR      r0,|L5.172|
00001c  f7fffffe          BL       GPIO_PinRemapConfig
;;;109     
;;;110       //设置该引脚为复用输出功能,输出TIM3 CH2的PWM脉冲波形	GPIOB.5
;;;111    	GPIO_InitStructure.GPIO_Pin = LED3_MAP; //TIM_CH2
000020  2020              MOVS     r0,#0x20
000022  f8ad0020          STRH     r0,[sp,#0x20]
;;;112    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;  //复用推挽输出
000026  2018              MOVS     r0,#0x18
000028  f88d0023          STRB     r0,[sp,#0x23]
;;;113    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00002c  2003              MOVS     r0,#3
00002e  f88d0022          STRB     r0,[sp,#0x22]
;;;114    	GPIO_Init(GPIOB, &GPIO_InitStructure);//初始化GPIO
000032  a908              ADD      r1,sp,#0x20
000034  481e              LDR      r0,|L5.176|
000036  f7fffffe          BL       GPIO_Init
;;;115     
;;;116       //初始化TIM3
;;;117    	TIM_TimeBaseStructure.TIM_Period = arr; //设置在下一个更新事件装入活动的自动重装载寄存器周期的值
00003a  f8ad5018          STRH     r5,[sp,#0x18]
;;;118    	TIM_TimeBaseStructure.TIM_Prescaler =psc; //设置用来作为TIMx时钟频率除数的预分频值 
00003e  f8ad4014          STRH     r4,[sp,#0x14]
;;;119    	TIM_TimeBaseStructure.TIM_ClockDivision = 0; //设置时钟分割:TDTS = Tck_tim
000042  2000              MOVS     r0,#0
000044  f8ad001a          STRH     r0,[sp,#0x1a]
;;;120    	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;  //TIM向上计数模式
000048  f8ad0016          STRH     r0,[sp,#0x16]
;;;121    	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure); //根据TIM_TimeBaseInitStruct中指定的参数初始化TIMx的时间基数单位
00004c  a905              ADD      r1,sp,#0x14
00004e  4819              LDR      r0,|L5.180|
000050  f7fffffe          BL       TIM_TimeBaseInit
;;;122    	
;;;123    	TIM_ITConfig(TIM3,TIM_IT_Update,ENABLE ); //使能指定的TIM3中断,允许更新中断
000054  2201              MOVS     r2,#1
000056  4611              MOV      r1,r2
000058  4816              LDR      r0,|L5.180|
00005a  f7fffffe          BL       TIM_ITConfig
;;;124    	NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;  //TIM3中断
00005e  201d              MOVS     r0,#0x1d
000060  f88d0000          STRB     r0,[sp,#0]
;;;125    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = TIM3_INT_PREEM;  //先占优先级0级
000064  2003              MOVS     r0,#3
000066  f88d0001          STRB     r0,[sp,#1]
;;;126    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = TIM3_INT_SUB;  //从优先级3级
00006a  2002              MOVS     r0,#2
00006c  f88d0002          STRB     r0,[sp,#2]
;;;127    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; //IRQ通道被使能
000070  2001              MOVS     r0,#1
000072  f88d0003          STRB     r0,[sp,#3]
;;;128    	NVIC_Init(&NVIC_InitStructure);  //根据NVIC_InitStruct中指定的参数初始化外设NVIC寄存器
000076  4668              MOV      r0,sp
000078  f7fffffe          BL       NVIC_Init
;;;129    	
;;;130    	//初始化TIM3 Channel2 PWM模式	 
;;;131    	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM2; //选择定时器模式:TIM脉冲宽度调制模式2
00007c  2070              MOVS     r0,#0x70
00007e  f8ad0004          STRH     r0,[sp,#4]
;;;132     	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable; //比较输出使能
000082  2001              MOVS     r0,#1
000084  f8ad0006          STRH     r0,[sp,#6]
;;;133    	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High; //输出极性:TIM输出比较极性高
000088  2000              MOVS     r0,#0
00008a  f8ad000c          STRH     r0,[sp,#0xc]
;;;134    	TIM_OC2Init(TIM3, &TIM_OCInitStructure);  //根据T指定的参数初始化外设TIM3 OC2
00008e  a901              ADD      r1,sp,#4
000090  4808              LDR      r0,|L5.180|
000092  f7fffffe          BL       TIM_OC2Init
;;;135    
;;;136    	TIM_OC2PreloadConfig(TIM3, TIM_OCPreload_Enable);  //使能TIM3在CCR2上的预装载寄存器
000096  2108              MOVS     r1,#8
000098  4806              LDR      r0,|L5.180|
00009a  f7fffffe          BL       TIM_OC2PreloadConfig
;;;137     
;;;138    	TIM_Cmd(TIM3, ENABLE);  //使能TIM3
00009e  2101              MOVS     r1,#1
0000a0  4804              LDR      r0,|L5.180|
0000a2  f7fffffe          BL       TIM_Cmd
;;;139    }
0000a6  b009              ADD      sp,sp,#0x24
0000a8  bd30              POP      {r4,r5,pc}
;;;140    
                          ENDP

0000aa  0000              DCW      0x0000
                  |L5.172|
                          DCD      0x001a0800
                  |L5.176|
                          DCD      0x40010c00
                  |L5.180|
                          DCD      0x40000400

                          AREA ||i.TIM4_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM4_IRQHandler PROC
;;;215    //定时器4中断服务程序
;;;216    void TIM4_IRQHandler(void)   //TIM4中断
000000  b510              PUSH     {r4,lr}
;;;217    {
;;;218    	static u8 dir=1;
;;;219     	static u16 led0pwmval=0;
;;;220    	static u16 delay = 0;
;;;221    	
;;;222    	if (TIM_GetITStatus(TIM4, TIM_IT_Update) != RESET) //检查指定的TIM中断发生与否:TIM 中断源 
000002  2101              MOVS     r1,#1
000004  481a              LDR      r0,|L6.112|
000006  f7fffffe          BL       TIM_GetITStatus
00000a  b378              CBZ      r0,|L6.108|
;;;223    	{
;;;224    		TIM_ClearITPendingBit(TIM4, TIM_IT_Update  );  //清除TIMx的中断待处理位:TIM 中断源 
00000c  2101              MOVS     r1,#1
00000e  4818              LDR      r0,|L6.112|
000010  f7fffffe          BL       TIM_ClearITPendingBit
;;;225    		delay++;
000014  4817              LDR      r0,|L6.116|
000016  8800              LDRH     r0,[r0,#0]  ; delay
000018  1c40              ADDS     r0,r0,#1
00001a  4916              LDR      r1,|L6.116|
00001c  8008              STRH     r0,[r1,#0]
;;;226    		if (delay == (2 * (TIM4_ARR + 1) / PMW_WIDTH)) //2ms
00001e  4608              MOV      r0,r1
000020  8800              LDRH     r0,[r0,#0]  ; delay
000022  2814              CMP      r0,#0x14
000024  d122              BNE      |L6.108|
;;;227    		{
;;;228    			if(dir)led0pwmval++;
000026  4814              LDR      r0,|L6.120|
000028  7800              LDRB     r0,[r0,#0]  ; dir
00002a  b128              CBZ      r0,|L6.56|
00002c  4813              LDR      r0,|L6.124|
00002e  8800              LDRH     r0,[r0,#0]  ; led0pwmval
000030  1c40              ADDS     r0,r0,#1
000032  4912              LDR      r1,|L6.124|
000034  8008              STRH     r0,[r1,#0]
000036  e004              B        |L6.66|
                  |L6.56|
;;;229    			else led0pwmval--;
000038  4810              LDR      r0,|L6.124|
00003a  8800              LDRH     r0,[r0,#0]  ; led0pwmval
00003c  1e40              SUBS     r0,r0,#1
00003e  490f              LDR      r1,|L6.124|
000040  8008              STRH     r0,[r1,#0]
                  |L6.66|
;;;230    
;;;231    			if(led0pwmval==PMW_WIDTH)dir=0;
000042  480e              LDR      r0,|L6.124|
000044  8800              LDRH     r0,[r0,#0]  ; led0pwmval
000046  2864              CMP      r0,#0x64
000048  d102              BNE      |L6.80|
00004a  2000              MOVS     r0,#0
00004c  490a              LDR      r1,|L6.120|
00004e  7008              STRB     r0,[r1,#0]
                  |L6.80|
;;;232    			if(led0pwmval==0)dir=1;										 
000050  480a              LDR      r0,|L6.124|
000052  8800              LDRH     r0,[r0,#0]  ; led0pwmval
000054  b910              CBNZ     r0,|L6.92|
000056  2001              MOVS     r0,#1
000058  4907              LDR      r1,|L6.120|
00005a  7008              STRB     r0,[r1,#0]
                  |L6.92|
;;;233    			TIM_SetCompare4(TIM4,led0pwmval);	
00005c  4807              LDR      r0,|L6.124|
00005e  8801              LDRH     r1,[r0,#0]  ; led0pwmval
000060  4803              LDR      r0,|L6.112|
000062  f7fffffe          BL       TIM_SetCompare4
;;;234    			delay = 0;
000066  2000              MOVS     r0,#0
000068  4902              LDR      r1,|L6.116|
00006a  8008              STRH     r0,[r1,#0]
                  |L6.108|
;;;235    		}
;;;236    	}
;;;237    }
00006c  bd10              POP      {r4,pc}
;;;238    
                          ENDP

00006e  0000              DCW      0x0000
                  |L6.112|
                          DCD      0x40000800
                  |L6.116|
                          DCD      |symbol_number.50|
                  |L6.120|
                          DCD      |symbol_number.48|
                  |L6.124|
                          DCD      |symbol_number.49|

                          AREA ||i.TIM4_PWM_Init||, CODE, READONLY, ALIGN=2

                  TIM4_PWM_Init PROC
;;;172    //psc：时钟预分频数
;;;173    void TIM4_PWM_Init(u16 arr,u16 psc)
000000  b530              PUSH     {r4,r5,lr}
;;;174    {  
000002  b089              SUB      sp,sp,#0x24
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;175    	GPIO_InitTypeDef GPIO_InitStructure;
;;;176    	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
;;;177    	TIM_OCInitTypeDef  TIM_OCInitStructure;
;;;178    	NVIC_InitTypeDef NVIC_InitStructure;
;;;179    	
;;;180    
;;;181    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);	//使能定时器3时钟
000008  2101              MOVS     r1,#1
00000a  2004              MOVS     r0,#4
00000c  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;182     	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);  //使能GPIOB外设
000010  2101              MOVS     r1,#1
000012  2008              MOVS     r0,#8
000014  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;183     
;;;184       //设置该引脚为复用输出功能,输出TIM4 CH4的PWM脉冲波形	GPIOB.9
;;;185    	GPIO_InitStructure.GPIO_Pin = LED1_MAP; //TIM4_CH4
000018  f44f7000          MOV      r0,#0x200
00001c  f8ad0020          STRH     r0,[sp,#0x20]
;;;186    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;  //复用推挽输出
000020  2018              MOVS     r0,#0x18
000022  f88d0023          STRB     r0,[sp,#0x23]
;;;187    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000026  2003              MOVS     r0,#3
000028  f88d0022          STRB     r0,[sp,#0x22]
;;;188    	GPIO_Init(GPIOB, &GPIO_InitStructure);//初始化GPIO
00002c  a908              ADD      r1,sp,#0x20
00002e  481d              LDR      r0,|L7.164|
000030  f7fffffe          BL       GPIO_Init
;;;189     
;;;190       //初始化TIM4
;;;191    	TIM_TimeBaseStructure.TIM_Period = arr; //设置在下一个更新事件装入活动的自动重装载寄存器周期的值
000034  f8ad5018          STRH     r5,[sp,#0x18]
;;;192    	TIM_TimeBaseStructure.TIM_Prescaler =psc; //设置用来作为TIMx时钟频率除数的预分频值 
000038  f8ad4014          STRH     r4,[sp,#0x14]
;;;193    	TIM_TimeBaseStructure.TIM_ClockDivision = 0; //设置时钟分割:TDTS = Tck_tim
00003c  2000              MOVS     r0,#0
00003e  f8ad001a          STRH     r0,[sp,#0x1a]
;;;194    	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;  //TIM向上计数模式
000042  f8ad0016          STRH     r0,[sp,#0x16]
;;;195    	TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure); //根据TIM_TimeBaseInitStruct中指定的参数初始化TIMx的时间基数单位
000046  a905              ADD      r1,sp,#0x14
000048  4817              LDR      r0,|L7.168|
00004a  f7fffffe          BL       TIM_TimeBaseInit
;;;196    	
;;;197    	TIM_ITConfig(TIM4,TIM_IT_Update,ENABLE ); //使能指定的TIM4中断,允许更新中断
00004e  2201              MOVS     r2,#1
000050  4611              MOV      r1,r2
000052  4815              LDR      r0,|L7.168|
000054  f7fffffe          BL       TIM_ITConfig
;;;198    	NVIC_InitStructure.NVIC_IRQChannel = TIM4_IRQn;  //TIM4中断
000058  201e              MOVS     r0,#0x1e
00005a  f88d0000          STRB     r0,[sp,#0]
;;;199    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = TIM4_INT_PREEM;  //先占优先级0级
00005e  2003              MOVS     r0,#3
000060  f88d0001          STRB     r0,[sp,#1]
;;;200    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = TIM4_INT_SUB;  //从优先级3级
000064  f88d0002          STRB     r0,[sp,#2]
;;;201    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; //IRQ通道被使能
000068  2001              MOVS     r0,#1
00006a  f88d0003          STRB     r0,[sp,#3]
;;;202    	NVIC_Init(&NVIC_InitStructure);  //根据NVIC_InitStruct中指定的参数初始化外设NVIC寄存器
00006e  4668              MOV      r0,sp
000070  f7fffffe          BL       NVIC_Init
;;;203    	
;;;204    	//初始化TIM4 Channel2 PWM模式	 
;;;205    	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM2; //选择定时器模式:TIM脉冲宽度调制模式2
000074  2070              MOVS     r0,#0x70
000076  f8ad0004          STRH     r0,[sp,#4]
;;;206     	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable; //比较输出使能
00007a  2001              MOVS     r0,#1
00007c  f8ad0006          STRH     r0,[sp,#6]
;;;207    	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High; //输出极性:TIM输出比较极性高
000080  2000              MOVS     r0,#0
000082  f8ad000c          STRH     r0,[sp,#0xc]
;;;208    	TIM_OC4Init(TIM4, &TIM_OCInitStructure);  //根据T指定的参数初始化外设TIM4 OC4
000086  a901              ADD      r1,sp,#4
000088  4807              LDR      r0,|L7.168|
00008a  f7fffffe          BL       TIM_OC4Init
;;;209    
;;;210    	TIM_OC4PreloadConfig(TIM4, TIM_OCPreload_Enable);  //使能TIM4在CCR4上的预装载寄存器
00008e  2108              MOVS     r1,#8
000090  4805              LDR      r0,|L7.168|
000092  f7fffffe          BL       TIM_OC4PreloadConfig
;;;211     
;;;212    	TIM_Cmd(TIM4, ENABLE);  //使能TIM4
000096  2101              MOVS     r1,#1
000098  4803              LDR      r0,|L7.168|
00009a  f7fffffe          BL       TIM_Cmd
;;;213    }
00009e  b009              ADD      sp,sp,#0x24
0000a0  bd30              POP      {r4,r5,pc}
;;;214    
                          ENDP

0000a2  0000              DCW      0x0000
                  |L7.164|
                          DCD      0x40010c00
                  |L7.168|
                          DCD      0x40000800

                          AREA ||i.TIM5_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM5_IRQHandler PROC
;;;273    unsigned long long tim5_pre_cnt = 0;
;;;274    void TIM5_IRQHandler(void)   //TIM5中断
000000  b510              PUSH     {r4,lr}
;;;275    {
;;;276    	if (TIM_GetITStatus(TIM5, TIM_IT_Update) != RESET) //检查指定的TIM中断发生与否:TIM 中断源 
000002  2101              MOVS     r1,#1
000004  4808              LDR      r0,|L8.40|
000006  f7fffffe          BL       TIM_GetITStatus
00000a  b160              CBZ      r0,|L8.38|
;;;277    	{
;;;278    		TIM_ClearITPendingBit(TIM5, TIM_IT_Update  );  //清除TIMx的中断待处理位:TIM 中断源 
00000c  2101              MOVS     r1,#1
00000e  4806              LDR      r0,|L8.40|
000010  f7fffffe          BL       TIM_ClearITPendingBit
;;;279    		tim5_ticks++;
000014  4805              LDR      r0,|L8.44|
000016  e9d02000          LDRD     r2,r0,[r0,#0]
00001a  1c52              ADDS     r2,r2,#1
00001c  f1400000          ADC      r0,r0,#0
000020  4902              LDR      r1,|L8.44|
000022  e9c12000          STRD     r2,r0,[r1,#0]
                  |L8.38|
;;;280    	}
;;;281    }
000026  bd10              POP      {r4,pc}
;;;282    
                          ENDP

                  |L8.40|
                          DCD      0x40000c00
                  |L8.44|
                          DCD      tim5_ticks

                          AREA ||i.TIM5_PWM_Init||, CODE, READONLY, ALIGN=2

                  TIM5_PWM_Init PROC
;;;243    //psc：时钟预分频数
;;;244    void TIM5_PWM_Init(u16 arr,u16 psc)
000000  b57f              PUSH     {r0-r6,lr}
;;;245    {  
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;246    	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
;;;247    	NVIC_InitTypeDef NVIC_InitStructure;
;;;248    	
;;;249    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE);	//使能定时器3时钟
000006  2101              MOVS     r1,#1
000008  2008              MOVS     r0,#8
00000a  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;250    
;;;251       //初始化TIM5
;;;252    	TIM_TimeBaseStructure.TIM_Period = arr; //设置在下一个更新事件装入活动的自动重装载寄存器周期的值
00000e  f8ad5008          STRH     r5,[sp,#8]
;;;253    	TIM_TimeBaseStructure.TIM_Prescaler =psc; //设置用来作为TIMx时钟频率除数的预分频值 
000012  f8ad4004          STRH     r4,[sp,#4]
;;;254    	TIM_TimeBaseStructure.TIM_ClockDivision = 0; //设置时钟分割:TDTS = Tck_tim
000016  2000              MOVS     r0,#0
000018  f8ad000a          STRH     r0,[sp,#0xa]
;;;255    	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;  //TIM向上计数模式
00001c  f8ad0006          STRH     r0,[sp,#6]
;;;256    	TIM_TimeBaseInit(TIM5, &TIM_TimeBaseStructure); //根据TIM_TimeBaseInitStruct中指定的参数初始化TIMx的时间基数单位
000020  a901              ADD      r1,sp,#4
000022  480d              LDR      r0,|L9.88|
000024  f7fffffe          BL       TIM_TimeBaseInit
;;;257    	
;;;258    	
;;;259    	TIM_ITConfig(TIM5,TIM_IT_Update,ENABLE ); //使能指定的TIM5中断,允许更新中断
000028  2201              MOVS     r2,#1
00002a  4611              MOV      r1,r2
00002c  480a              LDR      r0,|L9.88|
00002e  f7fffffe          BL       TIM_ITConfig
;;;260    
;;;261    	NVIC_InitStructure.NVIC_IRQChannel = TIM5_IRQn;  //TIM5中断
000032  2032              MOVS     r0,#0x32
000034  f88d0000          STRB     r0,[sp,#0]
;;;262    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = TIM5_INT_PREEM;  //先占优先级0级
000038  2000              MOVS     r0,#0
00003a  f88d0001          STRB     r0,[sp,#1]
;;;263    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = TIM5_INT_SUB;  //从优先级2级
00003e  f88d0002          STRB     r0,[sp,#2]
;;;264    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; //IRQ通道被使能
000042  2001              MOVS     r0,#1
000044  f88d0003          STRB     r0,[sp,#3]
;;;265    	NVIC_Init(&NVIC_InitStructure);  //根据NVIC_InitStruct中指定的参数初始化外设NVIC寄存器
000048  4668              MOV      r0,sp
00004a  f7fffffe          BL       NVIC_Init
;;;266     
;;;267    	TIM_Cmd(TIM5, ENABLE);  //使能TIM5
00004e  2101              MOVS     r1,#1
000050  4801              LDR      r0,|L9.88|
000052  f7fffffe          BL       TIM_Cmd
;;;268    }
000056  bd7f              POP      {r0-r6,pc}
;;;269    
                          ENDP

                  |L9.88|
                          DCD      0x40000c00

                          AREA ||i.TIM6_PWM_Init||, CODE, READONLY, ALIGN=2

                  TIM6_PWM_Init PROC
;;;298    //psc：时钟预分频数
;;;299    void TIM6_PWM_Init(u16 arr,u16 psc)
000000  b53e              PUSH     {r1-r5,lr}
;;;300    {  
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;301    	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
;;;302    	//NVIC_InitTypeDef NVIC_InitStructure;
;;;303    	
;;;304    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);	//使能定时器3时钟
000006  2101              MOVS     r1,#1
000008  2010              MOVS     r0,#0x10
00000a  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;305    
;;;306       //初始化TIM6
;;;307    	TIM_TimeBaseStructure.TIM_Period = arr; //设置在下一个更新事件装入活动的自动重装载寄存器周期的值
00000e  f8ad5004          STRH     r5,[sp,#4]
;;;308    	TIM_TimeBaseStructure.TIM_Prescaler =psc; //设置用来作为TIMx时钟频率除数的预分频值 
000012  f8ad4000          STRH     r4,[sp,#0]
;;;309    	TIM_TimeBaseStructure.TIM_ClockDivision = 0; //设置时钟分割:TDTS = Tck_tim
000016  2000              MOVS     r0,#0
000018  f8ad0006          STRH     r0,[sp,#6]
;;;310    	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;  //TIM向上计数模式
00001c  f8ad0002          STRH     r0,[sp,#2]
;;;311    	TIM_TimeBaseInit(TIM6, &TIM_TimeBaseStructure); //根据TIM_TimeBaseInitStruct中指定的参数初始化TIMx的时间基数单位
000020  4669              MOV      r1,sp
000022  4806              LDR      r0,|L10.60|
000024  f7fffffe          BL       TIM_TimeBaseInit
;;;312    	
;;;313    	TIM_SelectOutputTrigger(TIM6, TIM_TRGOSource_Update);
000028  2120              MOVS     r1,#0x20
00002a  4804              LDR      r0,|L10.60|
00002c  f7fffffe          BL       TIM_SelectOutputTrigger
;;;314    //	TIM_ITConfig(TIM6,TIM_IT_Update,ENABLE ); //使能指定的TIM6中断,允许更新中断
;;;315    
;;;316    //	NVIC_InitStructure.NVIC_IRQChannel = TIM6_IRQn;  //TIM6中断
;;;317    //	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;  //先占优先级0级
;;;318    //	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;  //从优先级2级
;;;319    //	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; //IRQ通道被使能
;;;320    //	NVIC_Init(&NVIC_InitStructure);  //根据NVIC_InitStruct中指定的参数初始化外设NVIC寄存器
;;;321     
;;;322    	TIM_Cmd(TIM6, ENABLE);  //使能TIM6
000030  2101              MOVS     r1,#1
000032  4802              LDR      r0,|L10.60|
000034  f7fffffe          BL       TIM_Cmd
;;;323    }
000038  bd3e              POP      {r1-r5,pc}
;;;324    
                          ENDP

00003a  0000              DCW      0x0000
                  |L10.60|
                          DCD      0x40001000

                          AREA ||i.TIM7_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM7_IRQHandler PROC
;;;352    //定时器7中断服务程序         
;;;353    void TIM7_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;354    {  
;;;355    	OSIntEnter();
000002  f7fffffe          BL       OSIntEnter
;;;356    	if(TIM_GetITStatus(TIM7,TIM_IT_Update)!=RESET)
000006  2101              MOVS     r1,#1
000008  4809              LDR      r0,|L11.48|
00000a  f7fffffe          BL       TIM_GetITStatus
00000e  b160              CBZ      r0,|L11.42|
;;;357    	{
;;;358    		TIM_ClearITPendingBit(TIM7,TIM_IT_Update);//清除中断标志
000010  2101              MOVS     r1,#1
000012  4807              LDR      r0,|L11.48|
000014  f7fffffe          BL       TIM_ClearITPendingBit
;;;359    		TIM_Cmd(TIM7,DISABLE);//停止定时器
000018  2100              MOVS     r1,#0
00001a  4805              LDR      r0,|L11.48|
00001c  f7fffffe          BL       TIM_Cmd
;;;360    		OSQPost(modbusRTU_msg, (void *) 0x55);//发送消息
000020  2155              MOVS     r1,#0x55
000022  4804              LDR      r0,|L11.52|
000024  6800              LDR      r0,[r0,#0]  ; modbusRTU_msg
000026  f7fffffe          BL       OSQPost
                  |L11.42|
;;;361    	}
;;;362    	OSIntExit();
00002a  f7fffffe          BL       OSIntExit
;;;363    }
00002e  bd10              POP      {r4,pc}
;;;364    
                          ENDP

                  |L11.48|
                          DCD      0x40001400
                  |L11.52|
                          DCD      modbusRTU_msg

                          AREA ||i.TIM7_PWM_Init||, CODE, READONLY, ALIGN=2

                  TIM7_PWM_Init PROC
;;;326    //定时器7初始化
;;;327    void TIM7_PWM_Init(u16 arr,u16 psc)
000000  b57f              PUSH     {r0-r6,lr}
;;;328    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;329    	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
;;;330    	NVIC_InitTypeDef NVIC_InitStructure;
;;;331    
;;;332    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM7, ENABLE); //TIM7时钟使能
000006  2101              MOVS     r1,#1
000008  2020              MOVS     r0,#0x20
00000a  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;333    
;;;334    	//TIM7初始化设置
;;;335    	TIM_TimeBaseStructure.TIM_Period = arr; //设置在下一个更新事件装入活动的自动重装载寄存器周期的值
00000e  f8ad5008          STRH     r5,[sp,#8]
;;;336    	TIM_TimeBaseStructure.TIM_Prescaler = psc; //设置用来作为TIMx时钟频率除数的预分频值 设置计数频率为10kHz
000012  f8ad4004          STRH     r4,[sp,#4]
;;;337    	TIM_TimeBaseStructure.TIM_ClockDivision = 0; //设置时钟分割:TDTS = Tck_tim
000016  2000              MOVS     r0,#0
000018  f8ad000a          STRH     r0,[sp,#0xa]
;;;338    	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;  //TIM向上计数模式
00001c  f8ad0006          STRH     r0,[sp,#6]
;;;339    	TIM_TimeBaseInit(TIM7, &TIM_TimeBaseStructure); //根据TIM_TimeBaseInitStruct中指定的参数初始化TIMx的时间基数单位
000020  a901              ADD      r1,sp,#4
000022  480b              LDR      r0,|L12.80|
000024  f7fffffe          BL       TIM_TimeBaseInit
;;;340    
;;;341    	TIM_ITConfig( TIM7, TIM_IT_Update, ENABLE );//TIM7 允许更新中断
000028  2201              MOVS     r2,#1
00002a  4611              MOV      r1,r2
00002c  4808              LDR      r0,|L12.80|
00002e  f7fffffe          BL       TIM_ITConfig
;;;342    
;;;343    	//TIM7中断分组配置
;;;344    	NVIC_InitStructure.NVIC_IRQChannel =TIM7_IRQn;  //TIM7中断
000032  2037              MOVS     r0,#0x37
000034  f88d0000          STRB     r0,[sp,#0]
;;;345    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = TIM7_INT_PREEM;  //先占优先级2级
000038  2003              MOVS     r0,#3
00003a  f88d0001          STRB     r0,[sp,#1]
;;;346    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = TIM7_INT_SUB;  //从优先级3级
00003e  f88d0002          STRB     r0,[sp,#2]
;;;347    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; //IRQ通道被使能
000042  2001              MOVS     r0,#1
000044  f88d0003          STRB     r0,[sp,#3]
;;;348    	NVIC_Init(&NVIC_InitStructure);  //根据NVIC_InitStruct中指定的参数初始化外设NVIC寄存器                                                                  
000048  4668              MOV      r0,sp
00004a  f7fffffe          BL       NVIC_Init
;;;349    }
00004e  bd7f              POP      {r0-r6,pc}
;;;350    ///////////////////////////////////////////////////////////////////////////////////////
                          ENDP

                  |L12.80|
                          DCD      0x40001400

                          AREA ||i.get_tim5_ticks||, CODE, READONLY, ALIGN=2

                  get_tim5_ticks PROC
;;;282    
;;;283    unsigned long long get_tim5_ticks (void)
000000  b530              PUSH     {r4,r5,lr}
;;;284    {
;;;285    	return (tim5_ticks * 65535 + TIM5->CNT);
000002  4809              LDR      r0,|L13.40|
000004  f64f73ff          MOV      r3,#0xffff
000008  2400              MOVS     r4,#0
00000a  e9d02100          LDRD     r2,r1,[r0,#0]
00000e  fba20503          UMULL    r0,r5,r2,r3
000012  fb015103          MLA      r1,r1,r3,r5
000016  fb021404          MLA      r4,r2,r4,r1
00001a  4904              LDR      r1,|L13.44|
00001c  8809              LDRH     r1,[r1,#0]
00001e  1840              ADDS     r0,r0,r1
000020  f1440100          ADC      r1,r4,#0
;;;286    }
000024  bd30              POP      {r4,r5,pc}
;;;287    
                          ENDP

000026  0000              DCW      0x0000
                  |L13.40|
                          DCD      tim5_ticks
                  |L13.44|
                          DCD      0x40000c24

                          AREA ||i.refresh_dma1_cycle||, CODE, READONLY, ALIGN=2

                  refresh_dma1_cycle PROC
;;;287    
;;;288    void refresh_dma1_cycle (void)
000000  b530              PUSH     {r4,r5,lr}
;;;289    {
;;;290    	tim5_cur_cnt = tim5_ticks * 65535 + TIM5->CNT;
000002  4910              LDR      r1,|L14.68|
000004  c903              LDM      r1,{r0,r1}
000006  f64f74ff          MOV      r4,#0xffff
00000a  2200              MOVS     r2,#0
00000c  fba03504          UMULL    r3,r5,r0,r4
000010  fb015104          MLA      r1,r1,r4,r5
000014  fb001002          MLA      r0,r0,r2,r1
000018  490b              LDR      r1,|L14.72|
00001a  8809              LDRH     r1,[r1,#0]
00001c  1859              ADDS     r1,r3,r1
00001e  4150              ADCS     r0,r0,r2
000020  4a0a              LDR      r2,|L14.76|
000022  e9c21000          STRD     r1,r0,[r2,#0]
;;;291    	dma_irq_cycle = tim5_cur_cnt - tim5_pre_cnt;
000026  4610              MOV      r0,r2
000028  6800              LDR      r0,[r0,#0]  ; tim5_cur_cnt
00002a  4909              LDR      r1,|L14.80|
00002c  6809              LDR      r1,[r1,#0]  ; tim5_pre_cnt
00002e  1a40              SUBS     r0,r0,r1
000030  4908              LDR      r1,|L14.84|
000032  8008              STRH     r0,[r1,#0]
;;;292    	tim5_pre_cnt = tim5_cur_cnt;
000034  4610              MOV      r0,r2
000036  e9d01000          LDRD     r1,r0,[r0,#0]
00003a  4a05              LDR      r2,|L14.80|
00003c  e9c21000          STRD     r1,r0,[r2,#0]
;;;293    }
000040  bd30              POP      {r4,r5,pc}
;;;294    
                          ENDP

000042  0000              DCW      0x0000
                  |L14.68|
                          DCD      tim5_ticks
                  |L14.72|
                          DCD      0x40000c24
                  |L14.76|
                          DCD      tim5_cur_cnt
                  |L14.80|
                          DCD      tim5_pre_cnt
                  |L14.84|
                          DCD      dma_irq_cycle

                          AREA ||.data||, DATA, ALIGN=3

                  tim2_irq_cycle
000000  0000              DCW      0x0000
000002  0000              DCB      0x00,0x00
                          DCD      0x00000000
                  tim5_ticks
000008  00000000          DCQ      0x0000000000000000
00000c  00000000
                  tim5_cur_cnt
000010  00000000          DCQ      0x0000000000000000
000014  00000000
                  tim5_pre_cnt
000018  00000000          DCQ      0x0000000000000000
00001c  00000000
                  ||dir||
000020  0100              DCB      0x01,0x00
                  led0pwmval
000022  0000              DCW      0x0000
                  delay
000024  0000              DCW      0x0000
                  |symbol_number.48|
000026  0100              DCB      0x01,0x00
                  |symbol_number.49|
000028  0000              DCW      0x0000
                  |symbol_number.50|
00002a  0000              DCW      0x0000

;*** Start embedded assembler ***

#line 1 "HARDWARE\\TIMER\\timer.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_timer_c_371573ab____REV16|
#line 447 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.0.1\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___7_timer_c_371573ab____REV16| PROC
#line 448

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_timer_c_371573ab____REVSH|
#line 462
|__asm___7_timer_c_371573ab____REVSH| PROC
#line 463

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___7_timer_c_371573ab____RRX|
#line 649
|__asm___7_timer_c_371573ab____RRX| PROC
#line 650

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
