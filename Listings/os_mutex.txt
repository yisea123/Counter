; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\os_mutex.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\os_mutex.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\user -I.\driver -I.\HARDWARE\TIMER -I.\AD_Sample -I.\SYSTEM\delay -I.\Cmd -I.\SYSTEM\sys -I.\UCOSII\CONFIG -I.\UCOSII\CORE -I.\UCOSII\PORT -I.\Protocol -I.\RTE\Device\STM32F103ZE -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\StdPeriph_Driver\inc -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F10X_HD --omf_browse=.\objects\os_mutex.crf UCOSII\CORE\os_mutex.c]
                          THUMB

                          AREA ||i.OSMutexAccept||, CODE, READONLY, ALIGN=2

                  OSMutexAccept PROC
;;;83     #if OS_MUTEX_ACCEPT_EN > 0u
;;;84     BOOLEAN  OSMutexAccept (OS_EVENT  *pevent,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;85                             INT8U     *perr)
;;;86     {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;87         INT8U      pip;                                    /* Priority Inheritance Priority (PIP)          */
;;;88     #if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
;;;89         OS_CPU_SR  cpu_sr = 0u;
000008  2700              MOVS     r7,#0
;;;90     #endif
;;;91     
;;;92     
;;;93     
;;;94     #ifdef OS_SAFETY_CRITICAL
;;;95         if (perr == (INT8U *)0) {
;;;96             OS_SAFETY_CRITICAL_EXCEPTION();
;;;97         }
;;;98     #endif
;;;99     
;;;100    #if OS_ARG_CHK_EN > 0u
;;;101        if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
;;;102            *perr = OS_ERR_PEVENT_NULL;
;;;103            return (OS_FALSE);
;;;104        }
;;;105    #endif
;;;106        if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {  /* Validate event block type                    */
00000a  7820              LDRB     r0,[r4,#0]
00000c  2804              CMP      r0,#4
00000e  d004              BEQ      |L1.26|
;;;107            *perr = OS_ERR_EVENT_TYPE;
000010  2001              MOVS     r0,#1
000012  7028              STRB     r0,[r5,#0]
;;;108            return (OS_FALSE);
000014  2000              MOVS     r0,#0
                  |L1.22|
;;;109        }
;;;110        if (OSIntNesting > 0u) {                           /* Make sure it's not called from an ISR        */
;;;111            *perr = OS_ERR_PEND_ISR;
;;;112            return (OS_FALSE);
;;;113        }
;;;114        OS_ENTER_CRITICAL();                               /* Get value (0 or 1) of Mutex                  */
;;;115        pip = (INT8U)(pevent->OSEventCnt >> 8u);           /* Get PIP from mutex                           */
;;;116        if ((pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8) == OS_MUTEX_AVAILABLE) {
;;;117            pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;   /*      Mask off LSByte (Acquire Mutex)         */
;;;118            pevent->OSEventCnt |= OSTCBCur->OSTCBPrio;     /*      Save current task priority in LSByte    */
;;;119            pevent->OSEventPtr  = (void *)OSTCBCur;        /*      Link TCB of task owning Mutex           */
;;;120            if (OSTCBCur->OSTCBPrio <= pip) {              /*      PIP 'must' have a SMALLER prio ...      */
;;;121                OS_EXIT_CRITICAL();                        /*      ... than current task!                  */
;;;122                *perr = OS_ERR_PIP_LOWER;
;;;123            } else {
;;;124                OS_EXIT_CRITICAL();
;;;125                *perr = OS_ERR_NONE;
;;;126            }
;;;127            return (OS_TRUE);
;;;128        }
;;;129        OS_EXIT_CRITICAL();
;;;130        *perr = OS_ERR_NONE;
;;;131        return (OS_FALSE);
;;;132    }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L1.26|
00001a  481b              LDR      r0,|L1.136|
00001c  7800              LDRB     r0,[r0,#0]            ;110  ; OSIntNesting
00001e  b118              CBZ      r0,|L1.40|
000020  2002              MOVS     r0,#2                 ;111
000022  7028              STRB     r0,[r5,#0]            ;111
000024  2000              MOVS     r0,#0                 ;112
000026  e7f6              B        |L1.22|
                  |L1.40|
000028  f7fffffe          BL       OS_CPU_SR_Save
00002c  4607              MOV      r7,r0                 ;114
00002e  8920              LDRH     r0,[r4,#8]            ;115
000030  1206              ASRS     r6,r0,#8              ;115
000032  7a20              LDRB     r0,[r4,#8]            ;116
000034  28ff              CMP      r0,#0xff              ;116
000036  d120              BNE      |L1.122|
000038  8920              LDRH     r0,[r4,#8]            ;117
00003a  f400407f          AND      r0,r0,#0xff00         ;117
00003e  8120              STRH     r0,[r4,#8]            ;117
000040  8920              LDRH     r0,[r4,#8]            ;118
000042  4912              LDR      r1,|L1.140|
000044  6809              LDR      r1,[r1,#0]            ;118  ; OSTCBCur
000046  f8911032          LDRB     r1,[r1,#0x32]         ;118
00004a  4308              ORRS     r0,r0,r1              ;118
00004c  8120              STRH     r0,[r4,#8]            ;118
00004e  480f              LDR      r0,|L1.140|
000050  6800              LDR      r0,[r0,#0]            ;119  ; OSTCBCur
000052  6060              STR      r0,[r4,#4]            ;119
000054  480d              LDR      r0,|L1.140|
000056  6800              LDR      r0,[r0,#0]            ;120  ; OSTCBCur
000058  f8900032          LDRB     r0,[r0,#0x32]         ;120
00005c  42b0              CMP      r0,r6                 ;120
00005e  dc05              BGT      |L1.108|
000060  4638              MOV      r0,r7                 ;121
000062  f7fffffe          BL       OS_CPU_SR_Restore
000066  2078              MOVS     r0,#0x78              ;122
000068  7028              STRB     r0,[r5,#0]            ;122
00006a  e004              B        |L1.118|
                  |L1.108|
00006c  4638              MOV      r0,r7                 ;124
00006e  f7fffffe          BL       OS_CPU_SR_Restore
000072  2000              MOVS     r0,#0                 ;125
000074  7028              STRB     r0,[r5,#0]            ;125
                  |L1.118|
000076  2001              MOVS     r0,#1                 ;127
000078  e7cd              B        |L1.22|
                  |L1.122|
00007a  4638              MOV      r0,r7                 ;129
00007c  f7fffffe          BL       OS_CPU_SR_Restore
000080  2000              MOVS     r0,#0                 ;130
000082  7028              STRB     r0,[r5,#0]            ;130
000084  bf00              NOP                            ;131
000086  e7c6              B        |L1.22|
;;;133    #endif
                          ENDP

                  |L1.136|
                          DCD      OSIntNesting
                  |L1.140|
                          DCD      OSTCBCur

                          AREA ||i.OSMutexCreate||, CODE, READONLY, ALIGN=2

                  OSMutexCreate PROC
;;;169    
;;;170    OS_EVENT  *OSMutexCreate (INT8U   prio,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;171                              INT8U  *perr)
;;;172    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;173        OS_EVENT  *pevent;
;;;174    #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
;;;175        OS_CPU_SR  cpu_sr = 0u;
000008  2700              MOVS     r7,#0
;;;176    #endif
;;;177    
;;;178    
;;;179    
;;;180    #ifdef OS_SAFETY_CRITICAL
;;;181        if (perr == (INT8U *)0) {
;;;182            OS_SAFETY_CRITICAL_EXCEPTION();
;;;183        }
;;;184    #endif
;;;185    
;;;186    #ifdef OS_SAFETY_CRITICAL_IEC61508
;;;187        if (OSSafetyCriticalStartFlag == OS_TRUE) {
;;;188            OS_SAFETY_CRITICAL_EXCEPTION();
;;;189        }
;;;190    #endif
;;;191    
;;;192    #if OS_ARG_CHK_EN > 0u
;;;193        if (prio >= OS_LOWEST_PRIO) {                          /* Validate PIP                             */
;;;194            *perr = OS_ERR_PRIO_INVALID;
;;;195            return ((OS_EVENT *)0);
;;;196        }
;;;197    #endif
;;;198        if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
00000a  481f              LDR      r0,|L2.136|
00000c  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
00000e  b120              CBZ      r0,|L2.26|
;;;199            *perr = OS_ERR_CREATE_ISR;                         /* ... can't CREATE mutex from an ISR       */
000010  2010              MOVS     r0,#0x10
000012  7030              STRB     r0,[r6,#0]
;;;200            return ((OS_EVENT *)0);
000014  2000              MOVS     r0,#0
                  |L2.22|
;;;201        }
;;;202        OS_ENTER_CRITICAL();
;;;203        if (OSTCBPrioTbl[prio] != (OS_TCB *)0) {               /* Mutex priority must not already exist    */
;;;204            OS_EXIT_CRITICAL();                                /* Task already exist at priority ...       */
;;;205            *perr = OS_ERR_PRIO_EXIST;                         /* ... inheritance priority                 */
;;;206            return ((OS_EVENT *)0);
;;;207        }
;;;208        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;                  /* Reserve the table entry                  */
;;;209        pevent             = OSEventFreeList;                  /* Get next free event control block        */
;;;210        if (pevent == (OS_EVENT *)0) {                         /* See if an ECB was available              */
;;;211            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* No, Release the table entry              */
;;;212            OS_EXIT_CRITICAL();
;;;213            *perr              = OS_ERR_PEVENT_NULL;           /* No more event control blocks             */
;;;214            return (pevent);
;;;215        }
;;;216        OSEventFreeList        = (OS_EVENT *)OSEventFreeList->OSEventPtr;   /* Adjust the free list        */
;;;217        OS_EXIT_CRITICAL();
;;;218        pevent->OSEventType    = OS_EVENT_TYPE_MUTEX;
;;;219        pevent->OSEventCnt     = (INT16U)((INT16U)prio << 8u) | OS_MUTEX_AVAILABLE; /* Resource is avail.  */
;;;220        pevent->OSEventPtr     = (void *)0;                                 /* No task owning the mutex    */
;;;221    #if OS_EVENT_NAME_EN > 0u
;;;222        pevent->OSEventName    = (INT8U *)(void *)"?";
;;;223    #endif
;;;224        OS_EventWaitListInit(pevent);
;;;225        *perr                  = OS_ERR_NONE;
;;;226        return (pevent);
;;;227    }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L2.26|
00001a  f7fffffe          BL       OS_CPU_SR_Save
00001e  4607              MOV      r7,r0                 ;202
000020  481a              LDR      r0,|L2.140|
000022  f8500025          LDR      r0,[r0,r5,LSL #2]     ;203
000026  b130              CBZ      r0,|L2.54|
000028  4638              MOV      r0,r7                 ;204
00002a  f7fffffe          BL       OS_CPU_SR_Restore
00002e  2028              MOVS     r0,#0x28              ;205
000030  7030              STRB     r0,[r6,#0]            ;205
000032  2000              MOVS     r0,#0                 ;206
000034  e7ef              B        |L2.22|
                  |L2.54|
000036  2001              MOVS     r0,#1                 ;208
000038  4914              LDR      r1,|L2.140|
00003a  f8410025          STR      r0,[r1,r5,LSL #2]     ;208
00003e  4814              LDR      r0,|L2.144|
000040  6804              LDR      r4,[r0,#0]            ;209  ; OSEventFreeList
000042  b94c              CBNZ     r4,|L2.88|
000044  2000              MOVS     r0,#0                 ;211
000046  f8410025          STR      r0,[r1,r5,LSL #2]     ;211
00004a  4638              MOV      r0,r7                 ;212
00004c  f7fffffe          BL       OS_CPU_SR_Restore
000050  2004              MOVS     r0,#4                 ;213
000052  7030              STRB     r0,[r6,#0]            ;213
000054  4620              MOV      r0,r4                 ;214
000056  e7de              B        |L2.22|
                  |L2.88|
000058  480d              LDR      r0,|L2.144|
00005a  6800              LDR      r0,[r0,#0]            ;216  ; OSEventFreeList
00005c  6840              LDR      r0,[r0,#4]            ;216
00005e  490c              LDR      r1,|L2.144|
000060  6008              STR      r0,[r1,#0]            ;216  ; OSEventFreeList
000062  4638              MOV      r0,r7                 ;217
000064  f7fffffe          BL       OS_CPU_SR_Restore
000068  2004              MOVS     r0,#4                 ;218
00006a  7020              STRB     r0,[r4,#0]            ;218
00006c  20ff              MOVS     r0,#0xff              ;219
00006e  ea402005          ORR      r0,r0,r5,LSL #8       ;219
000072  8120              STRH     r0,[r4,#8]            ;219
000074  2000              MOVS     r0,#0                 ;220
000076  6060              STR      r0,[r4,#4]            ;220
000078  4620              MOV      r0,r4                 ;224
00007a  f7fffffe          BL       OS_EventWaitListInit
00007e  2000              MOVS     r0,#0                 ;225
000080  7030              STRB     r0,[r6,#0]            ;225
000082  4620              MOV      r0,r4                 ;226
000084  e7c7              B        |L2.22|
;;;228    
                          ENDP

000086  0000              DCW      0x0000
                  |L2.136|
                          DCD      OSIntNesting
                  |L2.140|
                          DCD      OSTCBPrioTbl
                  |L2.144|
                          DCD      OSEventFreeList

                          AREA ||i.OSMutexDel||, CODE, READONLY, ALIGN=2

                  OSMutexDel PROC
;;;270    #if OS_MUTEX_DEL_EN > 0u
;;;271    OS_EVENT  *OSMutexDel (OS_EVENT  *pevent,
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;272                           INT8U      opt,
;;;273                           INT8U     *perr)
;;;274    {
000004  4604              MOV      r4,r0
000006  468a              MOV      r10,r1
000008  4615              MOV      r5,r2
;;;275        BOOLEAN    tasks_waiting;
;;;276        OS_EVENT  *pevent_return;
;;;277        INT8U      pip;                                        /* Priority inheritance priority            */
;;;278        INT8U      prio;
;;;279        OS_TCB    *ptcb;
;;;280    #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
;;;281        OS_CPU_SR  cpu_sr = 0u;
00000a  2000              MOVS     r0,#0
00000c  9000              STR      r0,[sp,#0]
;;;282    #endif
;;;283    
;;;284    
;;;285    
;;;286    #ifdef OS_SAFETY_CRITICAL
;;;287        if (perr == (INT8U *)0) {
;;;288            OS_SAFETY_CRITICAL_EXCEPTION();
;;;289        }
;;;290    #endif
;;;291    
;;;292    #if OS_ARG_CHK_EN > 0u
;;;293        if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
;;;294            *perr = OS_ERR_PEVENT_NULL;
;;;295            return (pevent);
;;;296        }
;;;297    #endif
;;;298        if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
00000e  7820              LDRB     r0,[r4,#0]
000010  2804              CMP      r0,#4
000012  d004              BEQ      |L3.30|
;;;299            *perr = OS_ERR_EVENT_TYPE;
000014  2001              MOVS     r0,#1
000016  7028              STRB     r0,[r5,#0]
;;;300            return (pevent);
000018  4620              MOV      r0,r4
                  |L3.26|
;;;301        }
;;;302        if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
;;;303            *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
;;;304            return (pevent);
;;;305        }
;;;306        OS_ENTER_CRITICAL();
;;;307        if (pevent->OSEventGrp != 0u) {                        /* See if any tasks waiting on mutex        */
;;;308            tasks_waiting = OS_TRUE;                           /* Yes                                      */
;;;309        } else {
;;;310            tasks_waiting = OS_FALSE;                          /* No                                       */
;;;311        }
;;;312        switch (opt) {
;;;313            case OS_DEL_NO_PEND:                               /* DELETE MUTEX ONLY IF NO TASK WAITING --- */
;;;314                 if (tasks_waiting == OS_FALSE) {
;;;315    #if OS_EVENT_NAME_EN > 0u
;;;316                     pevent->OSEventName = (INT8U *)(void *)"?";
;;;317    #endif
;;;318                     pip                 = (INT8U)(pevent->OSEventCnt >> 8u);
;;;319                     OSTCBPrioTbl[pip]   = (OS_TCB *)0;        /* Free up the PIP                          */
;;;320                     pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
;;;321                     pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
;;;322                     pevent->OSEventCnt  = 0u;
;;;323                     OSEventFreeList     = pevent;
;;;324                     OS_EXIT_CRITICAL();
;;;325                     *perr               = OS_ERR_NONE;
;;;326                     pevent_return       = (OS_EVENT *)0;      /* Mutex has been deleted                   */
;;;327                 } else {
;;;328                     OS_EXIT_CRITICAL();
;;;329                     *perr               = OS_ERR_TASK_WAITING;
;;;330                     pevent_return       = pevent;
;;;331                 }
;;;332                 break;
;;;333    
;;;334            case OS_DEL_ALWAYS:                                /* ALWAYS DELETE THE MUTEX ---------------- */
;;;335                 pip  = (INT8U)(pevent->OSEventCnt >> 8u);                    /* Get PIP of mutex          */
;;;336                 prio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* Get owner's original prio */
;;;337                 ptcb = (OS_TCB *)pevent->OSEventPtr;
;;;338                 if (ptcb != (OS_TCB *)0) {                    /* See if any task owns the mutex           */
;;;339                     if (ptcb->OSTCBPrio == pip) {             /* See if original prio was changed         */
;;;340                         OSMutex_RdyAtPrio(ptcb, prio);        /* Yes, Restore the task's original prio    */
;;;341                     }
;;;342                 }
;;;343                 while (pevent->OSEventGrp != 0u) {            /* Ready ALL tasks waiting for mutex        */
;;;344                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_OK);
;;;345                 }
;;;346    #if OS_EVENT_NAME_EN > 0u
;;;347                 pevent->OSEventName = (INT8U *)(void *)"?";
;;;348    #endif
;;;349                 pip                 = (INT8U)(pevent->OSEventCnt >> 8u);
;;;350                 OSTCBPrioTbl[pip]   = (OS_TCB *)0;            /* Free up the PIP                          */
;;;351                 pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
;;;352                 pevent->OSEventPtr  = OSEventFreeList;        /* Return Event Control Block to free list  */
;;;353                 pevent->OSEventCnt  = 0u;
;;;354                 OSEventFreeList     = pevent;                 /* Get next free event control block        */
;;;355                 OS_EXIT_CRITICAL();
;;;356                 if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
;;;357                     OS_Sched();                               /* Find highest priority task ready to run  */
;;;358                 }
;;;359                 *perr         = OS_ERR_NONE;
;;;360                 pevent_return = (OS_EVENT *)0;                /* Mutex has been deleted                   */
;;;361                 break;
;;;362    
;;;363            default:
;;;364                 OS_EXIT_CRITICAL();
;;;365                 *perr         = OS_ERR_INVALID_OPT;
;;;366                 pevent_return = pevent;
;;;367                 break;
;;;368        }
;;;369        return (pevent_return);
;;;370    }
00001a  e8bd8ff8          POP      {r3-r11,pc}
                  |L3.30|
00001e  483b              LDR      r0,|L3.268|
000020  7800              LDRB     r0,[r0,#0]            ;302  ; OSIntNesting
000022  b118              CBZ      r0,|L3.44|
000024  200f              MOVS     r0,#0xf               ;303
000026  7028              STRB     r0,[r5,#0]            ;303
000028  4620              MOV      r0,r4                 ;304
00002a  e7f6              B        |L3.26|
                  |L3.44|
00002c  f7fffffe          BL       OS_CPU_SR_Save
000030  9000              STR      r0,[sp,#0]            ;306
000032  7aa0              LDRB     r0,[r4,#0xa]          ;307
000034  b110              CBZ      r0,|L3.60|
000036  f04f0801          MOV      r8,#1                 ;308
00003a  e001              B        |L3.64|
                  |L3.60|
00003c  f04f0800          MOV      r8,#0                 ;310
                  |L3.64|
000040  f1ba0f00          CMP      r10,#0                ;312
000044  d003              BEQ      |L3.78|
000046  f1ba0f01          CMP      r10,#1                ;312
00004a  d154              BNE      |L3.246|
00004c  e01e              B        |L3.140|
                  |L3.78|
00004e  f1b80f00          CMP      r8,#0                 ;314
000052  d114              BNE      |L3.126|
000054  8920              LDRH     r0,[r4,#8]            ;318
000056  1207              ASRS     r7,r0,#8              ;318
000058  2000              MOVS     r0,#0                 ;319
00005a  492d              LDR      r1,|L3.272|
00005c  f8410027          STR      r0,[r1,r7,LSL #2]     ;319
000060  7020              STRB     r0,[r4,#0]            ;320
000062  482c              LDR      r0,|L3.276|
000064  6800              LDR      r0,[r0,#0]            ;321  ; OSEventFreeList
000066  6060              STR      r0,[r4,#4]            ;321
000068  2000              MOVS     r0,#0                 ;322
00006a  8120              STRH     r0,[r4,#8]            ;322
00006c  4829              LDR      r0,|L3.276|
00006e  6004              STR      r4,[r0,#0]            ;323  ; OSEventFreeList
000070  9800              LDR      r0,[sp,#0]            ;324
000072  f7fffffe          BL       OS_CPU_SR_Restore
000076  2000              MOVS     r0,#0                 ;325
000078  7028              STRB     r0,[r5,#0]            ;325
00007a  2600              MOVS     r6,#0                 ;326
00007c  e005              B        |L3.138|
                  |L3.126|
00007e  9800              LDR      r0,[sp,#0]            ;328
000080  f7fffffe          BL       OS_CPU_SR_Restore
000084  2049              MOVS     r0,#0x49              ;329
000086  7028              STRB     r0,[r5,#0]            ;329
000088  4626              MOV      r6,r4                 ;330
                  |L3.138|
00008a  e03b              B        |L3.260|
                  |L3.140|
00008c  8920              LDRH     r0,[r4,#8]            ;335
00008e  1207              ASRS     r7,r0,#8              ;335
000090  f894b008          LDRB     r11,[r4,#8]           ;336
000094  f8d49004          LDR      r9,[r4,#4]            ;337
000098  f1b90f00          CMP      r9,#0                 ;338
00009c  d007              BEQ      |L3.174|
00009e  f8990032          LDRB     r0,[r9,#0x32]         ;339
0000a2  42b8              CMP      r0,r7                 ;339
0000a4  d103              BNE      |L3.174|
0000a6  4659              MOV      r1,r11                ;340
0000a8  4648              MOV      r0,r9                 ;340
0000aa  f7fffffe          BL       OSMutex_RdyAtPrio
                  |L3.174|
0000ae  e005              B        |L3.188|
                  |L3.176|
0000b0  2300              MOVS     r3,#0                 ;344
0000b2  2210              MOVS     r2,#0x10              ;344
0000b4  4619              MOV      r1,r3                 ;344
0000b6  4620              MOV      r0,r4                 ;344
0000b8  f7fffffe          BL       OS_EventTaskRdy
                  |L3.188|
0000bc  7aa0              LDRB     r0,[r4,#0xa]          ;343
0000be  2800              CMP      r0,#0                 ;343
0000c0  d1f6              BNE      |L3.176|
0000c2  8920              LDRH     r0,[r4,#8]            ;349
0000c4  1207              ASRS     r7,r0,#8              ;349
0000c6  2000              MOVS     r0,#0                 ;350
0000c8  4911              LDR      r1,|L3.272|
0000ca  f8410027          STR      r0,[r1,r7,LSL #2]     ;350
0000ce  7020              STRB     r0,[r4,#0]            ;351
0000d0  4810              LDR      r0,|L3.276|
0000d2  6800              LDR      r0,[r0,#0]            ;352  ; OSEventFreeList
0000d4  6060              STR      r0,[r4,#4]            ;352
0000d6  2000              MOVS     r0,#0                 ;353
0000d8  8120              STRH     r0,[r4,#8]            ;353
0000da  480e              LDR      r0,|L3.276|
0000dc  6004              STR      r4,[r0,#0]            ;354  ; OSEventFreeList
0000de  9800              LDR      r0,[sp,#0]            ;355
0000e0  f7fffffe          BL       OS_CPU_SR_Restore
0000e4  f1b80f01          CMP      r8,#1                 ;356
0000e8  d101              BNE      |L3.238|
0000ea  f7fffffe          BL       OS_Sched
                  |L3.238|
0000ee  2000              MOVS     r0,#0                 ;359
0000f0  7028              STRB     r0,[r5,#0]            ;359
0000f2  2600              MOVS     r6,#0                 ;360
0000f4  e006              B        |L3.260|
                  |L3.246|
0000f6  9800              LDR      r0,[sp,#0]            ;364
0000f8  f7fffffe          BL       OS_CPU_SR_Restore
0000fc  2007              MOVS     r0,#7                 ;365
0000fe  7028              STRB     r0,[r5,#0]            ;365
000100  4626              MOV      r6,r4                 ;366
000102  bf00              NOP                            ;367
                  |L3.260|
000104  bf00              NOP                            ;332
000106  4630              MOV      r0,r6                 ;369
000108  e787              B        |L3.26|
;;;371    #endif
                          ENDP

00010a  0000              DCW      0x0000
                  |L3.268|
                          DCD      OSIntNesting
                  |L3.272|
                          DCD      OSTCBPrioTbl
                  |L3.276|
                          DCD      OSEventFreeList

                          AREA ||i.OSMutexPend||, CODE, READONLY, ALIGN=2

                  OSMutexPend PROC
;;;413    
;;;414    void  OSMutexPend (OS_EVENT  *pevent,
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;415                       INT32U     timeout,
;;;416                       INT8U     *perr)
;;;417    {
000004  b082              SUB      sp,sp,#8
000006  4605              MOV      r5,r0
000008  4617              MOV      r7,r2
;;;418        INT8U      pip;                                        /* Priority Inheritance Priority (PIP)      */
;;;419        INT8U      mprio;                                      /* Mutex owner priority                     */
;;;420        BOOLEAN    rdy;                                        /* Flag indicating task was ready           */
;;;421        OS_TCB    *ptcb;
;;;422        OS_EVENT  *pevent2;
;;;423        INT8U      y;
;;;424    #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
;;;425        OS_CPU_SR  cpu_sr = 0u;
00000a  2000              MOVS     r0,#0
00000c  9001              STR      r0,[sp,#4]
;;;426    #endif
;;;427    
;;;428    
;;;429    
;;;430    #ifdef OS_SAFETY_CRITICAL
;;;431        if (perr == (INT8U *)0) {
;;;432            OS_SAFETY_CRITICAL_EXCEPTION();
;;;433        }
;;;434    #endif
;;;435    
;;;436    #if OS_ARG_CHK_EN > 0u
;;;437        if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
;;;438            *perr = OS_ERR_PEVENT_NULL;
;;;439            return;
;;;440        }
;;;441    #endif
;;;442        if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
00000e  7828              LDRB     r0,[r5,#0]
000010  2804              CMP      r0,#4
000012  d004              BEQ      |L4.30|
;;;443            *perr = OS_ERR_EVENT_TYPE;
000014  2001              MOVS     r0,#1
000016  7038              STRB     r0,[r7,#0]
                  |L4.24|
;;;444            return;
;;;445        }
;;;446        if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
;;;447            *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
;;;448            return;
;;;449        }
;;;450        if (OSLockNesting > 0u) {                              /* See if called with scheduler locked ...  */
;;;451            *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
;;;452            return;
;;;453        }
;;;454    /*$PAGE*/
;;;455        OS_ENTER_CRITICAL();
;;;456        pip = (INT8U)(pevent->OSEventCnt >> 8u);               /* Get PIP from mutex                       */
;;;457                                                               /* Is Mutex available?                      */
;;;458        if ((INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8) == OS_MUTEX_AVAILABLE) {
;;;459            pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;       /* Yes, Acquire the resource                */
;;;460            pevent->OSEventCnt |= OSTCBCur->OSTCBPrio;         /*      Save priority of owning task        */
;;;461            pevent->OSEventPtr  = (void *)OSTCBCur;            /*      Point to owning task's OS_TCB       */
;;;462            if (OSTCBCur->OSTCBPrio <= pip) {                  /*      PIP 'must' have a SMALLER prio ...  */
;;;463                OS_EXIT_CRITICAL();                            /*      ... than current task!              */
;;;464                *perr = OS_ERR_PIP_LOWER;
;;;465            } else {
;;;466                OS_EXIT_CRITICAL();
;;;467                *perr = OS_ERR_NONE;
;;;468            }
;;;469            return;
;;;470        }
;;;471        mprio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* No, Get priority of mutex owner   */
;;;472        ptcb  = (OS_TCB *)(pevent->OSEventPtr);                       /*     Point to TCB of mutex owner   */
;;;473        if (ptcb->OSTCBPrio > pip) {                                  /*     Need to promote prio of owner?*/
;;;474            if (mprio > OSTCBCur->OSTCBPrio) {
;;;475                y = ptcb->OSTCBY;
;;;476                if ((OSRdyTbl[y] & ptcb->OSTCBBitX) != 0u) {          /*     See if mutex owner is ready   */
;;;477                    OSRdyTbl[y] &= (OS_PRIO)~ptcb->OSTCBBitX;         /*     Yes, Remove owner from Rdy ...*/
;;;478                    if (OSRdyTbl[y] == 0u) {                          /*          ... list at current prio */
;;;479                        OSRdyGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
;;;480                    }
;;;481                    rdy = OS_TRUE;
;;;482                } else {
;;;483                    pevent2 = ptcb->OSTCBEventPtr;
;;;484                    if (pevent2 != (OS_EVENT *)0) {                   /* Remove from event wait list       */
;;;485                        y = ptcb->OSTCBY;
;;;486                        pevent2->OSEventTbl[y] &= (OS_PRIO)~ptcb->OSTCBBitX;
;;;487                        if (pevent2->OSEventTbl[y] == 0u) {
;;;488                            pevent2->OSEventGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
;;;489                        }
;;;490                    }
;;;491                    rdy = OS_FALSE;                            /* No                                       */
;;;492                }
;;;493                ptcb->OSTCBPrio = pip;                         /* Change owner task prio to PIP            */
;;;494    #if OS_LOWEST_PRIO <= 63u
;;;495                ptcb->OSTCBY    = (INT8U)( ptcb->OSTCBPrio >> 3u);
;;;496                ptcb->OSTCBX    = (INT8U)( ptcb->OSTCBPrio & 0x07u);
;;;497    #else
;;;498                ptcb->OSTCBY    = (INT8U)((INT8U)(ptcb->OSTCBPrio >> 4u) & 0xFFu);
;;;499                ptcb->OSTCBX    = (INT8U)( ptcb->OSTCBPrio & 0x0Fu);
;;;500    #endif
;;;501                ptcb->OSTCBBitY = (OS_PRIO)(1uL << ptcb->OSTCBY);
;;;502                ptcb->OSTCBBitX = (OS_PRIO)(1uL << ptcb->OSTCBX);
;;;503    
;;;504                if (rdy == OS_TRUE) {                          /* If task was ready at owner's priority ...*/
;;;505                    OSRdyGrp               |= ptcb->OSTCBBitY; /* ... make it ready at new priority.       */
;;;506                    OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
;;;507                } else {
;;;508                    pevent2 = ptcb->OSTCBEventPtr;
;;;509                    if (pevent2 != (OS_EVENT *)0) {            /* Add to event wait list                   */
;;;510                        pevent2->OSEventGrp               |= ptcb->OSTCBBitY;
;;;511                        pevent2->OSEventTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
;;;512                    }
;;;513                }
;;;514                OSTCBPrioTbl[pip] = ptcb;
;;;515            }
;;;516        }
;;;517        OSTCBCur->OSTCBStat     |= OS_STAT_MUTEX;         /* Mutex not available, pend current task        */
;;;518        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
;;;519        OSTCBCur->OSTCBDly       = timeout;               /* Store timeout in current task's TCB           */
;;;520        OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
;;;521        OS_EXIT_CRITICAL();
;;;522        OS_Sched();                                       /* Find next highest priority task ready         */
;;;523        OS_ENTER_CRITICAL();
;;;524        switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
;;;525            case OS_STAT_PEND_OK:
;;;526                 *perr = OS_ERR_NONE;
;;;527                 break;
;;;528    
;;;529            case OS_STAT_PEND_ABORT:
;;;530                 *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted getting mutex        */
;;;531                 break;
;;;532    
;;;533            case OS_STAT_PEND_TO:
;;;534            default:
;;;535                 OS_EventTaskRemove(OSTCBCur, pevent);
;;;536                 *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get mutex within TO   */
;;;537                 break;
;;;538        }
;;;539        OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
;;;540        OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
;;;541        OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
;;;542    #if (OS_EVENT_MULTI_EN > 0u)
;;;543        OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
;;;544    #endif
;;;545        OS_EXIT_CRITICAL();
;;;546    }
000018  b005              ADD      sp,sp,#0x14
00001a  e8bd8ff0          POP      {r4-r11,pc}
                  |L4.30|
00001e  4880              LDR      r0,|L4.544|
000020  7800              LDRB     r0,[r0,#0]            ;446  ; OSIntNesting
000022  b110              CBZ      r0,|L4.42|
000024  2002              MOVS     r0,#2                 ;447
000026  7038              STRB     r0,[r7,#0]            ;447
000028  e7f6              B        |L4.24|
                  |L4.42|
00002a  487e              LDR      r0,|L4.548|
00002c  7800              LDRB     r0,[r0,#0]            ;450  ; OSLockNesting
00002e  b110              CBZ      r0,|L4.54|
000030  200d              MOVS     r0,#0xd               ;451
000032  7038              STRB     r0,[r7,#0]            ;451
000034  e7f0              B        |L4.24|
                  |L4.54|
000036  f7fffffe          BL       OS_CPU_SR_Save
00003a  9001              STR      r0,[sp,#4]            ;455
00003c  8928              LDRH     r0,[r5,#8]            ;456
00003e  ea4f2920          ASR      r9,r0,#8              ;456
000042  7a28              LDRB     r0,[r5,#8]            ;458
000044  28ff              CMP      r0,#0xff              ;458
000046  d11f              BNE      |L4.136|
000048  8928              LDRH     r0,[r5,#8]            ;459
00004a  f400407f          AND      r0,r0,#0xff00         ;459
00004e  8128              STRH     r0,[r5,#8]            ;459
000050  8928              LDRH     r0,[r5,#8]            ;460
000052  4975              LDR      r1,|L4.552|
000054  6809              LDR      r1,[r1,#0]            ;460  ; OSTCBCur
000056  f8911032          LDRB     r1,[r1,#0x32]         ;460
00005a  4308              ORRS     r0,r0,r1              ;460
00005c  8128              STRH     r0,[r5,#8]            ;460
00005e  4872              LDR      r0,|L4.552|
000060  6800              LDR      r0,[r0,#0]            ;461  ; OSTCBCur
000062  6068              STR      r0,[r5,#4]            ;461
000064  4870              LDR      r0,|L4.552|
000066  6800              LDR      r0,[r0,#0]            ;462  ; OSTCBCur
000068  f8900032          LDRB     r0,[r0,#0x32]         ;462
00006c  4548              CMP      r0,r9                 ;462
00006e  dc05              BGT      |L4.124|
000070  9801              LDR      r0,[sp,#4]            ;463
000072  f7fffffe          BL       OS_CPU_SR_Restore
000076  2078              MOVS     r0,#0x78              ;464
000078  7038              STRB     r0,[r7,#0]            ;464
00007a  e004              B        |L4.134|
                  |L4.124|
00007c  9801              LDR      r0,[sp,#4]            ;466
00007e  f7fffffe          BL       OS_CPU_SR_Restore
000082  2000              MOVS     r0,#0                 ;467
000084  7038              STRB     r0,[r7,#0]            ;467
                  |L4.134|
000086  e7c7              B        |L4.24|
                  |L4.136|
000088  f895b008          LDRB     r11,[r5,#8]           ;471
00008c  686c              LDR      r4,[r5,#4]            ;472
00008e  f8940032          LDRB     r0,[r4,#0x32]         ;473
000092  4548              CMP      r0,r9                 ;473
000094  dd7a              BLE      |L4.396|
000096  4864              LDR      r0,|L4.552|
000098  6800              LDR      r0,[r0,#0]            ;474  ; OSTCBCur
00009a  f8900032          LDRB     r0,[r0,#0x32]         ;474
00009e  4558              CMP      r0,r11                ;474
0000a0  da74              BGE      |L4.396|
0000a2  f8948034          LDRB     r8,[r4,#0x34]         ;475
0000a6  4861              LDR      r0,|L4.556|
0000a8  f8100008          LDRB     r0,[r0,r8]            ;476
0000ac  f8941035          LDRB     r1,[r4,#0x35]         ;476
0000b0  4008              ANDS     r0,r0,r1              ;476
0000b2  b1b0              CBZ      r0,|L4.226|
0000b4  485d              LDR      r0,|L4.556|
0000b6  f8100008          LDRB     r0,[r0,r8]            ;477
0000ba  f8941035          LDRB     r1,[r4,#0x35]         ;477
0000be  4388              BICS     r0,r0,r1              ;477
0000c0  495a              LDR      r1,|L4.556|
0000c2  f8010008          STRB     r0,[r1,r8]            ;477
0000c6  4608              MOV      r0,r1                 ;478
0000c8  f8100008          LDRB     r0,[r0,r8]            ;478
0000cc  b930              CBNZ     r0,|L4.220|
0000ce  f8941036          LDRB     r1,[r4,#0x36]         ;479
0000d2  4857              LDR      r0,|L4.560|
0000d4  7800              LDRB     r0,[r0,#0]            ;479  ; OSRdyGrp
0000d6  4388              BICS     r0,r0,r1              ;479
0000d8  4955              LDR      r1,|L4.560|
0000da  7008              STRB     r0,[r1,#0]            ;479
                  |L4.220|
0000dc  f04f0a01          MOV      r10,#1                ;481
0000e0  e019              B        |L4.278|
                  |L4.226|
0000e2  69e6              LDR      r6,[r4,#0x1c]         ;483
0000e4  b1ae              CBZ      r6,|L4.274|
0000e6  f8948034          LDRB     r8,[r4,#0x34]         ;485
0000ea  f106000b          ADD      r0,r6,#0xb            ;486
0000ee  f8100008          LDRB     r0,[r0,r8]            ;486
0000f2  f8941035          LDRB     r1,[r4,#0x35]         ;486
0000f6  4388              BICS     r0,r0,r1              ;486
0000f8  f106010b          ADD      r1,r6,#0xb            ;486
0000fc  f8010008          STRB     r0,[r1,r8]            ;486
000100  4608              MOV      r0,r1                 ;487
000102  f8100008          LDRB     r0,[r0,r8]            ;487
000106  b920              CBNZ     r0,|L4.274|
000108  7ab0              LDRB     r0,[r6,#0xa]          ;488
00010a  f8941036          LDRB     r1,[r4,#0x36]         ;488
00010e  4388              BICS     r0,r0,r1              ;488
000110  72b0              STRB     r0,[r6,#0xa]          ;488
                  |L4.274|
000112  f04f0a00          MOV      r10,#0                ;491
                  |L4.278|
000116  f8049f32          STRB     r9,[r4,#0x32]!        ;493
00011a  7820              LDRB     r0,[r4,#0]            ;495
00011c  10c0              ASRS     r0,r0,#3              ;495
00011e  70a0              STRB     r0,[r4,#2]            ;495
000120  7820              LDRB     r0,[r4,#0]            ;496
000122  f0000007          AND      r0,r0,#7              ;496
000126  7060              STRB     r0,[r4,#1]            ;496
000128  78a1              LDRB     r1,[r4,#2]            ;501
00012a  2001              MOVS     r0,#1                 ;501
00012c  4088              LSLS     r0,r0,r1              ;501
00012e  7120              STRB     r0,[r4,#4]            ;501
000130  7861              LDRB     r1,[r4,#1]            ;502
000132  2001              MOVS     r0,#1                 ;502
000134  4088              LSLS     r0,r0,r1              ;502
000136  70e0              STRB     r0,[r4,#3]            ;502
000138  3c32              SUBS     r4,r4,#0x32           ;502
00013a  f1ba0f01          CMP      r10,#1                ;504
00013e  d110              BNE      |L4.354|
000140  3434              ADDS     r4,r4,#0x34           ;505
000142  78a0              LDRB     r0,[r4,#2]            ;505
000144  493a              LDR      r1,|L4.560|
000146  7809              LDRB     r1,[r1,#0]            ;505  ; OSRdyGrp
000148  4308              ORRS     r0,r0,r1              ;505
00014a  4939              LDR      r1,|L4.560|
00014c  7008              STRB     r0,[r1,#0]            ;505
00014e  7820              LDRB     r0,[r4,#0]            ;506
000150  4936              LDR      r1,|L4.556|
000152  5c08              LDRB     r0,[r1,r0]            ;506
000154  7861              LDRB     r1,[r4,#1]            ;506
000156  4308              ORRS     r0,r0,r1              ;506
000158  f8141934          LDRB     r1,[r4],#-0x34        ;506
00015c  4a33              LDR      r2,|L4.556|
00015e  5450              STRB     r0,[r2,r1]            ;506
000160  e011              B        |L4.390|
                  |L4.354|
000162  69e6              LDR      r6,[r4,#0x1c]         ;508
000164  b17e              CBZ      r6,|L4.390|
000166  7ab0              LDRB     r0,[r6,#0xa]          ;510
000168  3434              ADDS     r4,r4,#0x34           ;510
00016a  78a1              LDRB     r1,[r4,#2]            ;510
00016c  4308              ORRS     r0,r0,r1              ;510
00016e  72b0              STRB     r0,[r6,#0xa]          ;510
000170  7821              LDRB     r1,[r4,#0]            ;511
000172  f106000b          ADD      r0,r6,#0xb            ;511
000176  5c40              LDRB     r0,[r0,r1]            ;511
000178  7861              LDRB     r1,[r4,#1]            ;511
00017a  4308              ORRS     r0,r0,r1              ;511
00017c  f8142934          LDRB     r2,[r4],#-0x34        ;511
000180  f106010b          ADD      r1,r6,#0xb            ;511
000184  5488              STRB     r0,[r1,r2]            ;511
                  |L4.390|
000186  482b              LDR      r0,|L4.564|
000188  f8404029          STR      r4,[r0,r9,LSL #2]     ;514
                  |L4.396|
00018c  4826              LDR      r0,|L4.552|
00018e  6800              LDR      r0,[r0,#0]            ;517  ; OSTCBCur
000190  f8900030          LDRB     r0,[r0,#0x30]         ;517
000194  f0400010          ORR      r0,r0,#0x10           ;517
000198  4923              LDR      r1,|L4.552|
00019a  6809              LDR      r1,[r1,#0]            ;517  ; OSTCBCur
00019c  f8810030          STRB     r0,[r1,#0x30]         ;517
0001a0  2000              MOVS     r0,#0                 ;518
0001a2  4921              LDR      r1,|L4.552|
0001a4  6809              LDR      r1,[r1,#0]            ;518  ; OSTCBCur
0001a6  f8810031          STRB     r0,[r1,#0x31]         ;518
0001aa  491f              LDR      r1,|L4.552|
0001ac  9803              LDR      r0,[sp,#0xc]          ;519
0001ae  6809              LDR      r1,[r1,#0]            ;519  ; OSTCBCur
0001b0  62c8              STR      r0,[r1,#0x2c]         ;519
0001b2  4628              MOV      r0,r5                 ;520
0001b4  f7fffffe          BL       OS_EventTaskWait
0001b8  9801              LDR      r0,[sp,#4]            ;521
0001ba  f7fffffe          BL       OS_CPU_SR_Restore
0001be  f7fffffe          BL       OS_Sched
0001c2  f7fffffe          BL       OS_CPU_SR_Save
0001c6  9001              STR      r0,[sp,#4]            ;523
0001c8  4817              LDR      r0,|L4.552|
0001ca  6800              LDR      r0,[r0,#0]            ;524  ; OSTCBCur
0001cc  f8900031          LDRB     r0,[r0,#0x31]         ;524
0001d0  b120              CBZ      r0,|L4.476|
0001d2  2801              CMP      r0,#1                 ;524
0001d4  d009              BEQ      |L4.490|
0001d6  2802              CMP      r0,#2                 ;524
0001d8  d106              BNE      |L4.488|
0001da  e002              B        |L4.482|
                  |L4.476|
0001dc  2000              MOVS     r0,#0                 ;526
0001de  7038              STRB     r0,[r7,#0]            ;526
0001e0  e00b              B        |L4.506|
                  |L4.482|
0001e2  200e              MOVS     r0,#0xe               ;530
0001e4  7038              STRB     r0,[r7,#0]            ;530
0001e6  e008              B        |L4.506|
                  |L4.488|
0001e8  bf00              NOP                            ;533
                  |L4.490|
0001ea  4629              MOV      r1,r5                 ;535
0001ec  480e              LDR      r0,|L4.552|
0001ee  6800              LDR      r0,[r0,#0]            ;535  ; OSTCBCur
0001f0  f7fffffe          BL       OS_EventTaskRemove
0001f4  200a              MOVS     r0,#0xa               ;536
0001f6  7038              STRB     r0,[r7,#0]            ;536
0001f8  bf00              NOP                            ;537
                  |L4.506|
0001fa  bf00              NOP                            ;527
0001fc  2000              MOVS     r0,#0                 ;539
0001fe  490a              LDR      r1,|L4.552|
000200  6809              LDR      r1,[r1,#0]            ;539  ; OSTCBCur
000202  f8810030          STRB     r0,[r1,#0x30]         ;539
000206  4908              LDR      r1,|L4.552|
000208  6809              LDR      r1,[r1,#0]            ;540  ; OSTCBCur
00020a  f8810031          STRB     r0,[r1,#0x31]         ;540
00020e  4906              LDR      r1,|L4.552|
000210  6809              LDR      r1,[r1,#0]            ;541  ; OSTCBCur
000212  61c8              STR      r0,[r1,#0x1c]         ;541
000214  9801              LDR      r0,[sp,#4]            ;545
000216  f7fffffe          BL       OS_CPU_SR_Restore
00021a  bf00              NOP      
00021c  e6fc              B        |L4.24|
;;;547    /*$PAGE*/
                          ENDP

00021e  0000              DCW      0x0000
                  |L4.544|
                          DCD      OSIntNesting
                  |L4.548|
                          DCD      OSLockNesting
                  |L4.552|
                          DCD      OSTCBCur
                  |L4.556|
                          DCD      OSRdyTbl
                  |L4.560|
                          DCD      OSRdyGrp
                  |L4.564|
                          DCD      OSTCBPrioTbl

                          AREA ||i.OSMutexPost||, CODE, READONLY, ALIGN=2

                  OSMutexPost PROC
;;;571    
;;;572    INT8U  OSMutexPost (OS_EVENT *pevent)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;573    {
000004  4604              MOV      r4,r0
;;;574        INT8U      pip;                                   /* Priority inheritance priority                 */
;;;575        INT8U      prio;
;;;576    #if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
;;;577        OS_CPU_SR  cpu_sr = 0u;
000006  2700              MOVS     r7,#0
;;;578    #endif
;;;579    
;;;580    
;;;581    
;;;582        if (OSIntNesting > 0u) {                          /* See if called from ISR ...                    */
000008  482c              LDR      r0,|L5.188|
00000a  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
00000c  b110              CBZ      r0,|L5.20|
;;;583            return (OS_ERR_POST_ISR);                     /* ... can't POST mutex from an ISR              */
00000e  2005              MOVS     r0,#5
                  |L5.16|
;;;584        }
;;;585    #if OS_ARG_CHK_EN > 0u
;;;586        if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
;;;587            return (OS_ERR_PEVENT_NULL);
;;;588        }
;;;589    #endif
;;;590        if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) { /* Validate event block type                     */
;;;591            return (OS_ERR_EVENT_TYPE);
;;;592        }
;;;593        OS_ENTER_CRITICAL();
;;;594        pip  = (INT8U)(pevent->OSEventCnt >> 8u);         /* Get priority inheritance priority of mutex    */
;;;595        prio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* Get owner's original priority      */
;;;596        if (OSTCBCur != (OS_TCB *)pevent->OSEventPtr) {   /* See if posting task owns the MUTEX            */
;;;597            OS_EXIT_CRITICAL();
;;;598            return (OS_ERR_NOT_MUTEX_OWNER);
;;;599        }
;;;600        if (OSTCBCur->OSTCBPrio == pip) {                 /* Did we have to raise current task's priority? */
;;;601            OSMutex_RdyAtPrio(OSTCBCur, prio);            /* Restore the task's original priority          */
;;;602        }
;;;603        OSTCBPrioTbl[pip] = OS_TCB_RESERVED;              /* Reserve table entry                           */
;;;604        if (pevent->OSEventGrp != 0u) {                   /* Any task waiting for the mutex?               */
;;;605                                                          /* Yes, Make HPT waiting for mutex ready         */
;;;606            prio                = OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_OK);
;;;607            pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;  /*      Save priority of mutex's new owner       */
;;;608            pevent->OSEventCnt |= prio;
;;;609            pevent->OSEventPtr  = OSTCBPrioTbl[prio];     /*      Link to new mutex owner's OS_TCB         */
;;;610            if (prio <= pip) {                            /*      PIP 'must' have a SMALLER prio ...       */
;;;611                OS_EXIT_CRITICAL();                       /*      ... than current task!                   */
;;;612                OS_Sched();                               /*      Find highest priority task ready to run  */
;;;613                return (OS_ERR_PIP_LOWER);
;;;614            } else {
;;;615                OS_EXIT_CRITICAL();
;;;616                OS_Sched();                               /*      Find highest priority task ready to run  */
;;;617                return (OS_ERR_NONE);
;;;618            }
;;;619        }
;;;620        pevent->OSEventCnt |= OS_MUTEX_AVAILABLE;         /* No,  Mutex is now available                   */
;;;621        pevent->OSEventPtr  = (void *)0;
;;;622        OS_EXIT_CRITICAL();
;;;623        return (OS_ERR_NONE);
;;;624    }
000010  e8bd81f0          POP      {r4-r8,pc}
                  |L5.20|
000014  7820              LDRB     r0,[r4,#0]            ;590
000016  2804              CMP      r0,#4                 ;590
000018  d001              BEQ      |L5.30|
00001a  2001              MOVS     r0,#1                 ;591
00001c  e7f8              B        |L5.16|
                  |L5.30|
00001e  f7fffffe          BL       OS_CPU_SR_Save
000022  4607              MOV      r7,r0                 ;593
000024  8920              LDRH     r0,[r4,#8]            ;594
000026  1206              ASRS     r6,r0,#8              ;594
000028  7a25              LDRB     r5,[r4,#8]            ;595
00002a  4925              LDR      r1,|L5.192|
00002c  6860              LDR      r0,[r4,#4]            ;596
00002e  6809              LDR      r1,[r1,#0]            ;596  ; OSTCBCur
000030  4288              CMP      r0,r1                 ;596
000032  d004              BEQ      |L5.62|
000034  4638              MOV      r0,r7                 ;597
000036  f7fffffe          BL       OS_CPU_SR_Restore
00003a  2064              MOVS     r0,#0x64              ;598
00003c  e7e8              B        |L5.16|
                  |L5.62|
00003e  4820              LDR      r0,|L5.192|
000040  6800              LDR      r0,[r0,#0]            ;600  ; OSTCBCur
000042  f8900032          LDRB     r0,[r0,#0x32]         ;600
000046  42b0              CMP      r0,r6                 ;600
000048  d104              BNE      |L5.84|
00004a  4629              MOV      r1,r5                 ;601
00004c  481c              LDR      r0,|L5.192|
00004e  6800              LDR      r0,[r0,#0]            ;601  ; OSTCBCur
000050  f7fffffe          BL       OSMutex_RdyAtPrio
                  |L5.84|
000054  2001              MOVS     r0,#1                 ;603
000056  491b              LDR      r1,|L5.196|
000058  f8410026          STR      r0,[r1,r6,LSL #2]     ;603
00005c  7aa0              LDRB     r0,[r4,#0xa]          ;604
00005e  b308              CBZ      r0,|L5.164|
000060  2300              MOVS     r3,#0                 ;606
000062  2210              MOVS     r2,#0x10              ;606
000064  4619              MOV      r1,r3                 ;606
000066  4620              MOV      r0,r4                 ;606
000068  f7fffffe          BL       OS_EventTaskRdy
00006c  4605              MOV      r5,r0                 ;606
00006e  8920              LDRH     r0,[r4,#8]            ;607
000070  f400407f          AND      r0,r0,#0xff00         ;607
000074  8120              STRH     r0,[r4,#8]            ;607
000076  8920              LDRH     r0,[r4,#8]            ;608
000078  4328              ORRS     r0,r0,r5              ;608
00007a  8120              STRH     r0,[r4,#8]            ;608
00007c  4811              LDR      r0,|L5.196|
00007e  f8500025          LDR      r0,[r0,r5,LSL #2]     ;609
000082  6060              STR      r0,[r4,#4]            ;609
000084  42b5              CMP      r5,r6                 ;610
000086  dc06              BGT      |L5.150|
000088  4638              MOV      r0,r7                 ;611
00008a  f7fffffe          BL       OS_CPU_SR_Restore
00008e  f7fffffe          BL       OS_Sched
000092  2078              MOVS     r0,#0x78              ;613
000094  e7bc              B        |L5.16|
                  |L5.150|
000096  4638              MOV      r0,r7                 ;615
000098  f7fffffe          BL       OS_CPU_SR_Restore
00009c  f7fffffe          BL       OS_Sched
0000a0  2000              MOVS     r0,#0                 ;617
0000a2  e7b5              B        |L5.16|
                  |L5.164|
0000a4  8920              LDRH     r0,[r4,#8]            ;620
0000a6  f04000ff          ORR      r0,r0,#0xff           ;620
0000aa  8120              STRH     r0,[r4,#8]            ;620
0000ac  2000              MOVS     r0,#0                 ;621
0000ae  6060              STR      r0,[r4,#4]            ;621
0000b0  4638              MOV      r0,r7                 ;622
0000b2  f7fffffe          BL       OS_CPU_SR_Restore
0000b6  2000              MOVS     r0,#0                 ;623
0000b8  e7aa              B        |L5.16|
;;;625    /*$PAGE*/
                          ENDP

0000ba  0000              DCW      0x0000
                  |L5.188|
                          DCD      OSIntNesting
                  |L5.192|
                          DCD      OSTCBCur
                  |L5.196|
                          DCD      OSTCBPrioTbl

                          AREA ||i.OSMutexQuery||, CODE, READONLY, ALIGN=2

                  OSMutexQuery PROC
;;;644    #if OS_MUTEX_QUERY_EN > 0u
;;;645    INT8U  OSMutexQuery (OS_EVENT       *pevent,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;646                         OS_MUTEX_DATA  *p_mutex_data)
;;;647    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;648        INT8U       i;
;;;649        OS_PRIO    *psrc;
;;;650        OS_PRIO    *pdest;
;;;651    #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
;;;652        OS_CPU_SR   cpu_sr = 0u;
000008  f04f0900          MOV      r9,#0
;;;653    #endif
;;;654    
;;;655    
;;;656    
;;;657        if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
00000c  4817              LDR      r0,|L6.108|
00000e  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
000010  b110              CBZ      r0,|L6.24|
;;;658            return (OS_ERR_QUERY_ISR);                         /* ... can't QUERY mutex from an ISR        */
000012  2006              MOVS     r0,#6
                  |L6.20|
;;;659        }
;;;660    #if OS_ARG_CHK_EN > 0u
;;;661        if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
;;;662            return (OS_ERR_PEVENT_NULL);
;;;663        }
;;;664        if (p_mutex_data == (OS_MUTEX_DATA *)0) {              /* Validate 'p_mutex_data'                  */
;;;665            return (OS_ERR_PDATA_NULL);
;;;666        }
;;;667    #endif
;;;668        if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
;;;669            return (OS_ERR_EVENT_TYPE);
;;;670        }
;;;671        OS_ENTER_CRITICAL();
;;;672        p_mutex_data->OSMutexPIP  = (INT8U)(pevent->OSEventCnt >> 8u);
;;;673        p_mutex_data->OSOwnerPrio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);
;;;674        if (p_mutex_data->OSOwnerPrio == 0xFFu) {
;;;675            p_mutex_data->OSValue = OS_TRUE;
;;;676        } else {
;;;677            p_mutex_data->OSValue = OS_FALSE;
;;;678        }
;;;679        p_mutex_data->OSEventGrp  = pevent->OSEventGrp;        /* Copy wait list                           */
;;;680        psrc                      = &pevent->OSEventTbl[0];
;;;681        pdest                     = &p_mutex_data->OSEventTbl[0];
;;;682        for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
;;;683            *pdest++ = *psrc++;
;;;684        }
;;;685        OS_EXIT_CRITICAL();
;;;686        return (OS_ERR_NONE);
;;;687    }
000014  e8bd87f0          POP      {r4-r10,pc}
                  |L6.24|
000018  7828              LDRB     r0,[r5,#0]            ;668
00001a  2804              CMP      r0,#4                 ;668
00001c  d001              BEQ      |L6.34|
00001e  2001              MOVS     r0,#1                 ;669
000020  e7f8              B        |L6.20|
                  |L6.34|
000022  f7fffffe          BL       OS_CPU_SR_Save
000026  4681              MOV      r9,r0                 ;671
000028  8928              LDRH     r0,[r5,#8]            ;672
00002a  1200              ASRS     r0,r0,#8              ;672
00002c  72e0              STRB     r0,[r4,#0xb]          ;672
00002e  7a28              LDRB     r0,[r5,#8]            ;673
000030  72a0              STRB     r0,[r4,#0xa]          ;673
000032  7aa0              LDRB     r0,[r4,#0xa]          ;674
000034  28ff              CMP      r0,#0xff              ;674
000036  d102              BNE      |L6.62|
000038  2001              MOVS     r0,#1                 ;675
00003a  7260              STRB     r0,[r4,#9]            ;675
00003c  e001              B        |L6.66|
                  |L6.62|
00003e  2000              MOVS     r0,#0                 ;677
000040  7260              STRB     r0,[r4,#9]            ;677
                  |L6.66|
000042  7aa8              LDRB     r0,[r5,#0xa]          ;679
000044  7220              STRB     r0,[r4,#8]            ;679
000046  f105080b          ADD      r8,r5,#0xb            ;680
00004a  4626              MOV      r6,r4                 ;681
00004c  2700              MOVS     r7,#0                 ;682
00004e  e005              B        |L6.92|
                  |L6.80|
000050  f8180b01          LDRB     r0,[r8],#1            ;683
000054  f8060b01          STRB     r0,[r6],#1            ;683
000058  1c78              ADDS     r0,r7,#1              ;682
00005a  b2c7              UXTB     r7,r0                 ;682
                  |L6.92|
00005c  2f08              CMP      r7,#8                 ;682
00005e  d3f7              BCC      |L6.80|
000060  4648              MOV      r0,r9                 ;685
000062  f7fffffe          BL       OS_CPU_SR_Restore
000066  2000              MOVS     r0,#0                 ;686
000068  e7d4              B        |L6.20|
;;;688    #endif                                                     /* OS_MUTEX_QUERY_EN                        */
                          ENDP

00006a  0000              DCW      0x0000
                  |L6.108|
                          DCD      OSIntNesting

                          AREA ||i.OSMutex_RdyAtPrio||, CODE, READONLY, ALIGN=2

                  OSMutex_RdyAtPrio PROC
;;;704    
;;;705    static  void  OSMutex_RdyAtPrio (OS_TCB  *ptcb,
000000  b530              PUSH     {r4,r5,lr}
;;;706                                     INT8U    prio)
;;;707    {
;;;708        INT8U  y;
;;;709    
;;;710    
;;;711        y            =  ptcb->OSTCBY;                          /* Remove owner from ready list at 'pip'    */
000002  f8902034          LDRB     r2,[r0,#0x34]
;;;712        OSRdyTbl[y] &= (OS_PRIO)~ptcb->OSTCBBitX;
000006  4b1b              LDR      r3,|L7.116|
000008  5c9b              LDRB     r3,[r3,r2]
00000a  f8904035          LDRB     r4,[r0,#0x35]
00000e  43a3              BICS     r3,r3,r4
000010  4c18              LDR      r4,|L7.116|
000012  54a3              STRB     r3,[r4,r2]
;;;713        if (OSRdyTbl[y] == 0u) {
000014  4623              MOV      r3,r4
000016  5c9b              LDRB     r3,[r3,r2]
000018  b933              CBNZ     r3,|L7.40|
;;;714            OSRdyGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
00001a  f8904036          LDRB     r4,[r0,#0x36]
00001e  4b16              LDR      r3,|L7.120|
000020  781b              LDRB     r3,[r3,#0]  ; OSRdyGrp
000022  43a3              BICS     r3,r3,r4
000024  4c14              LDR      r4,|L7.120|
000026  7023              STRB     r3,[r4,#0]
                  |L7.40|
;;;715        }
;;;716        ptcb->OSTCBPrio         = prio;
000028  f8001f32          STRB     r1,[r0,#0x32]!
;;;717        OSPrioCur               = prio;                        /* The current task is now at this priority */
00002c  4b13              LDR      r3,|L7.124|
00002e  7019              STRB     r1,[r3,#0]
;;;718    #if OS_LOWEST_PRIO <= 63u
;;;719        ptcb->OSTCBY            = (INT8U)((INT8U)(prio >> 3u) & 0x07u);
000030  f3c103c2          UBFX     r3,r1,#3,#3
000034  7083              STRB     r3,[r0,#2]
;;;720        ptcb->OSTCBX            = (INT8U)(prio & 0x07u);
000036  f0010307          AND      r3,r1,#7
00003a  7043              STRB     r3,[r0,#1]
;;;721    #else
;;;722        ptcb->OSTCBY            = (INT8U)((INT8U)(prio >> 4u) & 0x0Fu);
;;;723        ptcb->OSTCBX            = (INT8U) (prio & 0x0Fu);
;;;724    #endif
;;;725        ptcb->OSTCBBitY         = (OS_PRIO)(1uL << ptcb->OSTCBY);
00003c  7884              LDRB     r4,[r0,#2]
00003e  2301              MOVS     r3,#1
000040  40a3              LSLS     r3,r3,r4
000042  7103              STRB     r3,[r0,#4]
;;;726        ptcb->OSTCBBitX         = (OS_PRIO)(1uL << ptcb->OSTCBX);
000044  7844              LDRB     r4,[r0,#1]
000046  2301              MOVS     r3,#1
000048  40a3              LSLS     r3,r3,r4
00004a  70c3              STRB     r3,[r0,#3]
;;;727        OSRdyGrp               |= ptcb->OSTCBBitY;             /* Make task ready at original priority     */
00004c  7903              LDRB     r3,[r0,#4]
00004e  4c0a              LDR      r4,|L7.120|
000050  7824              LDRB     r4,[r4,#0]  ; OSRdyGrp
000052  4323              ORRS     r3,r3,r4
000054  4c08              LDR      r4,|L7.120|
000056  7023              STRB     r3,[r4,#0]
;;;728        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
000058  7883              LDRB     r3,[r0,#2]
00005a  4c06              LDR      r4,|L7.116|
00005c  5ce3              LDRB     r3,[r4,r3]
00005e  78c4              LDRB     r4,[r0,#3]
000060  4323              ORRS     r3,r3,r4
000062  7884              LDRB     r4,[r0,#2]
000064  3832              SUBS     r0,r0,#0x32
000066  4d03              LDR      r5,|L7.116|
000068  552b              STRB     r3,[r5,r4]
;;;729        OSTCBPrioTbl[prio]      = ptcb;
00006a  4b05              LDR      r3,|L7.128|
00006c  f8430021          STR      r0,[r3,r1,LSL #2]
;;;730    
;;;731    }
000070  bd30              POP      {r4,r5,pc}
;;;732    
                          ENDP

000072  0000              DCW      0x0000
                  |L7.116|
                          DCD      OSRdyTbl
                  |L7.120|
                          DCD      OSRdyGrp
                  |L7.124|
                          DCD      OSPrioCur
                  |L7.128|
                          DCD      OSTCBPrioTbl
